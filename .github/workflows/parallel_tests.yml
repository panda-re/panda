name: Parallel Tests
# For PRs to master or pushes that modify the root Dockerfile, build from scratch
# then run CI tests using that container in parallel
# For forked repos that can't use our self-hosted test suite, just build and run make check

on:
  pull_request:
    branches:
      - master
  #push:
  #  paths: ['Dockerfile'] # If this file changed, we'd need to do a clean build (this action)
  #  otherwise we could speed this up by pulling the last container of 'master', copying
  #  code into it, and then rebuilding

jobs:
  build_container:
    if: github.repository  == 'panda-re/panda'
    runs-on: self-hosted
    steps:
 
    - uses: actions/checkout@v2 # Clones to $GITHUB_WORKSPACE. NOTE: this requires git > 2.18 (not on ubuntu 18.04 by default) to get .git directory

    - name: Build docker container from project root
      run: cd $GITHUB_WORKSPACE && docker build -t panda_local_${{ github.sha }} .

    - name: Minimal test of built container # Just test to see if one of our binaries is installed
      run: docker run --rm "panda_local_${{ github.sha }}" /bin/bash -c 'exit $(panda-system-arm -help | grep -q "usage. panda-system-arm")'

  taint_tests:
    if: github.repository  == 'panda-re/panda'
    runs-on: self-hosted
    needs: [build_container]

    strategy:
      matrix:
        target: [i386, x86_64]

    steps:
    # Given a container with PANDA installed at /panda, run the taint tests
    - name: Run taint tests inside current container
      run: >-
        docker run --name panda_test_${{ matrix.target }}_${GITHUB_RUN_ID}
        --mount type=bind,source=/home/panda/regdir/qcows/wheezy_panda2.qcow2,target=/home/panda/regdir/qcows/wheezy_panda2.qcow2
        --mount type=bind,source=/home/panda/regdir/qcows/bionic-server-cloudimg-amd64-noaslr-nokaslr.qcow2,target=/home/panda/regdir/qcows/bionic-server-cloudimg-amd64-noaslr-nokaslr.qcow2
        --rm -t "panda_local_${{ github.sha }}" bash -c
        "cd /tmp; git clone https://github.com/panda-re/panda_test;
        cd ./panda_test/tests/taint2;
        python3 taint2_multi_arch_record_or_replay.py --arch ${{ matrix.target }} --mode record;
        python3 taint2_multi_arch_record_or_replay.py --arch ${{ matrix.target }} --mode replay;
        sed -i '/^\s*$/d' taint2_log;
        if cat taint2_log; then echo 'Taint unit test log found!'; else echo 'Taint unit test log NOT found!' && exit 1; fi;
        echo -e '\nFailures:';
        if grep 'fail' taint2_log; then echo 'TEST FAILED!' && exit 1; else echo -e 'None.\nTEST PASSED!' && exit 0; fi"

  make_check:
    if: github.repository  == 'panda-re/panda'
    runs-on: self-hosted
    needs: [build_container]

    strategy:
      matrix:
        # See output from `make check-help`: we're just splitting `make check` into all the things it does
        # so we can run them in parallel: arch-specific qtests, plus a few others
        target: [check-qtest-x86_64, check-qtest-i386, check-qtest-arm, check-qtest-mips, check-qtest-mipsel, check-qtest-ppc,
        check-block, check-unit, check-qapi-schema]

    steps:
    - name: Run Individual QEMU tests
      run: >-
        docker run --name panda_test_${{ matrix.target }}_${GITHUB_RUN_ID}
        -e PANDA_TEST=yes --cap-add SYS_NICE
        --rm -t "panda_local_${{ github.sha }}" bash -c
        "cd /panda/build && make ${{ matrix.target }}"

  cleanup:
    # Cleanup after prior jobs finish - even if they fail
    needs: [taint_tests, make_check]
    runs-on: self-hosted
    if: always()

    steps:
      # Note we leave the last 72hrs because caching is nice (first few panda image layers won't change often)
    - name: Cleanup images
      run: docker system prune -f --filter "until=72h"

  build_and_check_fork: # Forked repos can't use self-hosted test suite - just checkout and run make check
    if: github.repository != 'panda-re/panda'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1 # Clones code into to /home/runner/work/panda

    - name: Build docker container from project root
      run: cd $GITHUB_WORKSPACE && docker build -t panda_local .

    - name: Minimal test of built container # Just test to see if one of our binaries is installed
      run: docker run --rm panda_local /bin/bash -c 'exit $(panda-system-arm -help | grep -q "usage. panda-system-arm")'

    - name: Minimal test of built container # Run make check to check all architectures (in serial)
      run: docker run --rm panda_local /bin/bash -c 'cd /panda/build && make check'
