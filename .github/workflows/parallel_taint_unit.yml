name: Taint Unit Tests

on:
  push:
    branches:
      - ci
  pull_request:
    branches:
      - master

jobs:
  run_taint_unit:
    if: github.repository  == 'panda-re/panda'
    runs-on: self-hosted
    strategy:
      matrix:
        target: [i386, x86_64]

    steps:
    - name: Fetch pre-built bionic docker container
      run: docker pull pandare/panda:latest

    - uses: actions/checkout@v1 # Checks out to ${RUNNER_WORKSPACE}/panda/

    # Note we test in /panda.new - ignoring old build artifacts in /panda
    - name: Clean build in container with new source and run taint unit tests
      run: >-
        docker run --name panda_test_${{ matrix.target }}_${GITHUB_RUN_ID}
        --mount type=bind,source=/home/panda/regdir/qcows/wheezy_panda2.qcow2,target=/home/panda/regdir/qcows/wheezy_panda2.qcow2
        --mount type=bind,source=/home/panda/regdir/qcows/bionic-server-cloudimg-amd64-noaslr-nokaslr.qcow2,target=/home/panda/regdir/qcows/bionic-server-cloudimg-amd64-noaslr-nokaslr.qcow2
        -v ${RUNNER_WORKSPACE}/panda/:/panda.new
        --user $(id -u):$(id -g)
        --rm -t pandare/panda bash -c
        "mkdir /panda.new/build;
        cd /panda.new/build;
        ../build.sh ${{ matrix.target }}-softmmu
        cd /panda.new/panda/python/core
        pip3 install -q pycparser cffi colorama protobuf
        python setup.py install >/dev/null

        git clone https://github.com/panda-re/panda_test;
        cd ./panda_test/tests/taint2;
        python3 taint2_multi_arch_record_or_replay.py --arch ${{ matrix.target }} --mode record;
        python3 taint2_multi_arch_record_or_replay.py --arch ${{ matrix.target }} --mode replay;
        sed -i '/^\s*$/d' taint2_log;
        if cat taint2_log; then echo 'Taint unit test log found!'; else echo 'Taint unit test log NOT found!' && exit 1; fi;
        echo -e '\nFailures:';
        if grep 'fail' taint2_log; then echo 'TEST FAILED!' && exit 1; else echo -e 'None.\nTEST PASSED!' && exit 0; fi"

    - name: Cleanup images # TODO can we run once at the end?
      run: docker system prune -af --volumes || true
