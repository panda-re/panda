# C++ flags only for PANDA sources.
QEMU_CFLAGS += -DNEED_CPU_H
QEMU_CXXFLAGS += -Wno-pointer-arith -DNEED_CPU_H

# determine list of plugins
# remove spaces from lines. skip lines starting with a #. concatenate the rest into a space-delimited list
PANDA_PLUGINS=$(shell tr -d "[:blank:]" < $(SRC_PATH)/panda/plugins/config.panda | grep -v "^\#" | xargs)
ifdef CONFIG_LLVM
	PANDA_PLUGINS+=$(shell tr -d "[:blank:]" < $(SRC_PATH)/panda/plugins/config.llvm.panda | grep -v "^\#" | xargs)
endif

ALL_PLUGIN_SUBDIRS=$(addprefix $(SRC_PATH)/panda/plugins/,$(PANDA_PLUGINS))

# ditto for extra plugins
ifdef EXTRA_PLUGINS_PATH
$(call set-vpath, $(SRC_PATH):$(BUILD_DIR):$(EXTRA_PLUGINS_PATH))
	EXTRA_PANDA_PLUGINS=$(shell tr -d "[:blank:]" < $(EXTRA_PLUGINS_PATH)/panda/plugins/config.panda | grep -v "^\#" | xargs)
	EXTRA_PLUGIN_SUBDIR_RULES=$(patsubst %,extra-plugin-%, $(EXTRA_PANDA_PLUGINS))
	ALL_PLUGIN_SUBDIRS+=$(addprefix $(EXTRA_PLUGINS_PATH)/panda/plugins/,$(EXTRA_PANDA_PLUGINS))
endif

ifdef CONFIG_SOFTMMU
RR_PRINT_PROG=rr_print_$(TARGET_NAME)$(EXESUF)
endif

ifdef CONFIG_SOFTMMU
PLOG_READER_PROG=example_plog_reader
endif

PLUGIN_SUBDIR_RULES=$(patsubst %,plugin-%, $(PANDA_PLUGINS))
PLUGIN_SUBDIR_MAKEFLAGS=$(if $(V),,--no-print-directory) BUILD_DIR=$(BUILD_DIR)

PANDA_API_INT_POSSIBLE=$(foreach plugin,$(PANDA_PLUGINS),panda/plugins/$(plugin)/$(plugin)_int.h)
PANDA_EXTRA_API_INT_POSSIBLE=$(foreach plugin,$(EXTRA_PANDA_PLUGINS),panda/plugins/$(plugin)/$(plugin)_int.h)

PANDA_API_INT=$(foreach header,$(PANDA_API_INT_POSSIBLE),\
			  $(if $(wildcard $(SRC_PATH)/$(header)),$(header),)) $(foreach header,$(PANDA_EXTRA_API_INT_POSSIBLE), $(if $(wildcard $(EXTRA_PLUGINS_PATH)/$(header)),$(header),))

PANDA_API_EXT=$(patsubst %_int.h,%_ext.h,$(PANDA_API_INT))

plugin-%: plog.pb-c.h plog.pb.h $(PANDA_API_EXT)
	$(call quiet-command,mkdir -p ../panda/plugins/$*,)
	$(call quiet-command,mkdir -p panda/plugins/$*,)
	$(call quiet-command,$(MAKE) $(PLUGIN_SUBDIR_MAKEFLAGS) \
		-f "$(SRC_PATH)/panda/plugins/panda.mak" \
		-f "$(SRC_PATH)/panda/plugins/$*/Makefile" \
		PLUGIN_SRC_ROOT="$(SRC_PATH)/panda/plugins" \
		V="$(V)" PLUGIN_NAME="$*" all,)

extra-plugin-%: plog.pb-c.h plog.pb.h $(PANDA_API_EXT)
	$(call quiet-command,mkdir -p ../panda/plugins/$*,)
	$(call quiet-command,mkdir -p panda/plugins/$*,)
	$(call quiet-command,$(MAKE) $(PLUGIN_SUBDIR_MAKEFLAGS) \
		-f "$(SRC_PATH)/panda/plugins/panda.mak" \
		-f "$(EXTRA_PLUGINS_PATH)/panda/plugins/$*/Makefile" \
		PLUGIN_SRC_ROOT="$(EXTRA_PLUGINS_PATH)/panda/plugins" \
		V="$(V)" PLUGIN_NAME="$*" all,)

all: $(PLUGIN_SUBDIR_RULES) $(EXTRA_PLUGIN_SUBDIR_RULES)

PROTO_FILES=$(wildcard $(addsuffix /*.proto,$(ALL_PLUGIN_SUBDIRS)))

PANDA_CONFIG_FILES=$(SRC_PATH)/panda/plugins/config.panda \
				   $(SRC_PATH)/panda/plugins/config.llvm.panda \
				   $(if $(EXTRA_PLUGINS_PATH),$(EXTRA_PLUGINS_PATH)/panda/plugins/config.panda,)

-include $(wildcard $(SRC_PATH)/panda/plugins/*/plugin_plugin.d)

-include $(wildcard $(EXTRA_PLUGINS_PATH)/panda/plugins/*/plugin_plugin.d)

plog.proto: $(PROTO_FILES) $(PANDA_CONFIG_FILES)
	$(call quiet-command,\
		$(SRC_PATH)/panda/scripts/pp.py $@ $(PANDA_CONFIG_FILES),\
		"PROTO   $(TARGET_DIR)$@")

%.pb-c.h %.pb-c.c: %.proto
	# C protobuf
	$(call quiet-command,\
		protoc-c --proto_path=. --c_out=. $<,\
		"PROTO   $(TARGET_DIR)plog.pb-c.h $(TARGET_DIR)plog.pb-c.c",)

%.pb.h %.pb.cc: %.proto
	# C++ Protobuf
	$(call quiet-command,\
		protoc --proto_path=. --cpp_out=. $<,\
		"PROTO" $(TARGET_DIR)"plog.pb.h" $(TARGET_DIR)"plog.pb.cc",)

plog_pb2.py: plog.proto
	$(call quiet-command,\
		protoc --proto_path=. --python_out=. $<,\
		"PROTO   $(TARGET_DIR)$@")

GENERATED_FILES += plog.pb-c.h
GENERATED_FILES += plog.pb.h
GENERATED_FILES += $(PANDA_API_EXT)

# This keeps make from thinking it's an "intermediate" file
.PRECIOUS: $(PANDA_API_EXT)

%_ext.h: %_int.h
	$(call quiet-command,mkdir -p $(dir $@),)
	$(call quiet-command,\
		$(SRC_PATH)/panda/scripts/apigen.py $< $@ -I$(SRC_PATH)/panda/include/fake_libc_include $(QEMU_INCLUDES),\
		"API     $(TARGET_DIR)$(subst $(BUILD_DIR)/,,$@)")

panda/src/callbacks.o: $(SRC_PATH)/panda/include/panda/callbacks/cb-support.h $(SRC_PATH)/panda/include/panda/callbacks/cb-defs.h

# All of these will be generated according to rules in rules.mak
obj-y += panda/src/callbacks.o
obj-y += panda/src/cb-support.o
obj-y += panda/src/common.o
obj-y += panda/src/plog.o
obj-y += plog.pb-c.o
obj-y += panda/src/rr/rr_log.o
obj-y += panda/src/checkpoint.o
obj-y += panda/src/tcg-utils.o
# These are for C++ protobuf pandalog
obj-y += panda/src/plog-cc.o
obj-y += plog.pb.o
#obj-y += panda/src/plog_print.o
#obj-y += panda/src/example_plog_reader.o
#obj-y += panda/src/guestarch.o

$(RR_PRINT_PROG): panda/src/rr/rr_print.o
	$(call LINK,$^)

$(PLOG_READER_PROG): panda/src/example_plog_reader.o \
	plog.pb.o \
	panda/src/plog-cc.o \
	#plog.pb-c.o \
	#panda/src/plog.o \

	$(call LINK,$^)

PROGS+=$(RR_PRINT_PROG)

PROGS+=$(RR_RMVAPIC_PROG)

PROGS+=$(PLOG_READER_PROG)

clean: clean-panda

clean-panda:
	@if [ -d "panda/plugins" ]; then\
		find panda/plugins -depth -mindepth 1 -delete;\
		rm -f panda/panda_*.so;\
	fi

ifdef CONFIG_LLVM
#########################################################
# LLVM library

obj-y += panda/llvm/tcg-llvm.o
obj-y += panda/llvm/helper_runtime.o
panda/llvm/tcg-llvm.o-cflags := $(LLVM_CXXFLAGS) -Wno-cast-qual
panda/llvm/helper_runtime.o-cflags := $(LLVM_CXXFLAGS) -Wno-cast-qual

# regular bitcode
llvm-y =

# morphed bitcode - morph call instructions and function names after bitcode is
# linked together to make helper bitcode available for use by PANDA plugins
llvmmorph-y =

# Helper list is just from panda/target/arch/*help.c and change .c to .bc2
X86_HELPERS = helper.bc2 bpt_helper.bc2 excp_helper.bc2 fpu_helper.bc2
X86_HELPERS += excp_helper.bc2 fpu_helper.bc2 cc_helper.bc2 int_helper.bc2
X86_HELPERS += svm_helper.bc2 smm_helper.bc2 misc_helper.bc2 mem_helper.bc2 seg_helper.bc2
X86_HELPERS += mpx_helper.bc2

llvm-$(TARGET_I386) += fpu/softfloat.bc2
llvm-$(TARGET_I386) += $(addprefix target/i386/,$(X86_HELPERS))
llvmmorph-$(TARGET_I386) += llvm-helpers-i386.bc

llvm-$(TARGET_X86_64) += fpu/softfloat.bc2
llvm-$(TARGET_X86_64) += $(addprefix target/i386/,$(X86_HELPERS))
llvmmorph-$(TARGET_X86_64) += llvm-helpers-x86_64.bc

ARM_HELPERS = op_helper.bc2 helper.bc2 neon_helper.bc2 iwmmxt_helper.bc2
ARM_HELPERS += crypto_helper.bc2

llvm-$(TARGET_ARM) += fpu/softfloat.bc2
llvm-$(TARGET_ARM) += $(addprefix target/arm/,$(ARM_HELPERS))
llvmmorph-$(TARGET_ARM) += llvm-helpers-arm.bc

AARCH64_HELPERS = op_helper.bc2 helper-a64.bc2 neon_helper.bc2 iwmmxt_helper.bc2
AARCH64_HELPERS += crypto_helper.bc2

llvm-$(TARGET_AARCH64) += fpu/softfloat.bc2
llvm-$(TARGET_AARCH64) += $(addprefix target/arm/,$(AARCH64_HELPERS))
llvmmorph-$(TARGET_AARCH64) += llvm-helpers-aarch64.bc

PPC_HELPERS = excp_helper.bc2 fpu_helper.bc2 timebase_helper.bc2 misc_helper.bc2
PPC_HELPERS += mmu_helper.bc2 mem_helper.bc2 int_helper.bc2

llvm-$(TARGET_PPC) += fpu/softfloat.bc2
llvm-$(TARGET_PPC) += $(addprefix target/ppc/,$(PPC_HELPERS))
llvmmorph-$(TARGET_PPC) += llvm-helpers-ppc.bc

MIPS_HELPERS = dsp_helper.bc2 helper.bc2 lmi_helper.bc2 msa_helper.bc2
MIPS_HELPERS += op_helper.bc2
llvm-$(TARGET_MIPS) += fpu/softfloat.bc2
llvm-$(TARGET_MIPS) += $(addprefix target/mips/,$(MIPS_HELPERS))

# If non mips we take the else branch and the .bc file to llvmmorph-n which is ignored
# buf it it is mips, add the right one to llvmmorph-y
ifeq ($(TARGET_NAME),mipsel)
llvmmorph-$(TARGET_MIPS) += llvm-helpers-mipsel.bc
else
llvmmorph-$(TARGET_MIPS) +=  llvm-helpers-mips.bc
endif

CLANG_FILTER = -Wold-style-declaration -fstack-protector-strong -Wno-error=cpp -g -O0 -O1 -O2 -O3 -mcx16 -Wno-shift-negative-value
QEMU_BC2FLAGS:=$(filter-out $(CLANG_FILTER),$(QEMU_CFLAGS) $(CFLAGS)) -O1 -I../target/$(TARGET_BASE_ARCH)
%.bc2: %.c $(GENERATED_FILES)
	$(call quiet-command,\
		$(LLVMCC) $(QEMU_INCLUDES) $(QEMU_BC2FLAGS) $(QEMU_DGFLAGS) -c -emit-llvm -o $@ $<,\
		"CLANG   $(TARGET_DIR)$@")

llvm-helpers.bc1: $(llvm-y)
	$(call quiet-command,$(LLVM_LINK) -o $@ $^,"LLVMLD  $(TARGET_DIR)$@")

# Make explicit the fact that we need the tool present to do the morphing

panda/tools/helper_call_modifier.o-cflags += $(LLVM_CXXFLAGS) -Wno-misleading-indentation

panda/tools:
	$(call quiet-command,mkdir -p panda/tools,)

../panda/tools:
	$(call quiet-command,mkdir -p ../panda/tools,)

panda/tools/helper_call_modifier.o: | panda/tools ../panda/tools
panda/tools/helper_call_modifier: panda/tools/helper_call_modifier.o

llvm-helpers-$(TARGET_NAME).bc: llvm-helpers.bc1 panda/tools/helper_call_modifier
	$(call quiet-command,\
		panda/tools/helper_call_modifier -i $< -o $@,\
		"LLMORPH $(TARGET_DIR)$@")

# add this to the all target
#all: $(llvmmorph-y) panda/tools/dynslice2 panda/tools/slice_analyzer
all: $(llvmmorph-y)

clean: clean-llvm

clean-llvm:
	rm -f $(llvm-y) $(llvmmorph-y)

endif # CONFIG_LLVM
