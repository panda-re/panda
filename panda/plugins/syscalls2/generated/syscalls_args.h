/*!
 * @file syscall_args.h
 *
 * @brief Macros that declare local variables for system call arguments and
 * copy their values into them. The purpose of this is to avoid having to
 * manually write the boilerplate code that copies arguments from syscall_ctx_t
 * structs to a local variable with a meaningful name.
 *
 * @note: For macros generating c++ references we use `reinterpret_cast`
 * instead of c-style casting. The latter will discard any `const` specifier
 * of the used `ctx` pointer. This happens silently, so it may result in
 * unexpected side-effects.
 * Using `reinterpret_cast` solves this, as it will raise an error if
 * the `const` qualifier is casted away. This also means that we need to
 * have two sets of macros generating references: one for when `ctx` is
 * declared `const syscall_ctx_t *` and one for when it is declared
 * `syscall_ctx_t *`.
 */
#pragma once
#include "panda/plugin.h"

/* ### linux:x64 ######################################################## */
// long sys_read ['unsigned int fd', 'char __user *buf', 'size_t count']
#define locals_LINUX__X64_sys_read(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_read(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_read(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_write ['unsigned int fd', 'const char __user *buf', 'size_t count']
#define locals_LINUX__X64_sys_write(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_write(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_write(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_open ['const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__X64_sys_open(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_open(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_open(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_close ['unsigned int fd']
#define locals_LINUX__X64_sys_close(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_close(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_close(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_newstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__X64_sys_newstat(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##statbuf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_newstat(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_newstat(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_newfstat ['unsigned int fd', 'struct stat __user *statbuf']
#define locals_LINUX__X64_sys_newfstat(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##statbuf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_newfstat(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_newfstat(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_newlstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__X64_sys_newlstat(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##statbuf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_newlstat(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_newlstat(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_poll ['struct pollfd __user *ufds', 'unsigned int nfds', 'int timeout']
#define locals_LINUX__X64_sys_poll(ctx, pref) \
	uint64_t UNUSED(pref##ufds) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nfds) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_poll(ctx, pref) \
	uint64_t &UNUSED(pref##ufds) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_poll(ctx, pref) \
	const uint64_t &UNUSED(pref##ufds) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_lseek ['unsigned int fd', 'off_t offset', 'unsigned int whence']
#define locals_LINUX__X64_sys_lseek(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##whence) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lseek(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##whence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_lseek(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##whence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_mmap ['unsigned long', 'unsigned long', 'unsigned long', 'unsigned long', 'unsigned long', 'unsigned long']
#define locals_LINUX__X64_sys_mmap(ctx, pref) \
	uint64_t UNUSED(pref##arg0) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[4]); \
	uint64_t UNUSED(pref##arg5) = *(uint64_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mmap(ctx, pref) \
	uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<uint64_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_mmap(ctx, pref) \
	const uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint64_t *>((ctx)->args[5]);
#endif

// long sys_mprotect ['unsigned long start', 'size_t len', 'unsigned long prot']
#define locals_LINUX__X64_sys_mprotect(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##prot) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mprotect(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##prot) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mprotect(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##prot) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_munmap ['unsigned long addr', 'size_t len']
#define locals_LINUX__X64_sys_munmap(ctx, pref) \
	uint64_t UNUSED(pref##addr) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_munmap(ctx, pref) \
	uint64_t &UNUSED(pref##addr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_munmap(ctx, pref) \
	const uint64_t &UNUSED(pref##addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_brk ['unsigned long brk']
#define locals_LINUX__X64_sys_brk(ctx, pref) \
	uint64_t UNUSED(pref##brk) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_brk(ctx, pref) \
	uint64_t &UNUSED(pref##brk) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_brk(ctx, pref) \
	const uint64_t &UNUSED(pref##brk) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_rt_sigaction ['int', 'const struct sigaction __user *', 'struct sigaction __user *', 'size_t']
#define locals_LINUX__X64_sys_rt_sigaction(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigaction(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_rt_sigaction(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigprocmask ['int how', 'sigset_t __user *set', 'sigset_t __user *oset', 'size_t sigsetsize']
#define locals_LINUX__X64_sys_rt_sigprocmask(ctx, pref) \
	int32_t UNUSED(pref##how) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##set) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##oset) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigprocmask(ctx, pref) \
	int32_t &UNUSED(pref##how) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##set) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##oset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_rt_sigprocmask(ctx, pref) \
	const int32_t &UNUSED(pref##how) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##set) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##oset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_ioctl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__X64_sys_ioctl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ioctl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_ioctl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_pread64 ['unsigned int fd', 'char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__X64_sys_pread64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pread64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_pread64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_pwrite64 ['unsigned int fd', 'const char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__X64_sys_pwrite64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pwrite64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_pwrite64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_readv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__X64_sys_readv(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_readv(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_readv(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_writev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__X64_sys_writev(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_writev(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_writev(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_access ['const char __user *filename', 'int mode']
#define locals_LINUX__X64_sys_access(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_access(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_access(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_pipe ['int __user *fildes']
#define locals_LINUX__X64_sys_pipe(ctx, pref) \
	uint64_t UNUSED(pref##fildes) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pipe(ctx, pref) \
	uint64_t &UNUSED(pref##fildes) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_pipe(ctx, pref) \
	const uint64_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_select ['int n', 'fd_set __user *inp', 'fd_set __user *outp', 'fd_set __user *exp', 'struct timeval __user *tvp']
#define locals_LINUX__X64_sys_select(ctx, pref) \
	int32_t UNUSED(pref##n) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##inp) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##outp) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##exp) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##tvp) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_select(ctx, pref) \
	int32_t &UNUSED(pref##n) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##inp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##outp) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##exp) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##tvp) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_select(ctx, pref) \
	const int32_t &UNUSED(pref##n) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##inp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##outp) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##exp) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##tvp) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_sched_yield ['void']
#undef locals_LINUX__X64_sys_sched_yield
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_sched_yield
#endif

// long sys_mremap ['unsigned long addr', 'unsigned long old_len', 'unsigned long new_len', 'unsigned long flags', 'unsigned long new_addr']
#define locals_LINUX__X64_sys_mremap(ctx, pref) \
	uint64_t UNUSED(pref##addr) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##old_len) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##new_len) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##new_addr) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mremap(ctx, pref) \
	uint64_t &UNUSED(pref##addr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##old_len) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##new_len) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##new_addr) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_mremap(ctx, pref) \
	const uint64_t &UNUSED(pref##addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##old_len) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##new_len) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##new_addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_msync ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__X64_sys_msync(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_msync(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_msync(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_mincore ['unsigned long start', 'size_t len', 'unsigned char __user *vec']
#define locals_LINUX__X64_sys_mincore(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mincore(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mincore(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_madvise ['unsigned long start', 'size_t len', 'int behavior']
#define locals_LINUX__X64_sys_madvise(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##behavior) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_madvise(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##behavior) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_madvise(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##behavior) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_shmget ['key_t key', 'size_t size', 'int flag']
#define locals_LINUX__X64_sys_shmget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_shmget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_shmget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_shmat ['int shmid', 'char __user *shmaddr', 'int shmflg']
#define locals_LINUX__X64_sys_shmat(ctx, pref) \
	int32_t UNUSED(pref##shmid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##shmaddr) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##shmflg) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_shmat(ctx, pref) \
	int32_t &UNUSED(pref##shmid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##shmaddr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##shmflg) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_shmat(ctx, pref) \
	const int32_t &UNUSED(pref##shmid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##shmaddr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##shmflg) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_shmctl ['int shmid', 'int cmd', 'struct shmid_ds __user *buf']
#define locals_LINUX__X64_sys_shmctl(ctx, pref) \
	int32_t UNUSED(pref##shmid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_shmctl(ctx, pref) \
	int32_t &UNUSED(pref##shmid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_shmctl(ctx, pref) \
	const int32_t &UNUSED(pref##shmid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_dup ['unsigned int fildes']
#define locals_LINUX__X64_sys_dup(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_dup(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_dup(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_dup2 ['unsigned int oldfd', 'unsigned int newfd']
#define locals_LINUX__X64_sys_dup2(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_dup2(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_dup2(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_pause ['void']
#undef locals_LINUX__X64_sys_pause
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_pause
#endif

// long sys_nanosleep ['struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__X64_sys_nanosleep(ctx, pref) \
	uint64_t UNUSED(pref##rqtp) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##rmtp) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_nanosleep(ctx, pref) \
	uint64_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_nanosleep(ctx, pref) \
	const uint64_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_getitimer ['int which', 'struct itimerval __user *value']
#define locals_LINUX__X64_sys_getitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_alarm ['unsigned int seconds']
#define locals_LINUX__X64_sys_alarm(ctx, pref) \
	uint32_t UNUSED(pref##seconds) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_alarm(ctx, pref) \
	uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_alarm(ctx, pref) \
	const uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setitimer ['int which', 'struct itimerval __user *value', 'struct itimerval __user *ovalue']
#define locals_LINUX__X64_sys_setitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##ovalue) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##ovalue) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_setitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##ovalue) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_getpid ['void']
#undef locals_LINUX__X64_sys_getpid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getpid
#endif

// long sys_sendfile64 ['int out_fd', 'int in_fd', 'loff_t __user *offset', 'size_t count']
#define locals_LINUX__X64_sys_sendfile64(ctx, pref) \
	int32_t UNUSED(pref##out_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##in_fd) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sendfile64(ctx, pref) \
	int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_sendfile64(ctx, pref) \
	const int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_socket ['int', 'int', 'int']
#define locals_LINUX__X64_sys_socket(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_socket(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_socket(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_connect ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X64_sys_connect(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_connect(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_connect(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_accept ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X64_sys_accept(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_accept(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_accept(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_sendto ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X64_sys_sendto(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##arg5) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sendto(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##arg5) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_sendto(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##arg5) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_recvfrom ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X64_sys_recvfrom(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[4]); \
	uint64_t UNUSED(pref##arg5) = *(uint64_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_recvfrom(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<uint64_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_recvfrom(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint64_t *>((ctx)->args[5]);
#endif

// long sys_sendmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__X64_sys_sendmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sendmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sendmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_recvmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__X64_sys_recvmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_recvmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_recvmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_shutdown ['int', 'int']
#define locals_LINUX__X64_sys_shutdown(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_shutdown(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_shutdown(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_bind ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X64_sys_bind(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_bind(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_bind(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_listen ['int', 'int']
#define locals_LINUX__X64_sys_listen(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_listen(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_listen(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_getsockname ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X64_sys_getsockname(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getsockname(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getsockname(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_getpeername ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X64_sys_getpeername(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getpeername(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getpeername(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_socketpair ['int', 'int', 'int', 'int __user *']
#define locals_LINUX__X64_sys_socketpair(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_socketpair(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_socketpair(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_setsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int optlen']
#define locals_LINUX__X64_sys_setsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##optval) = *(uint64_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##optlen) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##optval) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##optlen) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_setsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##optval) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##optlen) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int __user *optlen']
#define locals_LINUX__X64_sys_getsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##optval) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##optlen) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##optval) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##optlen) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_getsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##optval) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##optlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_exit ['int error_code']
#define locals_LINUX__X64_sys_exit(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_exit(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_exit(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_wait4 ['pid_t pid', 'int __user *stat_addr', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__X64_sys_wait4(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##stat_addr) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##ru) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_wait4(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##stat_addr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##ru) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_wait4(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##stat_addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##ru) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_kill ['pid_t pid', 'int sig']
#define locals_LINUX__X64_sys_kill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_kill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_kill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_newuname ['struct new_utsname __user *name']
#define locals_LINUX__X64_sys_newuname(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_newuname(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_newuname(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_semget ['key_t key', 'int nsems', 'int semflg']
#define locals_LINUX__X64_sys_semget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##nsems) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##semflg) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_semget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##nsems) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##semflg) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_semget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##nsems) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##semflg) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_semop ['int semid', 'struct sembuf __user *sops', 'unsigned nsops']
#define locals_LINUX__X64_sys_semop(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##sops) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nsops) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_semop(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##sops) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_semop(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##sops) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_semctl ['int semid', 'int semnum', 'int cmd', 'unsigned long arg']
#define locals_LINUX__X64_sys_semctl(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##semnum) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_semctl(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##semnum) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_semctl(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##semnum) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_shmdt ['char __user *shmaddr']
#define locals_LINUX__X64_sys_shmdt(ctx, pref) \
	uint64_t UNUSED(pref##shmaddr) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_shmdt(ctx, pref) \
	uint64_t &UNUSED(pref##shmaddr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_shmdt(ctx, pref) \
	const uint64_t &UNUSED(pref##shmaddr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_msgget ['key_t key', 'int msgflg']
#define locals_LINUX__X64_sys_msgget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_msgget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_msgget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_msgsnd ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'int msgflg']
#define locals_LINUX__X64_sys_msgsnd(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msgp) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msgsz) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_msgsnd(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msgp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_msgsnd(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msgp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_msgrcv ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'long msgtyp', 'int msgflg']
#define locals_LINUX__X64_sys_msgrcv(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msgp) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msgsz) = *(uint32_t *)((ctx)->args[2]); \
	int64_t UNUSED(pref##msgtyp) = *(int64_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_msgrcv(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msgp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int64_t &UNUSED(pref##msgtyp) = *reinterpret_cast<int64_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_msgrcv(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msgp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int64_t &UNUSED(pref##msgtyp) = *reinterpret_cast<const int64_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_msgctl ['int msqid', 'int cmd', 'struct msqid_ds __user *buf']
#define locals_LINUX__X64_sys_msgctl(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_msgctl(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_msgctl(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_fcntl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__X64_sys_fcntl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fcntl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_fcntl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_flock ['unsigned int fd', 'unsigned int cmd']
#define locals_LINUX__X64_sys_flock(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_flock(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_flock(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fsync ['unsigned int fd']
#define locals_LINUX__X64_sys_fsync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fsync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_fsync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_fdatasync ['unsigned int fd']
#define locals_LINUX__X64_sys_fdatasync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fdatasync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_fdatasync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_truncate ['const char __user *path', 'long length']
#define locals_LINUX__X64_sys_truncate(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	int64_t UNUSED(pref##length) = *(int64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_truncate(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int64_t &UNUSED(pref##length) = *reinterpret_cast<int64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_truncate(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int64_t &UNUSED(pref##length) = *reinterpret_cast<const int64_t *>((ctx)->args[1]);
#endif

// long sys_ftruncate ['unsigned int fd', 'unsigned long length']
#define locals_LINUX__X64_sys_ftruncate(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##length) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ftruncate(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##length) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_ftruncate(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##length) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_getdents ['unsigned int fd', 'struct linux_dirent __user *dirent', 'unsigned int count']
#define locals_LINUX__X64_sys_getdents(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##dirent) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getdents(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##dirent) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getdents(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getcwd ['char __user *buf', 'unsigned long size']
#define locals_LINUX__X64_sys_getcwd(ctx, pref) \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##size) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getcwd(ctx, pref) \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##size) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getcwd(ctx, pref) \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##size) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_chdir ['const char __user *filename']
#define locals_LINUX__X64_sys_chdir(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_chdir(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_chdir(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_fchdir ['unsigned int fd']
#define locals_LINUX__X64_sys_fchdir(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fchdir(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_fchdir(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_rename ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__X64_sys_rename(ctx, pref) \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rename(ctx, pref) \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_rename(ctx, pref) \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mkdir ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X64_sys_mkdir(ctx, pref) \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mkdir(ctx, pref) \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_mkdir(ctx, pref) \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rmdir ['const char __user *pathname']
#define locals_LINUX__X64_sys_rmdir(ctx, pref) \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rmdir(ctx, pref) \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_rmdir(ctx, pref) \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_creat ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X64_sys_creat(ctx, pref) \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_creat(ctx, pref) \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_creat(ctx, pref) \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_link ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__X64_sys_link(ctx, pref) \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_link(ctx, pref) \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_link(ctx, pref) \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_unlink ['const char __user *pathname']
#define locals_LINUX__X64_sys_unlink(ctx, pref) \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_unlink(ctx, pref) \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_unlink(ctx, pref) \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_symlink ['const char __user *old', 'const char __user *new']
#define locals_LINUX__X64_sys_symlink(ctx, pref) \
	uint64_t UNUSED(pref##old) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##_new) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_symlink(ctx, pref) \
	uint64_t &UNUSED(pref##old) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##_new) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_symlink(ctx, pref) \
	const uint64_t &UNUSED(pref##old) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##_new) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_readlink ['const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__X64_sys_readlink(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_readlink(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_readlink(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_chmod ['const char __user *filename', 'umode_t mode']
#define locals_LINUX__X64_sys_chmod(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_chmod(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_chmod(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchmod ['unsigned int fd', 'umode_t mode']
#define locals_LINUX__X64_sys_fchmod(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fchmod(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_fchmod(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_chown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__X64_sys_chown(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_chown(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_chown(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fchown ['unsigned int fd', 'uid_t user', 'gid_t group']
#define locals_LINUX__X64_sys_fchown(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fchown(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_fchown(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_lchown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__X64_sys_lchown(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lchown(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_lchown(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_umask ['int mask']
#define locals_LINUX__X64_sys_umask(ctx, pref) \
	int32_t UNUSED(pref##mask) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_umask(ctx, pref) \
	int32_t &UNUSED(pref##mask) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_umask(ctx, pref) \
	const int32_t &UNUSED(pref##mask) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_gettimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__X64_sys_gettimeofday(ctx, pref) \
	uint64_t UNUSED(pref##tv) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tz) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_gettimeofday(ctx, pref) \
	uint64_t &UNUSED(pref##tv) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tz) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_gettimeofday(ctx, pref) \
	const uint64_t &UNUSED(pref##tv) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tz) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_getrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__X64_sys_getrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##rlim) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##rlim) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_getrusage ['int who', 'struct rusage __user *ru']
#define locals_LINUX__X64_sys_getrusage(ctx, pref) \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##ru) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getrusage(ctx, pref) \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##ru) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getrusage(ctx, pref) \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##ru) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_sysinfo ['struct sysinfo __user *info']
#define locals_LINUX__X64_sys_sysinfo(ctx, pref) \
	uint64_t UNUSED(pref##info) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sysinfo(ctx, pref) \
	uint64_t &UNUSED(pref##info) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_sysinfo(ctx, pref) \
	const uint64_t &UNUSED(pref##info) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_times ['struct tms __user *tbuf']
#define locals_LINUX__X64_sys_times(ctx, pref) \
	uint64_t UNUSED(pref##tbuf) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_times(ctx, pref) \
	uint64_t &UNUSED(pref##tbuf) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_times(ctx, pref) \
	const uint64_t &UNUSED(pref##tbuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_ptrace ['long request', 'long pid', 'unsigned long addr', 'unsigned long data']
#define locals_LINUX__X64_sys_ptrace(ctx, pref) \
	int64_t UNUSED(pref##request) = *(int64_t *)((ctx)->args[0]); \
	int64_t UNUSED(pref##pid) = *(int64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##addr) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##_data) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ptrace(ctx, pref) \
	int64_t &UNUSED(pref##request) = *reinterpret_cast<int64_t *>((ctx)->args[0]); \
	int64_t &UNUSED(pref##pid) = *reinterpret_cast<int64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##addr) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##_data) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_ptrace(ctx, pref) \
	const int64_t &UNUSED(pref##request) = *reinterpret_cast<const int64_t *>((ctx)->args[0]); \
	const int64_t &UNUSED(pref##pid) = *reinterpret_cast<const int64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##_data) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_getuid ['void']
#undef locals_LINUX__X64_sys_getuid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getuid
#endif

// long sys_syslog ['int type', 'char __user *buf', 'int len']
#define locals_LINUX__X64_sys_syslog(ctx, pref) \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_syslog(ctx, pref) \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_syslog(ctx, pref) \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_getgid ['void']
#undef locals_LINUX__X64_sys_getgid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getgid
#endif

// long sys_setuid ['uid_t uid']
#define locals_LINUX__X64_sys_setuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_setuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setgid ['gid_t gid']
#define locals_LINUX__X64_sys_setgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_setgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_geteuid ['void']
#undef locals_LINUX__X64_sys_geteuid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_geteuid
#endif

// long sys_getegid ['void']
#undef locals_LINUX__X64_sys_getegid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getegid
#endif

// long sys_setpgid ['pid_t pid', 'pid_t pgid']
#define locals_LINUX__X64_sys_setpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pgid) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pgid) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pgid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_getppid ['void']
#undef locals_LINUX__X64_sys_getppid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getppid
#endif

// long sys_getpgrp ['void']
#undef locals_LINUX__X64_sys_getpgrp
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_getpgrp
#endif

// long sys_setsid ['void']
#undef locals_LINUX__X64_sys_setsid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_setsid
#endif

// long sys_setreuid ['uid_t ruid', 'uid_t euid']
#define locals_LINUX__X64_sys_setreuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setreuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setreuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setregid ['gid_t rgid', 'gid_t egid']
#define locals_LINUX__X64_sys_setregid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setregid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setregid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__X64_sys_getgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##grouplist) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_setgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__X64_sys_setgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##grouplist) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_setresuid ['uid_t ruid', 'uid_t euid', 'uid_t suid']
#define locals_LINUX__X64_sys_setresuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setresuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_setresuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresuid ['uid_t __user *ruid', 'uid_t __user *euid', 'uid_t __user *suid']
#define locals_LINUX__X64_sys_getresuid(ctx, pref) \
	uint64_t UNUSED(pref##ruid) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##euid) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##suid) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getresuid(ctx, pref) \
	uint64_t &UNUSED(pref##ruid) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##euid) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##suid) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getresuid(ctx, pref) \
	const uint64_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##euid) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##suid) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_setresgid ['gid_t rgid', 'gid_t egid', 'gid_t sgid']
#define locals_LINUX__X64_sys_setresgid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setresgid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_setresgid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresgid ['gid_t __user *rgid', 'gid_t __user *egid', 'gid_t __user *sgid']
#define locals_LINUX__X64_sys_getresgid(ctx, pref) \
	uint64_t UNUSED(pref##rgid) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##egid) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##sgid) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getresgid(ctx, pref) \
	uint64_t &UNUSED(pref##rgid) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##egid) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##sgid) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getresgid(ctx, pref) \
	const uint64_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##egid) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_getpgid ['pid_t pid']
#define locals_LINUX__X64_sys_getpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_getpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_setfsuid ['uid_t uid']
#define locals_LINUX__X64_sys_setfsuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setfsuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_setfsuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsgid ['gid_t gid']
#define locals_LINUX__X64_sys_setfsgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setfsgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_setfsgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getsid ['pid_t pid']
#define locals_LINUX__X64_sys_getsid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getsid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_getsid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_capget ['cap_user_header_t header', 'cap_user_data_t dataptr']
#define locals_LINUX__X64_sys_capget(ctx, pref) \
	uint64_t UNUSED(pref##header) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##dataptr) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_capget(ctx, pref) \
	uint64_t &UNUSED(pref##header) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##dataptr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_capget(ctx, pref) \
	const uint64_t &UNUSED(pref##header) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##dataptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_capset ['cap_user_header_t header', 'const cap_user_data_t data']
#define locals_LINUX__X64_sys_capset(ctx, pref) \
	uint64_t UNUSED(pref##header) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##_data) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_capset(ctx, pref) \
	uint64_t &UNUSED(pref##header) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##_data) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_capset(ctx, pref) \
	const uint64_t &UNUSED(pref##header) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##_data) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_rt_sigpending ['sigset_t __user *set', 'size_t sigsetsize']
#define locals_LINUX__X64_sys_rt_sigpending(ctx, pref) \
	uint64_t UNUSED(pref##set) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigpending(ctx, pref) \
	uint64_t &UNUSED(pref##set) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_rt_sigpending(ctx, pref) \
	const uint64_t &UNUSED(pref##set) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rt_sigtimedwait ['const sigset_t __user *uthese', 'siginfo_t __user *uinfo', 'const struct timespec __user *uts', 'size_t sigsetsize']
#define locals_LINUX__X64_sys_rt_sigtimedwait(ctx, pref) \
	uint64_t UNUSED(pref##uthese) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##uinfo) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##uts) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigtimedwait(ctx, pref) \
	uint64_t &UNUSED(pref##uthese) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##uts) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_rt_sigtimedwait(ctx, pref) \
	const uint64_t &UNUSED(pref##uthese) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##uts) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigqueueinfo ['pid_t pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__X64_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##uinfo) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_rt_sigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_rt_sigsuspend ['sigset_t __user *unewset', 'size_t sigsetsize']
#define locals_LINUX__X64_sys_rt_sigsuspend(ctx, pref) \
	uint64_t UNUSED(pref##unewset) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_sigsuspend(ctx, pref) \
	uint64_t &UNUSED(pref##unewset) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_rt_sigsuspend(ctx, pref) \
	const uint64_t &UNUSED(pref##unewset) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sigaltstack ['const struct sigaltstack __user *uss', 'struct sigaltstack __user *uoss']
#define locals_LINUX__X64_sys_sigaltstack(ctx, pref) \
	uint64_t UNUSED(pref##uss) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##uoss) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sigaltstack(ctx, pref) \
	uint64_t &UNUSED(pref##uss) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##uoss) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_sigaltstack(ctx, pref) \
	const uint64_t &UNUSED(pref##uss) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##uoss) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_utime ['char __user *filename', 'struct utimbuf __user *times']
#define locals_LINUX__X64_sys_utime(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##times) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_utime(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##times) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_utime(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##times) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mknod ['const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__X64_sys_mknod(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mknod(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mknod(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_personality ['unsigned int personality']
#define locals_LINUX__X64_sys_personality(ctx, pref) \
	uint32_t UNUSED(pref##personality) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_personality(ctx, pref) \
	uint32_t &UNUSED(pref##personality) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_personality(ctx, pref) \
	const uint32_t &UNUSED(pref##personality) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ustat ['unsigned dev', 'struct ustat __user *ubuf']
#define locals_LINUX__X64_sys_ustat(ctx, pref) \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##ubuf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ustat(ctx, pref) \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##ubuf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_ustat(ctx, pref) \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##ubuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_statfs ['const char __user *path', 'struct statfs __user *buf']
#define locals_LINUX__X64_sys_statfs(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_statfs(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_statfs(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_fstatfs ['unsigned int fd', 'struct statfs __user *buf']
#define locals_LINUX__X64_sys_fstatfs(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fstatfs(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_fstatfs(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_sysfs ['int option', 'unsigned long arg1', 'unsigned long arg2']
#define locals_LINUX__X64_sys_sysfs(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sysfs(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sysfs(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_getpriority ['int which', 'int who']
#define locals_LINUX__X64_sys_getpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_getpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setpriority ['int which', 'int who', 'int niceval']
#define locals_LINUX__X64_sys_setpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##niceval) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##niceval) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_setpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##niceval) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_sched_setparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__X64_sys_sched_setparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##param) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_setparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##param) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_sched_setparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##param) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_sched_getparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__X64_sys_sched_getparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##param) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_getparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##param) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_sched_getparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##param) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_sched_setscheduler ['pid_t pid', 'int policy', 'struct sched_param __user *param']
#define locals_LINUX__X64_sys_sched_setscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##param) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_setscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##param) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sched_setscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##param) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_sched_getscheduler ['pid_t pid']
#define locals_LINUX__X64_sys_sched_getscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_getscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_sched_getscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_get_priority_max ['int policy']
#define locals_LINUX__X64_sys_sched_get_priority_max(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_get_priority_max(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_sched_get_priority_max(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_get_priority_min ['int policy']
#define locals_LINUX__X64_sys_sched_get_priority_min(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_get_priority_min(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_sched_get_priority_min(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_rr_get_interval ['pid_t pid', 'struct timespec __user *interval']
#define locals_LINUX__X64_sys_sched_rr_get_interval(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##interval) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_rr_get_interval(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##interval) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_sched_rr_get_interval(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##interval) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mlock ['unsigned long start', 'size_t len']
#define locals_LINUX__X64_sys_mlock(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mlock(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_mlock(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_munlock ['unsigned long start', 'size_t len']
#define locals_LINUX__X64_sys_munlock(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_munlock(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_munlock(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mlockall ['int flags']
#define locals_LINUX__X64_sys_mlockall(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mlockall(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_mlockall(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_munlockall ['void']
#undef locals_LINUX__X64_sys_munlockall
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_munlockall
#endif

// long sys_vhangup ['void']
#undef locals_LINUX__X64_sys_vhangup
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_vhangup
#endif

// long sys_modify_ldt ['int', 'void __user *', 'unsigned long']
#define locals_LINUX__X64_sys_modify_ldt(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_modify_ldt(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_modify_ldt(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_pivot_root ['const char __user *new_root', 'const char __user *put_old']
#define locals_LINUX__X64_sys_pivot_root(ctx, pref) \
	uint64_t UNUSED(pref##new_root) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##put_old) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pivot_root(ctx, pref) \
	uint64_t &UNUSED(pref##new_root) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##put_old) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_pivot_root(ctx, pref) \
	const uint64_t &UNUSED(pref##new_root) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##put_old) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_sysctl ['struct __sysctl_args __user *args']
#define locals_LINUX__X64_sys_sysctl(ctx, pref) \
	uint64_t UNUSED(pref##args) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sysctl(ctx, pref) \
	uint64_t &UNUSED(pref##args) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_sysctl(ctx, pref) \
	const uint64_t &UNUSED(pref##args) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_prctl ['int option', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__X64_sys_prctl(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg5) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_prctl(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_prctl(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_arch_prctl ['int', 'unsigned long']
#define locals_LINUX__X64_sys_arch_prctl(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_arch_prctl(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_arch_prctl(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_adjtimex ['struct timex __user *txc_p']
#define locals_LINUX__X64_sys_adjtimex(ctx, pref) \
	uint64_t UNUSED(pref##txc_p) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_adjtimex(ctx, pref) \
	uint64_t &UNUSED(pref##txc_p) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_adjtimex(ctx, pref) \
	const uint64_t &UNUSED(pref##txc_p) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_setrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__X64_sys_setrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##rlim) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##rlim) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_chroot ['const char __user *filename']
#define locals_LINUX__X64_sys_chroot(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_chroot(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_chroot(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_sync ['void']
#undef locals_LINUX__X64_sys_sync
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_sync
#endif

// long sys_acct ['const char __user *name']
#define locals_LINUX__X64_sys_acct(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_acct(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_acct(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_settimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__X64_sys_settimeofday(ctx, pref) \
	uint64_t UNUSED(pref##tv) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tz) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_settimeofday(ctx, pref) \
	uint64_t &UNUSED(pref##tv) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tz) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_settimeofday(ctx, pref) \
	const uint64_t &UNUSED(pref##tv) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tz) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mount ['char __user *dev_name', 'char __user *dir_name', 'char __user *type', 'unsigned long flags', 'void __user *data']
#define locals_LINUX__X64_sys_mount(ctx, pref) \
	uint64_t UNUSED(pref##dev_name) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##dir_name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##type) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##_data) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mount(ctx, pref) \
	uint64_t &UNUSED(pref##dev_name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##dir_name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##type) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##_data) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_mount(ctx, pref) \
	const uint64_t &UNUSED(pref##dev_name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##dir_name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##type) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##_data) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_umount ['char __user *name', 'int flags']
#define locals_LINUX__X64_sys_umount(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_umount(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_umount(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_swapon ['const char __user *specialfile', 'int swap_flags']
#define locals_LINUX__X64_sys_swapon(ctx, pref) \
	uint64_t UNUSED(pref##specialfile) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##swap_flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_swapon(ctx, pref) \
	uint64_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_swapon(ctx, pref) \
	const uint64_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_swapoff ['const char __user *specialfile']
#define locals_LINUX__X64_sys_swapoff(ctx, pref) \
	uint64_t UNUSED(pref##specialfile) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_swapoff(ctx, pref) \
	uint64_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_swapoff(ctx, pref) \
	const uint64_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_reboot ['int magic1', 'int magic2', 'unsigned int cmd', 'void __user *arg']
#define locals_LINUX__X64_sys_reboot(ctx, pref) \
	int32_t UNUSED(pref##magic1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##magic2) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_reboot(ctx, pref) \
	int32_t &UNUSED(pref##magic1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##magic2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_reboot(ctx, pref) \
	const int32_t &UNUSED(pref##magic1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##magic2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_sethostname ['char __user *name', 'int len']
#define locals_LINUX__X64_sys_sethostname(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sethostname(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_sethostname(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setdomainname ['char __user *name', 'int len']
#define locals_LINUX__X64_sys_setdomainname(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setdomainname(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setdomainname(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_ioperm ['unsigned long', 'unsigned long', 'int']
#define locals_LINUX__X64_sys_ioperm(ctx, pref) \
	uint64_t UNUSED(pref##arg0) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ioperm(ctx, pref) \
	uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_ioperm(ctx, pref) \
	const uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_init_module ['void __user *umod', 'unsigned long len', 'const char __user *uargs']
#define locals_LINUX__X64_sys_init_module(ctx, pref) \
	uint64_t UNUSED(pref##umod) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##uargs) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_init_module(ctx, pref) \
	uint64_t &UNUSED(pref##umod) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_init_module(ctx, pref) \
	const uint64_t &UNUSED(pref##umod) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_delete_module ['const char __user *name_user', 'unsigned int flags']
#define locals_LINUX__X64_sys_delete_module(ctx, pref) \
	uint64_t UNUSED(pref##name_user) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_delete_module(ctx, pref) \
	uint64_t &UNUSED(pref##name_user) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_delete_module(ctx, pref) \
	const uint64_t &UNUSED(pref##name_user) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_quotactl ['unsigned int cmd', 'const char __user *special', 'qid_t id', 'void __user *addr']
#define locals_LINUX__X64_sys_quotactl(ctx, pref) \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##special) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##id) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##addr) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_quotactl(ctx, pref) \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##special) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##id) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##addr) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_quotactl(ctx, pref) \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##special) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##id) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_gettid ['void']
#undef locals_LINUX__X64_sys_gettid
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_gettid
#endif

// long sys_readahead ['int fd', 'loff_t offset', 'size_t count']
#define locals_LINUX__X64_sys_readahead(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_readahead(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_readahead(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X64_sys_setxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_setxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_lsetxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X64_sys_lsetxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lsetxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_lsetxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_fsetxattr ['int fd', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X64_sys_fsetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fsetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_fsetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X64_sys_getxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_getxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_lgetxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X64_sys_lgetxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lgetxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_lgetxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fgetxattr ['int fd', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X64_sys_fgetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##value) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fgetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##value) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_fgetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##value) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_listxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__X64_sys_listxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##list) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_listxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##list) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_listxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##list) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_llistxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__X64_sys_llistxattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##list) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_llistxattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##list) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_llistxattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##list) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_flistxattr ['int fd', 'char __user *list', 'size_t size']
#define locals_LINUX__X64_sys_flistxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##list) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_flistxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##list) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_flistxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##list) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_removexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__X64_sys_removexattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_removexattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_removexattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_lremovexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__X64_sys_lremovexattr(ctx, pref) \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lremovexattr(ctx, pref) \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_lremovexattr(ctx, pref) \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_fremovexattr ['int fd', 'const char __user *name']
#define locals_LINUX__X64_sys_fremovexattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fremovexattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_fremovexattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_tkill ['pid_t pid', 'int sig']
#define locals_LINUX__X64_sys_tkill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_tkill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_tkill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_time ['time_t __user *tloc']
#define locals_LINUX__X64_sys_time(ctx, pref) \
	uint64_t UNUSED(pref##tloc) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_time(ctx, pref) \
	uint64_t &UNUSED(pref##tloc) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_time(ctx, pref) \
	const uint64_t &UNUSED(pref##tloc) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_futex ['u32 __user *uaddr', 'int op', 'u32 val', 'struct timespec __user *utime', 'u32 __user *uaddr2', 'u32 val3']
#define locals_LINUX__X64_sys_futex(ctx, pref) \
	uint64_t UNUSED(pref##uaddr) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##val) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##utime) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##uaddr2) = *(uint64_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##val3) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_futex(ctx, pref) \
	uint64_t &UNUSED(pref##uaddr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##val) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##utime) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##uaddr2) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##val3) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_futex(ctx, pref) \
	const uint64_t &UNUSED(pref##uaddr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##val) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##utime) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##uaddr2) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##val3) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_sched_setaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__X64_sys_sched_setaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##user_mask_ptr) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_setaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sched_setaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_sched_getaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__X64_sys_sched_getaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##user_mask_ptr) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_getaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sched_getaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_io_setup ['unsigned nr_reqs', 'aio_context_t __user *ctx']
#define locals_LINUX__X64_sys_io_setup(ctx, pref) \
	uint32_t UNUSED(pref##nr_reqs) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##ctx) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_io_setup(ctx, pref) \
	uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##ctx) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_io_setup(ctx, pref) \
	const uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_io_destroy ['aio_context_t ctx']
#define locals_LINUX__X64_sys_io_destroy(ctx, pref) \
	uint64_t UNUSED(pref##ctx) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_io_destroy(ctx, pref) \
	uint64_t &UNUSED(pref##ctx) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_io_destroy(ctx, pref) \
	const uint64_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_io_getevents ['aio_context_t ctx_id', 'long min_nr', 'long nr', 'struct io_event __user *events', 'struct timespec __user *timeout']
#define locals_LINUX__X64_sys_io_getevents(ctx, pref) \
	uint64_t UNUSED(pref##ctx_id) = *(uint64_t *)((ctx)->args[0]); \
	int64_t UNUSED(pref##min_nr) = *(int64_t *)((ctx)->args[1]); \
	int64_t UNUSED(pref##nr) = *(int64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##events) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##timeout) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_io_getevents(ctx, pref) \
	uint64_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int64_t &UNUSED(pref##min_nr) = *reinterpret_cast<int64_t *>((ctx)->args[1]); \
	int64_t &UNUSED(pref##nr) = *reinterpret_cast<int64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##events) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_io_getevents(ctx, pref) \
	const uint64_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int64_t &UNUSED(pref##min_nr) = *reinterpret_cast<const int64_t *>((ctx)->args[1]); \
	const int64_t &UNUSED(pref##nr) = *reinterpret_cast<const int64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##events) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_io_submit ['aio_context_t', 'long', 'struct iocb __user * __user *']
#define locals_LINUX__X64_sys_io_submit(ctx, pref) \
	uint64_t UNUSED(pref##arg0) = *(uint64_t *)((ctx)->args[0]); \
	int64_t UNUSED(pref##arg1) = *(int64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_io_submit(ctx, pref) \
	uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int64_t &UNUSED(pref##arg1) = *reinterpret_cast<int64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_io_submit(ctx, pref) \
	const uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int64_t &UNUSED(pref##arg1) = *reinterpret_cast<const int64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_io_cancel ['aio_context_t ctx_id', 'struct iocb __user *iocb', 'struct io_event __user *result']
#define locals_LINUX__X64_sys_io_cancel(ctx, pref) \
	uint64_t UNUSED(pref##ctx_id) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##iocb) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##result) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_io_cancel(ctx, pref) \
	uint64_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##iocb) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##result) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_io_cancel(ctx, pref) \
	const uint64_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##iocb) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##result) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_lookup_dcookie ['u64 cookie64', 'char __user *buf', 'size_t len']
#define locals_LINUX__X64_sys_lookup_dcookie(ctx, pref) \
	uint64_t UNUSED(pref##cookie64) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_lookup_dcookie(ctx, pref) \
	uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_lookup_dcookie(ctx, pref) \
	const uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_epoll_create ['int size']
#define locals_LINUX__X64_sys_epoll_create(ctx, pref) \
	int32_t UNUSED(pref##size) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_epoll_create(ctx, pref) \
	int32_t &UNUSED(pref##size) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_epoll_create(ctx, pref) \
	const int32_t &UNUSED(pref##size) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_remap_file_pages ['unsigned long start', 'unsigned long size', 'unsigned long prot', 'unsigned long pgoff', 'unsigned long flags']
#define locals_LINUX__X64_sys_remap_file_pages(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##size) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##prot) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pgoff) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_remap_file_pages(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##size) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##prot) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pgoff) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_remap_file_pages(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##size) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##prot) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pgoff) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_getdents64 ['unsigned int fd', 'struct linux_dirent64 __user *dirent', 'unsigned int count']
#define locals_LINUX__X64_sys_getdents64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##dirent) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getdents64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##dirent) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getdents64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_set_tid_address ['int __user *tidptr']
#define locals_LINUX__X64_sys_set_tid_address(ctx, pref) \
	uint64_t UNUSED(pref##tidptr) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_set_tid_address(ctx, pref) \
	uint64_t &UNUSED(pref##tidptr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_set_tid_address(ctx, pref) \
	const uint64_t &UNUSED(pref##tidptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_restart_syscall ['void']
#undef locals_LINUX__X64_sys_restart_syscall
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_restart_syscall
#endif

// long sys_semtimedop ['int semid', 'struct sembuf __user *sops', 'unsigned nsops', 'const struct timespec __user *timeout']
#define locals_LINUX__X64_sys_semtimedop(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##sops) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nsops) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##timeout) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_semtimedop(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##sops) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_semtimedop(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##sops) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_fadvise64 ['int fd', 'loff_t offset', 'size_t len', 'int advice']
#define locals_LINUX__X64_sys_fadvise64(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##advice) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fadvise64(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##advice) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_fadvise64(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##advice) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_timer_create ['clockid_t which_clock', 'struct sigevent __user *timer_event_spec', 'timer_t __user *created_timer_id']
#define locals_LINUX__X64_sys_timer_create(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##timer_event_spec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##created_timer_id) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timer_create(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_timer_create(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_timer_settime ['timer_t timer_id', 'int flags', 'const struct itimerspec __user *new_setting', 'struct itimerspec __user *old_setting']
#define locals_LINUX__X64_sys_timer_settime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##new_setting) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##old_setting) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timer_settime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##new_setting) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##old_setting) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_timer_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##new_setting) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##old_setting) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_timer_gettime ['timer_t timer_id', 'struct itimerspec __user *setting']
#define locals_LINUX__X64_sys_timer_gettime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##setting) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timer_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##setting) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_timer_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##setting) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_timer_getoverrun ['timer_t timer_id']
#define locals_LINUX__X64_sys_timer_getoverrun(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timer_getoverrun(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_timer_getoverrun(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_timer_delete ['timer_t timer_id']
#define locals_LINUX__X64_sys_timer_delete(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timer_delete(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_timer_delete(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_clock_settime ['clockid_t which_clock', 'const struct timespec __user *tp']
#define locals_LINUX__X64_sys_clock_settime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tp) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_clock_settime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_clock_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_clock_gettime ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__X64_sys_clock_gettime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tp) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_clock_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_clock_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_clock_getres ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__X64_sys_clock_getres(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tp) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_clock_getres(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tp) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_clock_getres(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tp) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_clock_nanosleep ['clockid_t which_clock', 'int flags', 'const struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__X64_sys_clock_nanosleep(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##rqtp) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##rmtp) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_clock_nanosleep(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_clock_nanosleep(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_exit_group ['int error_code']
#define locals_LINUX__X64_sys_exit_group(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_exit_group(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_exit_group(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_epoll_wait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout']
#define locals_LINUX__X64_sys_epoll_wait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##events) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_epoll_wait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##events) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_epoll_wait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##events) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_epoll_ctl ['int epfd', 'int op', 'int fd', 'struct epoll_event __user *event']
#define locals_LINUX__X64_sys_epoll_ctl(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##event) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_epoll_ctl(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##event) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_epoll_ctl(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##event) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_tgkill ['pid_t tgid', 'pid_t pid', 'int sig']
#define locals_LINUX__X64_sys_tgkill(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_tgkill(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_tgkill(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_utimes ['char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__X64_sys_utimes(ctx, pref) \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##utimes) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_utimes(ctx, pref) \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_utimes(ctx, pref) \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mbind ['unsigned long start', 'unsigned long len', 'unsigned long mode', 'const unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned flags']
#define locals_LINUX__X64_sys_mbind(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##mode) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##nmask) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##maxnode) = *(uint64_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mbind(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##mode) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_mbind(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##mode) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_set_mempolicy ['int mode', 'const unsigned long __user *nmask', 'unsigned long maxnode']
#define locals_LINUX__X64_sys_set_mempolicy(ctx, pref) \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##nmask) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##maxnode) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_set_mempolicy(ctx, pref) \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_set_mempolicy(ctx, pref) \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_get_mempolicy ['int __user *policy', 'unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned long addr', 'unsigned long flags']
#define locals_LINUX__X64_sys_get_mempolicy(ctx, pref) \
	uint64_t UNUSED(pref##policy) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##nmask) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##maxnode) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##addr) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_get_mempolicy(ctx, pref) \
	uint64_t &UNUSED(pref##policy) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##addr) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_get_mempolicy(ctx, pref) \
	const uint64_t &UNUSED(pref##policy) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##addr) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_mq_open ['const char __user *name', 'int oflag', 'umode_t mode', 'struct mq_attr __user *attr']
#define locals_LINUX__X64_sys_mq_open(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##oflag) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##attr) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_open(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##oflag) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##attr) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_mq_open(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##oflag) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##attr) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_mq_unlink ['const char __user *name']
#define locals_LINUX__X64_sys_mq_unlink(ctx, pref) \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_unlink(ctx, pref) \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_mq_unlink(ctx, pref) \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_mq_timedsend ['mqd_t mqdes', 'const char __user *msg_ptr', 'size_t msg_len', 'unsigned int msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__X64_sys_mq_timedsend(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg_ptr) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##msg_prio) = *(uint32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##abs_timeout) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_timedsend(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_mq_timedsend(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_mq_timedreceive ['mqd_t mqdes', 'char __user *msg_ptr', 'size_t msg_len', 'unsigned int __user *msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__X64_sys_mq_timedreceive(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg_ptr) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##msg_prio) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##abs_timeout) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_timedreceive(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_mq_timedreceive(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_mq_notify ['mqd_t mqdes', 'const struct sigevent __user *notification']
#define locals_LINUX__X64_sys_mq_notify(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##notification) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_notify(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##notification) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_mq_notify(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##notification) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_mq_getsetattr ['mqd_t mqdes', 'const struct mq_attr __user *mqstat', 'struct mq_attr __user *omqstat']
#define locals_LINUX__X64_sys_mq_getsetattr(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##mqstat) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##omqstat) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mq_getsetattr(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##mqstat) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##omqstat) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mq_getsetattr(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##mqstat) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##omqstat) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_kexec_load ['unsigned long entry', 'unsigned long nr_segments', 'struct kexec_segment __user *segments', 'unsigned long flags']
#define locals_LINUX__X64_sys_kexec_load(ctx, pref) \
	uint64_t UNUSED(pref##entry) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##nr_segments) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##segments) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_kexec_load(ctx, pref) \
	uint64_t &UNUSED(pref##entry) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##nr_segments) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##segments) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_kexec_load(ctx, pref) \
	const uint64_t &UNUSED(pref##entry) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##nr_segments) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##segments) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_waitid ['int which', 'pid_t pid', 'struct siginfo __user *infop', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__X64_sys_waitid(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##infop) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##ru) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_waitid(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##infop) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##ru) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_waitid(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##infop) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##ru) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_add_key ['const char __user *_type', 'const char __user *_description', 'const void __user *_payload', 'size_t plen', 'key_serial_t destringid']
#define locals_LINUX__X64_sys_add_key(ctx, pref) \
	uint64_t UNUSED(pref##_type) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##_description) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##_payload) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##plen) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_add_key(ctx, pref) \
	uint64_t &UNUSED(pref##_type) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##_description) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##_payload) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##plen) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_add_key(ctx, pref) \
	const uint64_t &UNUSED(pref##_type) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##_description) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##_payload) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##plen) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_request_key ['const char __user *_type', 'const char __user *_description', 'const char __user *_callout_info', 'key_serial_t destringid']
#define locals_LINUX__X64_sys_request_key(ctx, pref) \
	uint64_t UNUSED(pref##_type) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##_description) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##_callout_info) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_request_key(ctx, pref) \
	uint64_t &UNUSED(pref##_type) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##_description) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##_callout_info) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_request_key(ctx, pref) \
	const uint64_t &UNUSED(pref##_type) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##_description) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##_callout_info) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_keyctl ['int cmd', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__X64_sys_keyctl(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg5) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_keyctl(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_keyctl(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_ioprio_set ['int which', 'int who', 'int ioprio']
#define locals_LINUX__X64_sys_ioprio_set(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##ioprio) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ioprio_set(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_ioprio_set(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_ioprio_get ['int which', 'int who']
#define locals_LINUX__X64_sys_ioprio_get(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ioprio_get(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_ioprio_get(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init ['void']
#undef locals_LINUX__X64_sys_inotify_init
#if defined(__cplusplus)
#undef references_LINUX__X64_sys_inotify_init
#endif

// long sys_inotify_add_watch ['int fd', 'const char __user *path', 'u32 mask']
#define locals_LINUX__X64_sys_inotify_add_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_inotify_add_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_inotify_add_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_inotify_rm_watch ['int fd', '__s32 wd']
#define locals_LINUX__X64_sys_inotify_rm_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##wd) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_inotify_rm_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##wd) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_inotify_rm_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##wd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_migrate_pages ['pid_t pid', 'unsigned long maxnode', 'const unsigned long __user *from', 'const unsigned long __user *to']
#define locals_LINUX__X64_sys_migrate_pages(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##maxnode) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##from) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##to) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_migrate_pages(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##from) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##to) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_migrate_pages(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##from) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##to) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_openat ['int dfd', 'const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__X64_sys_openat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_openat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_openat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_mkdirat ['int dfd', 'const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X64_sys_mkdirat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mkdirat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mkdirat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_mknodat ['int dfd', 'const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__X64_sys_mknodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mknodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_mknodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fchownat ['int dfd', 'const char __user *filename', 'uid_t user', 'gid_t group', 'int flag']
#define locals_LINUX__X64_sys_fchownat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fchownat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_fchownat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_futimesat ['int dfd', 'const char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__X64_sys_futimesat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##utimes) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_futimesat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_futimesat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_newfstatat ['int dfd', 'const char __user *filename', 'struct stat __user *statbuf', 'int flag']
#define locals_LINUX__X64_sys_newfstatat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##statbuf) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_newfstatat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_newfstatat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_unlinkat ['int dfd', 'const char __user *pathname', 'int flag']
#define locals_LINUX__X64_sys_unlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_unlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_unlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_renameat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__X64_sys_renameat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_renameat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_renameat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_linkat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'int flags']
#define locals_LINUX__X64_sys_linkat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_linkat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_linkat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_symlinkat ['const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__X64_sys_symlinkat(ctx, pref) \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_symlinkat(ctx, pref) \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_symlinkat(ctx, pref) \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_readlinkat ['int dfd', 'const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__X64_sys_readlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_readlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_readlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_fchmodat ['int dfd', 'const char __user *filename', 'umode_t mode']
#define locals_LINUX__X64_sys_fchmodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fchmodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_fchmodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_faccessat ['int dfd', 'const char __user *filename', 'int mode']
#define locals_LINUX__X64_sys_faccessat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_faccessat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_faccessat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pselect6 ['int', 'fd_set __user *', 'fd_set __user *', 'fd_set __user *', 'struct timespec __user *', 'void __user *']
#define locals_LINUX__X64_sys_pselect6(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##arg4) = *(uint64_t *)((ctx)->args[4]); \
	uint64_t UNUSED(pref##arg5) = *(uint64_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pselect6(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<uint64_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_pselect6(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint64_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint64_t *>((ctx)->args[5]);
#endif

// long sys_ppoll ['struct pollfd __user *', 'unsigned int', 'struct timespec __user *', 'const sigset_t __user *', 'size_t']
#define locals_LINUX__X64_sys_ppoll(ctx, pref) \
	uint64_t UNUSED(pref##arg0) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##arg3) = *(uint64_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_ppoll(ctx, pref) \
	uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_ppoll(ctx, pref) \
	const uint64_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_unshare ['unsigned long unshare_flags']
#define locals_LINUX__X64_sys_unshare(ctx, pref) \
	uint64_t UNUSED(pref##unshare_flags) = *(uint64_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_unshare(ctx, pref) \
	uint64_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<uint64_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_unshare(ctx, pref) \
	const uint64_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]);
#endif

// long sys_set_robust_list ['struct robust_list_head __user *head', 'size_t len']
#define locals_LINUX__X64_sys_set_robust_list(ctx, pref) \
	uint64_t UNUSED(pref##head) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_set_robust_list(ctx, pref) \
	uint64_t &UNUSED(pref##head) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_set_robust_list(ctx, pref) \
	const uint64_t &UNUSED(pref##head) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_get_robust_list ['int pid', 'struct robust_list_head __user * __user *head_ptr', 'size_t __user *len_ptr']
#define locals_LINUX__X64_sys_get_robust_list(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##head_ptr) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##len_ptr) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_get_robust_list(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##head_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##len_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_get_robust_list(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##head_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##len_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_splice ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X64_sys_splice(ctx, pref) \
	int32_t UNUSED(pref##fd_in) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##off_in) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd_out) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##off_out) = *(uint64_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_splice(ctx, pref) \
	int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##off_in) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##off_out) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_splice(ctx, pref) \
	const int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##off_in) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##off_out) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_tee ['int fdin', 'int fdout', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X64_sys_tee(ctx, pref) \
	int32_t UNUSED(pref##fdin) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##fdout) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_tee(ctx, pref) \
	int32_t &UNUSED(pref##fdin) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##fdout) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_tee(ctx, pref) \
	const int32_t &UNUSED(pref##fdin) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##fdout) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_sync_file_range ['int fd', 'loff_t offset', 'loff_t nbytes', 'unsigned int flags']
#define locals_LINUX__X64_sys_sync_file_range(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##nbytes) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sync_file_range(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_sync_file_range(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_vmsplice ['int fd', 'const struct iovec __user *iov', 'unsigned long nr_segs', 'unsigned int flags']
#define locals_LINUX__X64_sys_vmsplice(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##iov) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##nr_segs) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_vmsplice(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##iov) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##nr_segs) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_vmsplice(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##iov) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##nr_segs) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_move_pages ['pid_t pid', 'unsigned long nr_pages', 'const void __user * __user *pages', 'const int __user *nodes', 'int __user *status', 'int flags']
#define locals_LINUX__X64_sys_move_pages(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##nr_pages) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##pages) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##nodes) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##status) = *(uint64_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_move_pages(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##nr_pages) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##pages) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##nodes) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##status) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_move_pages(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##nr_pages) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##pages) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##nodes) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##status) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_utimensat ['int dfd', 'const char __user *filename', 'struct timespec __user *utimes', 'int flags']
#define locals_LINUX__X64_sys_utimensat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##filename) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##utimes) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_utimensat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##filename) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_utimensat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##filename) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_epoll_pwait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout', 'const sigset_t __user *sigmask', 'size_t sigsetsize']
#define locals_LINUX__X64_sys_epoll_pwait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##events) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##sigmask) = *(uint64_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_epoll_pwait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##events) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##sigmask) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_epoll_pwait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##events) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##sigmask) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_signalfd ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask']
#define locals_LINUX__X64_sys_signalfd(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##user_mask) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_signalfd(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_signalfd(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_timerfd_create ['int clockid', 'int flags']
#define locals_LINUX__X64_sys_timerfd_create(ctx, pref) \
	int32_t UNUSED(pref##clockid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timerfd_create(ctx, pref) \
	int32_t &UNUSED(pref##clockid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_timerfd_create(ctx, pref) \
	const int32_t &UNUSED(pref##clockid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_eventfd ['unsigned int count']
#define locals_LINUX__X64_sys_eventfd(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_eventfd(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_eventfd(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_fallocate ['int fd', 'int mode', 'loff_t offset', 'loff_t len']
#define locals_LINUX__X64_sys_fallocate(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fallocate(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_fallocate(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_settime ['int ufd', 'int flags', 'const struct itimerspec __user *utmr', 'struct itimerspec __user *otmr']
#define locals_LINUX__X64_sys_timerfd_settime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##utmr) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##otmr) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timerfd_settime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##utmr) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##otmr) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_timerfd_settime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##utmr) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_gettime ['int ufd', 'struct itimerspec __user *otmr']
#define locals_LINUX__X64_sys_timerfd_gettime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##otmr) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_timerfd_gettime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##otmr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_timerfd_gettime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_accept4 ['int', 'struct sockaddr __user *', 'int __user *', 'int']
#define locals_LINUX__X64_sys_accept4(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##arg1) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##arg2) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##arg3) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_accept4(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##arg3) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_accept4(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##arg3) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_signalfd4 ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask', 'int flags']
#define locals_LINUX__X64_sys_signalfd4(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##user_mask) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_signalfd4(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_signalfd4(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_eventfd2 ['unsigned int count', 'int flags']
#define locals_LINUX__X64_sys_eventfd2(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_eventfd2(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_eventfd2(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_epoll_create1 ['int flags']
#define locals_LINUX__X64_sys_epoll_create1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_epoll_create1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_epoll_create1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_dup3 ['unsigned int oldfd', 'unsigned int newfd', 'int flags']
#define locals_LINUX__X64_sys_dup3(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_dup3(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_dup3(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pipe2 ['int __user *fildes', 'int flags']
#define locals_LINUX__X64_sys_pipe2(ctx, pref) \
	uint64_t UNUSED(pref##fildes) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pipe2(ctx, pref) \
	uint64_t &UNUSED(pref##fildes) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_pipe2(ctx, pref) \
	const uint64_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init1 ['int flags']
#define locals_LINUX__X64_sys_inotify_init1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_inotify_init1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_inotify_init1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_preadv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__X64_sys_preadv(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos_l) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##pos_h) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_preadv(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_preadv(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_pwritev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__X64_sys_pwritev(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos_l) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##pos_h) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pwritev(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_pwritev(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_rt_tgsigqueueinfo ['pid_t tgid', 'pid_t pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__X64_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##uinfo) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_rt_tgsigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_perf_event_open ['struct perf_event_attr __user *attr_uptr', 'pid_t pid', 'int cpu', 'int group_fd', 'unsigned long flags']
#define locals_LINUX__X64_sys_perf_event_open(ctx, pref) \
	uint64_t UNUSED(pref##attr_uptr) = *(uint64_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##_cpu) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##group_fd) = *(int32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_perf_event_open(ctx, pref) \
	uint64_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_perf_event_open(ctx, pref) \
	const uint64_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_recvmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags', 'struct timespec __user *timeout']
#define locals_LINUX__X64_sys_recvmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##timeout) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_recvmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_recvmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_fanotify_init ['unsigned int flags', 'unsigned int event_f_flags']
#define locals_LINUX__X64_sys_fanotify_init(ctx, pref) \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##event_f_flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fanotify_init(ctx, pref) \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_fanotify_init(ctx, pref) \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fanotify_mark ['int fanotify_fd', 'unsigned int flags', 'u64 mask', 'int fd', 'const char __user *pathname']
#define locals_LINUX__X64_sys_fanotify_mark(ctx, pref) \
	int32_t UNUSED(pref##fanotify_fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##mask) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##pathname) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_fanotify_mark(ctx, pref) \
	int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##mask) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_fanotify_mark(ctx, pref) \
	const int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##mask) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_prlimit64 ['pid_t pid', 'unsigned int resource', 'const struct rlimit64 __user *new_rlim', 'struct rlimit64 __user *old_rlim']
#define locals_LINUX__X64_sys_prlimit64(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##new_rlim) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##old_rlim) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_prlimit64(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##new_rlim) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##old_rlim) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_prlimit64(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##new_rlim) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##old_rlim) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_name_to_handle_at ['int dfd', 'const char __user *name', 'struct file_handle __user *handle', 'int __user *mnt_id', 'int flag']
#define locals_LINUX__X64_sys_name_to_handle_at(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##name) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##handle) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##mnt_id) = *(uint64_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_name_to_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##name) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##handle) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##mnt_id) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_name_to_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##name) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##handle) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##mnt_id) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_open_by_handle_at ['int mountdirfd', 'struct file_handle __user *handle', 'int flags']
#define locals_LINUX__X64_sys_open_by_handle_at(ctx, pref) \
	int32_t UNUSED(pref##mountdirfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##handle) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_open_by_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##handle) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_open_by_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##handle) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_clock_adjtime ['clockid_t which_clock', 'struct timex __user *tx']
#define locals_LINUX__X64_sys_clock_adjtime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##tx) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_clock_adjtime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##tx) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_clock_adjtime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##tx) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_syncfs ['int fd']
#define locals_LINUX__X64_sys_syncfs(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_syncfs(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_syncfs(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sendmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags']
#define locals_LINUX__X64_sys_sendmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##msg) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sendmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##msg) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_sendmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##msg) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_setns ['int fd', 'int nstype']
#define locals_LINUX__X64_sys_setns(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##nstype) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_setns(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##nstype) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_setns(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##nstype) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_getcpu ['unsigned __user *cpu', 'unsigned __user *node', 'struct getcpu_cache __user *cache']
#define locals_LINUX__X64_sys_getcpu(ctx, pref) \
	uint64_t UNUSED(pref##_cpu) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##node) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##cache) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getcpu(ctx, pref) \
	uint64_t &UNUSED(pref##_cpu) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##node) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##cache) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getcpu(ctx, pref) \
	const uint64_t &UNUSED(pref##_cpu) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##node) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##cache) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_process_vm_readv ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__X64_sys_process_vm_readv(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##lvec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##liovcnt) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##rvec) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##riovcnt) = *(uint64_t *)((ctx)->args[4]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_process_vm_readv(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##lvec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##rvec) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_process_vm_readv(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[5]);
#endif

// long sys_process_vm_writev ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__X64_sys_process_vm_writev(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##lvec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##liovcnt) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##rvec) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##riovcnt) = *(uint64_t *)((ctx)->args[4]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_process_vm_writev(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##lvec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##rvec) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_process_vm_writev(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[5]);
#endif

// long sys_kcmp ['pid_t pid1', 'pid_t pid2', 'int type', 'unsigned long idx1', 'unsigned long idx2']
#define locals_LINUX__X64_sys_kcmp(ctx, pref) \
	int32_t UNUSED(pref##pid1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid2) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##idx1) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##idx2) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_kcmp(ctx, pref) \
	int32_t &UNUSED(pref##pid1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##idx1) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##idx2) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_kcmp(ctx, pref) \
	const int32_t &UNUSED(pref##pid1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##idx1) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##idx2) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_finit_module ['int fd', 'const char __user *uargs', 'int flags']
#define locals_LINUX__X64_sys_finit_module(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##uargs) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_finit_module(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_finit_module(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_sched_setattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int flags']
#define locals_LINUX__X64_sys_sched_setattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##attr) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_setattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##attr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_sched_setattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##attr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int size', 'unsigned int flags']
#define locals_LINUX__X64_sys_sched_getattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##attr) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_sched_getattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##attr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_sched_getattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##attr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_renameat2 ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'unsigned int flags']
#define locals_LINUX__X64_sys_renameat2(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##oldname) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##newname) = *(uint64_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_renameat2(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##newname) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_renameat2(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##newname) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_seccomp ['unsigned int op', 'unsigned int flags', 'const char __user *uargs']
#define locals_LINUX__X64_sys_seccomp(ctx, pref) \
	uint32_t UNUSED(pref##op) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##uargs) = *(uint64_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_seccomp(ctx, pref) \
	uint32_t &UNUSED(pref##op) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<uint64_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_seccomp(ctx, pref) \
	const uint32_t &UNUSED(pref##op) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]);
#endif

// long sys_getrandom ['char __user *buf', 'size_t count', 'unsigned int flags']
#define locals_LINUX__X64_sys_getrandom(ctx, pref) \
	uint64_t UNUSED(pref##buf) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_getrandom(ctx, pref) \
	uint64_t &UNUSED(pref##buf) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_getrandom(ctx, pref) \
	const uint64_t &UNUSED(pref##buf) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_memfd_create ['const char __user *uname_ptr', 'unsigned int flags']
#define locals_LINUX__X64_sys_memfd_create(ctx, pref) \
	uint64_t UNUSED(pref##uname_ptr) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_memfd_create(ctx, pref) \
	uint64_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_memfd_create(ctx, pref) \
	const uint64_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_kexec_file_load ['int kernel_fd', 'int initrd_fd', 'unsigned long cmdline_len', 'const char __user *cmdline_ptr', 'unsigned long flags']
#define locals_LINUX__X64_sys_kexec_file_load(ctx, pref) \
	int32_t UNUSED(pref##kernel_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##initrd_fd) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##cmdline_len) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##cmdline_ptr) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_kexec_file_load(ctx, pref) \
	int32_t &UNUSED(pref##kernel_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##initrd_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##cmdline_len) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##cmdline_ptr) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_kexec_file_load(ctx, pref) \
	const int32_t &UNUSED(pref##kernel_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##initrd_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##cmdline_len) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##cmdline_ptr) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif

// long sys_bpf ['int cmd', 'union bpf_attr *attr', 'unsigned int size']
#define locals_LINUX__X64_sys_bpf(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##attr) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_bpf(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##attr) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_bpf(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##attr) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_userfaultfd ['int flags']
#define locals_LINUX__X64_sys_userfaultfd(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_userfaultfd(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_userfaultfd(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_membarrier ['int cmd', 'int flags']
#define locals_LINUX__X64_sys_membarrier(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_membarrier(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_membarrier(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_mlock2 ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__X64_sys_mlock2(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_mlock2(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X64_sys_mlock2(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_copy_file_range ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X64_sys_copy_file_range(ctx, pref) \
	int32_t UNUSED(pref##fd_in) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##off_in) = *(uint64_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd_out) = *(int32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##off_out) = *(uint64_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_copy_file_range(ctx, pref) \
	int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##off_in) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##off_out) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_copy_file_range(ctx, pref) \
	const int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##off_in) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##off_out) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_preadv2 ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']
#define locals_LINUX__X64_sys_preadv2(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos_l) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##pos_h) = *(uint64_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_preadv2(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_preadv2(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_pwritev2 ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']
#define locals_LINUX__X64_sys_pwritev2(ctx, pref) \
	uint64_t UNUSED(pref##fd) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##vec) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##vlen) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos_l) = *(uint64_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##pos_h) = *(uint64_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pwritev2(ctx, pref) \
	uint64_t &UNUSED(pref##fd) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##vec) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint64_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint64_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X64_sys_pwritev2(ctx, pref) \
	const uint64_t &UNUSED(pref##fd) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##vec) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_pkey_mprotect ['unsigned long start', 'size_t len', 'unsigned long prot', 'int pkey']
#define locals_LINUX__X64_sys_pkey_mprotect(ctx, pref) \
	uint64_t UNUSED(pref##start) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##prot) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##pkey) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pkey_mprotect(ctx, pref) \
	uint64_t &UNUSED(pref##start) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##prot) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##pkey) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X64_sys_pkey_mprotect(ctx, pref) \
	const uint64_t &UNUSED(pref##start) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##prot) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##pkey) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_pkey_alloc ['unsigned long flags', 'unsigned long init_val']
#define locals_LINUX__X64_sys_pkey_alloc(ctx, pref) \
	uint64_t UNUSED(pref##flags) = *(uint64_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##init_val) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pkey_alloc(ctx, pref) \
	uint64_t &UNUSED(pref##flags) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##init_val) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X64_sys_pkey_alloc(ctx, pref) \
	const uint64_t &UNUSED(pref##flags) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##init_val) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_pkey_free ['int pkey']
#define locals_LINUX__X64_sys_pkey_free(ctx, pref) \
	int32_t UNUSED(pref##pkey) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_pkey_free(ctx, pref) \
	int32_t &UNUSED(pref##pkey) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X64_sys_pkey_free(ctx, pref) \
	const int32_t &UNUSED(pref##pkey) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_statx ['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']
#define locals_LINUX__X64_sys_statx(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##path) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[3]); \
	uint64_t UNUSED(pref##buffer) = *(uint64_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X64_sys_statx(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##path) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint64_t &UNUSED(pref##buffer) = *reinterpret_cast<uint64_t *>((ctx)->args[4]);
#define creferences_LINUX__X64_sys_statx(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##path) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint64_t &UNUSED(pref##buffer) = *reinterpret_cast<const uint64_t *>((ctx)->args[4]);
#endif


/* ### windows_2000:x86 ################################################# */
// NTSTATUS NtAcceptConnectPort ['PHANDLE PortHandle', 'PVOID PortContext', 'PPORT_MESSAGE ConnectionRequest', 'BOOLEAN AcceptConnection', 'PPORT_VIEW ServerView', 'PREMOTE_PORT_VIEW ClientView']
#define locals_WINDOWS_2000__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AcceptConnection) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtAcceptConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAccessCheck ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_2000__X86_NtAccessCheck(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheck(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_2000__X86_NtAccessCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtAccessCheckAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByType ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_2000__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckByType(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultList ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_2000__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[15]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[16]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[15]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[16]);
#define creferences_WINDOWS_2000__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[16]);
#endif

// NTSTATUS NtAddAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_2000__X86_NtAddAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAddAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtAddAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAdjustGroupsToken ['HANDLE TokenHandle', 'BOOLEAN ResetToDefault', 'PTOKEN_GROUPS NewState', 'ULONG BufferLength', 'PTOKEN_GROUPS PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResetToDefault) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtAdjustGroupsToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAdjustPrivilegesToken ['HANDLE TokenHandle', 'BOOLEAN DisableAllPrivileges', 'PTOKEN_PRIVILEGES NewState', 'ULONG BufferLength', 'PTOKEN_PRIVILEGES PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DisableAllPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtAdjustPrivilegesToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlertResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_2000__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtAlertResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAlertThread ['HANDLE ThreadHandle']
#define locals_WINDOWS_2000__X86_NtAlertThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAlertThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtAlertThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateLocallyUniqueId ['PLUID Luid']
#define locals_WINDOWS_2000__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t UNUSED(pref##Luid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	const uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_2000__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAllocateUuids ['PULARGE_INTEGER Time', 'PULONG Range', 'PULONG Sequence', 'PCHAR Seed']
#define locals_WINDOWS_2000__X86_NtAllocateUuids(ctx, pref) \
	uint32_t UNUSED(pref##Time) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Range) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Sequence) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAllocateUuids(ctx, pref) \
	uint32_t &UNUSED(pref##Time) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Range) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtAllocateUuids(ctx, pref) \
	const uint32_t &UNUSED(pref##Time) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Range) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtAllocateVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'PSIZE_T RegionSize', 'ULONG AllocationType', 'ULONG Protect']
#define locals_WINDOWS_2000__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Protect) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtAllocateVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAreMappedFilesTheSame ['PVOID File1MappedAsAnImage', 'PVOID File2MappedAsFile']
#define locals_WINDOWS_2000__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t UNUSED(pref##File1MappedAsAnImage) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##File2MappedAsFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtAreMappedFilesTheSame(ctx, pref) \
	const uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAssignProcessToJobObject ['HANDLE JobHandle', 'HANDLE ProcessHandle']
#define locals_WINDOWS_2000__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtAssignProcessToJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCallbackReturn ['PVOID OutputBuffer', 'ULONG OutputLength', 'NTSTATUS Status']
#define locals_WINDOWS_2000__X86_NtCallbackReturn(ctx, pref) \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputLength) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Status) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCallbackReturn(ctx, pref) \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Status) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtCallbackReturn(ctx, pref) \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Status) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelIoFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_2000__X86_NtCancelIoFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCancelIoFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtCancelIoFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCancelTimer ['HANDLE TimerHandle', 'PBOOLEAN CurrentState']
#define locals_WINDOWS_2000__X86_NtCancelTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##CurrentState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCancelTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtCancelTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtClearEvent ['HANDLE EventHandle']
#define locals_WINDOWS_2000__X86_NtClearEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtClearEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtClearEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtClose ['HANDLE Handle']
#define locals_WINDOWS_2000__X86_NtClose(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtClose(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtClose(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCloseObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompleteConnectPort ['HANDLE PortHandle']
#define locals_WINDOWS_2000__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtCompleteConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_2000__X86_NtConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_2000__X86_NtConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtContinue ['PCONTEXT ContextRecord', 'BOOLEAN TestAlert']
#define locals_WINDOWS_2000__X86_NtContinue(ctx, pref) \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TestAlert) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtContinue(ctx, pref) \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCreateDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtCreateDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'EVENT_TYPE EventType', 'BOOLEAN InitialState']
#define locals_WINDOWS_2000__X86_NtCreateEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InitialState) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtCreateEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtCreateEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtCreateEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER AllocationSize', 'ULONG FileAttributes', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'PVOID EaBuffer', 'ULONG EaLength']
#define locals_WINDOWS_2000__X86_NtCreateFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##EaBuffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##EaLength) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_2000__X86_NtCreateFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Count']
#define locals_WINDOWS_2000__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtCreateIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtCreateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtCreateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG TitleIndex', 'PUNICODE_STRING Class', 'ULONG CreateOptions', 'PULONG Disposition']
#define locals_WINDOWS_2000__X86_NtCreateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Class) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Disposition) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Class) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtCreateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Class) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateMailslotFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CreateOptions', 'ULONG MailslotQuota', 'ULONG MaximumMessageSize', 'PLARGE_INTEGER ReadTimeout']
#define locals_WINDOWS_2000__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MailslotQuota) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaximumMessageSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ReadTimeout) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_2000__X86_NtCreateMailslotFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN InitialOwner']
#define locals_WINDOWS_2000__X86_NtCreateMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##InitialOwner) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtCreateMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateNamedPipeFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'ULONG NamedPipeType', 'ULONG ReadMode', 'ULONG CompletionMode', 'ULONG MaximumInstances', 'ULONG InboundQuota', 'ULONG OutboundQuota', 'PLARGE_INTEGER DefaultTimeout']
#define locals_WINDOWS_2000__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##NamedPipeType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReadMode) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##CompletionMode) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##MaximumInstances) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##InboundQuota) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##OutboundQuota) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##DefaultTimeout) = *(uint32_t *)((ctx)->args[13]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[13]);
#define creferences_WINDOWS_2000__X86_NtCreateNamedPipeFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]);
#endif

// NTSTATUS NtCreatePagingFile ['PUNICODE_STRING PageFileName', 'PLARGE_INTEGER MinimumSize', 'PLARGE_INTEGER MaximumSize', 'ULONG Priority']
#define locals_WINDOWS_2000__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t UNUSED(pref##PageFileName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumSize) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Priority) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtCreatePagingFile(ctx, pref) \
	const uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreatePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_2000__X86_NtCreatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtCreatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'BOOLEAN InheritObjectTable', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort']
#define locals_WINDOWS_2000__X86_NtCreateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InheritObjectTable) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_2000__X86_NtCreateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateProfile ['PHANDLE ProfileHandle', 'HANDLE Process', 'PVOID RangeBase', 'SIZE_T RangeSize', 'ULONG BucketSize', 'PULONG Buffer', 'ULONG BufferSize', 'KPROFILE_SOURCE ProfileSource', 'KAFFINITY Affinity']
#define locals_WINDOWS_2000__X86_NtCreateProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Process) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RangeBase) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RangeSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BucketSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Affinity) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Process) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtCreateProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Process) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PLARGE_INTEGER MaximumSize', 'ULONG SectionPageProtection', 'ULONG AllocationAttributes', 'HANDLE FileHandle']
#define locals_WINDOWS_2000__X86_NtCreateSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SectionPageProtection) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AllocationAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtCreateSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LONG InitialCount', 'LONG MaximumCount']
#define locals_WINDOWS_2000__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##InitialCount) = *(int32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##MaximumCount) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtCreateSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LinkTarget']
#define locals_WINDOWS_2000__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ProcessHandle', 'PCLIENT_ID ClientId', 'PCONTEXT ThreadContext', 'PINITIAL_TEB InitialTeb', 'BOOLEAN CreateSuspended']
#define locals_WINDOWS_2000__X86_NtCreateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InitialTeb) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateSuspended) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_2000__X86_NtCreateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TIMER_TYPE TimerType']
#define locals_WINDOWS_2000__X86_NtCreateTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtCreateTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateToken ['PHANDLE TokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TOKEN_TYPE TokenType', 'PLUID AuthenticationId', 'PLARGE_INTEGER ExpirationTime', 'PTOKEN_USER User', 'PTOKEN_GROUPS Groups', 'PTOKEN_PRIVILEGES Privileges', 'PTOKEN_OWNER Owner', 'PTOKEN_PRIMARY_GROUP PrimaryGroup', 'PTOKEN_DEFAULT_DACL DefaultDacl', 'PTOKEN_SOURCE TokenSource']
#define locals_WINDOWS_2000__X86_NtCreateToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AuthenticationId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ExpirationTime) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##User) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Groups) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Owner) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##PrimaryGroup) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##DefaultDacl) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##TokenSource) = *(uint32_t *)((ctx)->args[12]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##User) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<uint32_t *>((ctx)->args[12]);
#define creferences_WINDOWS_2000__X86_NtCreateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##User) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]);
#endif

// NTSTATUS NtCreateWaitablePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_2000__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtCreateWaitablePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtDelayExecution ['BOOLEAN Alertable', 'PLARGE_INTEGER DelayInterval']
#define locals_WINDOWS_2000__X86_NtDelayExecution(ctx, pref) \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DelayInterval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDelayExecution(ctx, pref) \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtDelayExecution(ctx, pref) \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeleteAtom ['RTL_ATOM Atom']
#define locals_WINDOWS_2000__X86_NtDeleteAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeleteAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtDeleteAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteFile ['POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtDeleteFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeleteFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtDeleteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteKey ['HANDLE KeyHandle']
#define locals_WINDOWS_2000__X86_NtDeleteKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeleteKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtDeleteKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDeleteValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName']
#define locals_WINDOWS_2000__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtDeleteValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeviceIoControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_2000__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_2000__X86_NtDeviceIoControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtDisplayString ['PUNICODE_STRING String']
#define locals_WINDOWS_2000__X86_NtDisplayString(ctx, pref) \
	uint32_t UNUSED(pref##String) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDisplayString(ctx, pref) \
	uint32_t &UNUSED(pref##String) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtDisplayString(ctx, pref) \
	const uint32_t &UNUSED(pref##String) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDuplicateObject ['HANDLE SourceProcessHandle', 'HANDLE SourceHandle', 'HANDLE TargetProcessHandle', 'PHANDLE TargetHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Options']
#define locals_WINDOWS_2000__X86_NtDuplicateObject(ctx, pref) \
	uint32_t UNUSED(pref##SourceProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TargetProcessHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Options) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDuplicateObject(ctx, pref) \
	uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Options) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtDuplicateObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Options) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtDuplicateToken ['HANDLE ExistingTokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN EffectiveOnly', 'TOKEN_TYPE TokenType', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_2000__X86_NtDuplicateToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EffectiveOnly) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtDuplicateToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtDuplicateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_2000__X86_NtEnumerateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtEnumerateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtEnumerateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateValueKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_2000__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtEnumerateValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtExtendSection ['HANDLE SectionHandle', 'PLARGE_INTEGER NewSectionSize']
#define locals_WINDOWS_2000__X86_NtExtendSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewSectionSize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtExtendSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtExtendSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFilterToken ['HANDLE ExistingTokenHandle', 'ULONG Flags', 'PTOKEN_GROUPS SidsToDisable', 'PTOKEN_PRIVILEGES PrivilegesToDelete', 'PTOKEN_GROUPS RestrictedSids', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_2000__X86_NtFilterToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SidsToDisable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##PrivilegesToDelete) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestrictedSids) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFilterToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtFilterToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtFindAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_2000__X86_NtFindAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFindAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtFindAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushBuffersFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_2000__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtFlushBuffersFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFlushInstructionCache ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T Length']
#define locals_WINDOWS_2000__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtFlushInstructionCache(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushKey ['HANDLE KeyHandle']
#define locals_WINDOWS_2000__X86_NtFlushKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFlushKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtFlushKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtFlushVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'PIO_STATUS_BLOCK IoStatus']
#define locals_WINDOWS_2000__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtFlushVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFlushWriteBuffer ['']
#undef locals_WINDOWS_2000__X86_NtFlushWriteBuffer
#if defined(__cplusplus)
#undef references_WINDOWS_2000__X86_NtFlushWriteBuffer
#endif

// NTSTATUS NtFreeUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_2000__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtFreeUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFreeVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG FreeType']
#define locals_WINDOWS_2000__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##FreeType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtFreeVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFsControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_2000__X86_NtFsControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtFsControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_2000__X86_NtFsControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtGetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_2000__X86_NtGetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtGetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtGetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetDevicePowerState ['HANDLE Device', 'DEVICE_POWER_STATE *State']
#define locals_WINDOWS_2000__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t UNUSED(pref##Device) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t &UNUSED(pref##Device) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtGetDevicePowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##Device) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetPlugPlayEvent ['HANDLE EventHandle', 'PVOID Context', 'PPLUGPLAY_EVENT_BLOCK EventBlock', 'ULONG EventBufferSize']
#define locals_WINDOWS_2000__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventBlock) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventBufferSize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtGetPlugPlayEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtGetWriteWatch ['HANDLE ProcessHandle', 'ULONG Flags', 'PVOID BaseAddress', 'SIZE_T RegionSize', 'PVOID *UserAddressArray', 'PULONG_PTR EntriesInUserAddressArray', 'PULONG Granularity']
#define locals_WINDOWS_2000__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##UserAddressArray) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EntriesInUserAddressArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Granularity) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtGetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtImpersonateAnonymousToken ['HANDLE ThreadHandle']
#define locals_WINDOWS_2000__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtImpersonateAnonymousToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtImpersonateClientOfPort ['HANDLE PortHandle', 'PPORT_MESSAGE Message']
#define locals_WINDOWS_2000__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtImpersonateClientOfPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtImpersonateThread ['HANDLE ServerThreadHandle', 'HANDLE ClientThreadHandle', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos']
#define locals_WINDOWS_2000__X86_NtImpersonateThread(ctx, pref) \
	uint32_t UNUSED(pref##ServerThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtImpersonateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtImpersonateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtInitializeRegistry ['USHORT BootCondition']
#define locals_WINDOWS_2000__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t UNUSED(pref##BootCondition) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtInitializeRegistry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtInitiatePowerAction ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_2000__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtInitiatePowerAction(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// BOOLEAN NtIsSystemResumeAutomatic ['']
#undef locals_WINDOWS_2000__X86_NtIsSystemResumeAutomatic
#if defined(__cplusplus)
#undef references_WINDOWS_2000__X86_NtIsSystemResumeAutomatic
#endif

// NTSTATUS NtListenPort ['HANDLE PortHandle', 'PPORT_MESSAGE ConnectionRequest']
#define locals_WINDOWS_2000__X86_NtListenPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtListenPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtListenPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_2000__X86_NtLoadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtLoadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtLoadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLoadKey ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile']
#define locals_WINDOWS_2000__X86_NtLoadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtLoadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtLoadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadKey2 ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile', 'ULONG Flags']
#define locals_WINDOWS_2000__X86_NtLoadKey2(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtLoadKey2(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtLoadKey2(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtLockFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key', 'BOOLEAN FailImmediately', 'BOOLEAN ExclusiveLock']
#define locals_WINDOWS_2000__X86_NtLockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##FailImmediately) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ExclusiveLock) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtLockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_2000__X86_NtLockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtLockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_2000__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtLockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtMakeTemporaryObject ['HANDLE Handle']
#define locals_WINDOWS_2000__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtMakeTemporaryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMapUserPhysicalPages ['PVOID VirtualAddress', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_2000__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddress) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtMapUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapUserPhysicalPagesScatter ['PVOID *VirtualAddresses', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_2000__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddresses) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapViewOfSection ['HANDLE SectionHandle', 'HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'SIZE_T CommitSize', 'PLARGE_INTEGER SectionOffset', 'PSIZE_T ViewSize', 'SECTION_INHERIT InheritDisposition', 'ULONG AllocationType', 'WIN32_PROTECTION_MASK Win32Protect']
#define locals_WINDOWS_2000__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CommitSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ViewSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InheritDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Win32Protect) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_2000__X86_NtMapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtNotifyChangeDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'ULONG CompletionFilter', 'BOOLEAN WatchTree']
#define locals_WINDOWS_2000__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtNotifyChangeKey ['HANDLE KeyHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_2000__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_2000__X86_NtNotifyChangeKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtNotifyChangeMultipleKeys ['HANDLE MasterKeyHandle', 'ULONG Count', 'OBJECT_ATTRIBUTES SlaveObjects[]', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_2000__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t UNUSED(pref##MasterKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SlaveObjects) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_2000__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG OpenOptions']
#define locals_WINDOWS_2000__X86_NtOpenFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtOpenFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtOpenIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'ACCESS_MASK GrantedAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN ObjectCreation', 'BOOLEAN AccessGranted', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_2000__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_2000__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_2000__X86_NtOpenProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtOpenProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenProcessToken ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'PHANDLE TokenHandle']
#define locals_WINDOWS_2000__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenProcessToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_2000__X86_NtOpenThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtOpenThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadToken ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'PHANDLE TokenHandle']
#define locals_WINDOWS_2000__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtOpenThreadToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_2000__X86_NtOpenTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtOpenTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtOpenTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPlugPlayControl ['PLUGPLAY_CONTROL_CLASS PnPControlClass', 'PVOID PnPControlData', 'ULONG PnPControlDataLength']
#define locals_WINDOWS_2000__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t UNUSED(pref##PnPControlClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PnPControlData) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PnPControlDataLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtPlugPlayControl(ctx, pref) \
	const uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPowerInformation ['POWER_INFORMATION_LEVEL InformationLevel', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_2000__X86_NtPowerInformation(ctx, pref) \
	uint32_t UNUSED(pref##InformationLevel) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPowerInformation(ctx, pref) \
	uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtPowerInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrivilegeCheck ['HANDLE ClientToken', 'PPRIVILEGE_SET RequiredPrivileges', 'PBOOLEAN Result']
#define locals_WINDOWS_2000__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequiredPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtPrivilegeCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPrivilegedServiceAuditAlarm ['PUNICODE_STRING SubsystemName', 'PUNICODE_STRING ServiceName', 'HANDLE ClientToken', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_2000__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrivilegeObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_2000__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtProtectVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'WIN32_PROTECTION_MASK NewProtectWin32', 'PULONG OldProtect']
#define locals_WINDOWS_2000__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##NewProtectWin32) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OldProtect) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtProtectVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPulseEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_2000__X86_NtPulseEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtPulseEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtPulseEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryInformationAtom ['RTL_ATOM Atom', 'ATOM_INFORMATION_CLASS InformationClass', 'PVOID AtomInformation', 'ULONG AtomInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##AtomInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AtomInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_BASIC_INFORMATION FileInformation']
#define locals_WINDOWS_2000__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultLocale ['BOOLEAN UserProfile', 'PLCID DefaultLocaleId']
#define locals_WINDOWS_2000__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultUILanguage ['LANGID *DefaultUILanguageId']
#define locals_WINDOWS_2000__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtQueryDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass', 'BOOLEAN ReturnSingleEntry', 'PUNICODE_STRING FileName', 'BOOLEAN RestartScan']
#define locals_WINDOWS_2000__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##FileName) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_2000__X86_NtQueryDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtQueryDirectoryObject ['HANDLE DirectoryHandle', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'BOOLEAN RestartScan', 'PULONG Context', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtQueryDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtQueryEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID EaList', 'ULONG EaListLength', 'PULONG EaIndex', 'BOOLEAN RestartScan']
#define locals_WINDOWS_2000__X86_NtQueryEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EaList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##EaListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##EaIndex) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtQueryEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQueryEvent ['HANDLE EventHandle', 'EVENT_INFORMATION_CLASS EventInformationClass', 'PVOID EventInformation', 'ULONG EventInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EventInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryFullAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_NETWORK_OPEN_INFORMATION FileInformation']
#define locals_WINDOWS_2000__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryFullAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_2000__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryIoCompletion ['HANDLE IoCompletionHandle', 'IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass', 'PVOID IoCompletionInformation', 'ULONG IoCompletionInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoCompletionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoCompletionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationPort ['HANDLE PortHandle', 'PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInstallUILanguage ['LANGID *InstallUILanguageId']
#define locals_WINDOWS_2000__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##InstallUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtQueryInstallUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryIntervalProfile ['KPROFILE_SOURCE ProfileSource', 'PULONG Interval']
#define locals_WINDOWS_2000__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryKey ['HANDLE KeyHandle', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_2000__X86_NtQueryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryMultipleValueKey ['HANDLE KeyHandle', 'PKEY_VALUE_ENTRY ValueEntries', 'ULONG EntryCount', 'PVOID ValueBuffer', 'PULONG BufferLength', 'PULONG RequiredBufferLength']
#define locals_WINDOWS_2000__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueEntries) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EntryCount) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##RequiredBufferLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtQueryMultipleValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryMutant ['HANDLE MutantHandle', 'MUTANT_INFORMATION_CLASS MutantInformationClass', 'PVOID MutantInformation', 'ULONG MutantInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MutantInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MutantInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MutantInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryOpenSubKeys ['POBJECT_ATTRIBUTES TargetKey', 'PULONG HandleCount']
#define locals_WINDOWS_2000__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryOpenSubKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryPerformanceCounter ['PLARGE_INTEGER PerformanceCounter', 'PLARGE_INTEGER PerformanceFrequency']
#define locals_WINDOWS_2000__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t UNUSED(pref##PerformanceCounter) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PerformanceFrequency) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtQueryPerformanceCounter(ctx, pref) \
	const uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID SidList', 'ULONG SidListLength', 'PULONG StartSid', 'BOOLEAN RestartScan']
#define locals_WINDOWS_2000__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SidList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##SidListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##StartSid) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtQueryQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQuerySection ['HANDLE SectionHandle', 'SECTION_INFORMATION_CLASS SectionInformationClass', 'PVOID SectionInformation', 'SIZE_T SectionInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_2000__X86_NtQuerySection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SectionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQuerySection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ULONG Length', 'PULONG LengthNeeded']
#define locals_WINDOWS_2000__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##LengthNeeded) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQuerySecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySemaphore ['HANDLE SemaphoreHandle', 'SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass', 'PVOID SemaphoreInformation', 'ULONG SemaphoreInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SemaphoreInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SemaphoreInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SemaphoreInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQuerySemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySymbolicLinkObject ['HANDLE LinkHandle', 'PUNICODE_STRING LinkTarget', 'PULONG ReturnedLength']
#define locals_WINDOWS_2000__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReturnedLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PWSTR VariableValue', 'USHORT ValueLength', 'PUSHORT ReturnLength']
#define locals_WINDOWS_2000__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtQuerySystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemTime ['PLARGE_INTEGER SystemTime']
#define locals_WINDOWS_2000__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtQuerySystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryTimer ['HANDLE TimerHandle', 'TIMER_INFORMATION_CLASS TimerInformationClass', 'PVOID TimerInformation', 'ULONG TimerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TimerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryTimerResolution ['PULONG MaximumTime', 'PULONG MinimumTime', 'PULONG CurrentTime']
#define locals_WINDOWS_2000__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##MaximumTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##CurrentTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtQueryTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQueryValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_2000__X86_NtQueryValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtQueryValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'MEMORY_INFORMATION_CLASS MemoryInformationClass', 'PVOID MemoryInformation', 'SIZE_T MemoryInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_2000__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MemoryInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MemoryInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MemoryInformationLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtQueryVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_2000__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueryVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueueApcThread ['HANDLE ThreadHandle', 'PPS_APC_ROUTINE ApcRoutine', 'PVOID ApcArgument1', 'PVOID ApcArgument2', 'PVOID ApcArgument3']
#define locals_WINDOWS_2000__X86_NtQueueApcThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcArgument1) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcArgument2) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcArgument3) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtQueueApcThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtQueueApcThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRaiseException ['PEXCEPTION_RECORD ExceptionRecord', 'PCONTEXT ContextRecord', 'BOOLEAN FirstChance']
#define locals_WINDOWS_2000__X86_NtRaiseException(ctx, pref) \
	uint32_t UNUSED(pref##ExceptionRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FirstChance) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRaiseException(ctx, pref) \
	uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtRaiseException(ctx, pref) \
	const uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRaiseHardError ['NTSTATUS ErrorStatus', 'ULONG NumberOfParameters', 'ULONG UnicodeStringParameterMask', 'PULONG_PTR Parameters', 'ULONG ValidResponseOptions', 'PULONG Response']
#define locals_WINDOWS_2000__X86_NtRaiseHardError(ctx, pref) \
	uint32_t UNUSED(pref##ErrorStatus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfParameters) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UnicodeStringParameterMask) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Parameters) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ValidResponseOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Response) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRaiseHardError(ctx, pref) \
	uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Response) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtRaiseHardError(ctx, pref) \
	const uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Response) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_2000__X86_NtReadFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReadFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtReadFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadFileScatter ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_2000__X86_NtReadFileScatter(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReadFileScatter(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtReadFileScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_2000__X86_NtReadRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReadRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtReadRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_2000__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtReadVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRegisterThreadTerminatePort ['HANDLE PortHandle']
#define locals_WINDOWS_2000__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtReleaseMutant ['HANDLE MutantHandle', 'PLONG PreviousCount']
#define locals_WINDOWS_2000__X86_NtReleaseMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReleaseMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtReleaseMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReleaseSemaphore ['HANDLE SemaphoreHandle', 'LONG ReleaseCount', 'PLONG PreviousCount']
#define locals_WINDOWS_2000__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##ReleaseCount) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtReleaseSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRemoveIoCompletion ['HANDLE IoCompletionHandle', 'PVOID *KeyContext', 'PVOID *ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_2000__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtRemoveIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtReplaceKey ['POBJECT_ATTRIBUTES NewFile', 'HANDLE TargetHandle', 'POBJECT_ATTRIBUTES OldFile']
#define locals_WINDOWS_2000__X86_NtReplaceKey(ctx, pref) \
	uint32_t UNUSED(pref##NewFile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OldFile) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReplaceKey(ctx, pref) \
	uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtReplaceKey(ctx, pref) \
	const uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_2000__X86_NtReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplyWaitReceivePort ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage']
#define locals_WINDOWS_2000__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtReplyWaitReceivePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtReplyWaitReceivePortEx ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_2000__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtReplyWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_2000__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtReplyWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage']
#define locals_WINDOWS_2000__X86_NtRequestPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRequestPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtRequestPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_2000__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtRequestWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_2000__X86_NtResetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtResetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtResetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtResetWriteWatch ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T RegionSize']
#define locals_WINDOWS_2000__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtResetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRestoreKey ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Flags']
#define locals_WINDOWS_2000__X86_NtRestoreKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtRestoreKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtRestoreKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_2000__X86_NtResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKey ['HANDLE KeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_2000__X86_NtSaveKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSaveKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSaveKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveMergedKeys ['HANDLE HighPrecedenceKeyHandle', 'HANDLE LowPrecedenceKeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_2000__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t UNUSED(pref##HighPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LowPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtSaveMergedKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSecureConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PSID RequiredServerSid', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_2000__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RequiredServerSid) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtSecureConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtSetIoCompletion ['HANDLE IoCompletionHandle', 'PVOID KeyContext', 'PVOID ApcContext', 'NTSTATUS IoStatus', 'ULONG_PTR IoStatusInformation']
#define locals_WINDOWS_2000__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusInformation) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtSetIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_2000__X86_NtSetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDefaultHardErrorPort ['HANDLE DefaultHardErrorPort']
#define locals_WINDOWS_2000__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t UNUSED(pref##DefaultHardErrorPort) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetDefaultLocale ['BOOLEAN UserProfile', 'LCID DefaultLocaleId']
#define locals_WINDOWS_2000__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDefaultUILanguage ['LANGID DefaultUILanguageId']
#define locals_WINDOWS_2000__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_2000__X86_NtSetEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_2000__X86_NtSetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_2000__X86_NtSetInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtSetInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationKey ['HANDLE KeyHandle', 'KEY_SET_INFORMATION_CLASS KeySetInformationClass', 'PVOID KeySetInformation', 'ULONG KeySetInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeySetInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeySetInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeySetInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength']
#define locals_WINDOWS_2000__X86_NtSetInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetIntervalProfile ['ULONG Interval', 'KPROFILE_SOURCE Source']
#define locals_WINDOWS_2000__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Source) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Source) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Source) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetLdtEntries ['ULONG Selector0', 'ULONG Entry0Low', 'ULONG Entry0Hi', 'ULONG Selector1', 'ULONG Entry1Low', 'ULONG Entry1Hi']
#define locals_WINDOWS_2000__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t UNUSED(pref##Selector0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Entry0Low) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Entry0Hi) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Selector1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Entry1Low) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Entry1Hi) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtSetLdtEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetLowWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_2000__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSetQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetSecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor']
#define locals_WINDOWS_2000__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtSetSecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PUNICODE_STRING VariableValue']
#define locals_WINDOWS_2000__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetSystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength']
#define locals_WINDOWS_2000__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtSetSystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemPowerState ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags']
#define locals_WINDOWS_2000__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtSetSystemPowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemTime ['PLARGE_INTEGER SystemTime', 'PLARGE_INTEGER PreviousTime']
#define locals_WINDOWS_2000__X86_NtSetSystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousTime) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetSystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetSystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetThreadExecutionState ['EXECUTION_STATE esFlags', 'PEXECUTION_STATE PreviousFlags']
#define locals_WINDOWS_2000__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t UNUSED(pref##esFlags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousFlags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSetThreadExecutionState(ctx, pref) \
	const uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetTimer ['HANDLE TimerHandle', 'PLARGE_INTEGER DueTime', 'PTIMER_APC_ROUTINE TimerApcRoutine', 'PVOID TimerContext', 'BOOLEAN WakeTimer', 'LONG Period', 'PBOOLEAN PreviousState']
#define locals_WINDOWS_2000__X86_NtSetTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DueTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##WakeTimer) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##Period) = *(int32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##Period) = *reinterpret_cast<int32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_2000__X86_NtSetTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##Period) = *reinterpret_cast<const int32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtSetTimerResolution ['ULONG DesiredTime', 'BOOLEAN SetResolution', 'PULONG ActualTime']
#define locals_WINDOWS_2000__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##DesiredTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SetResolution) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ActualTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtSetTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetUuidSeed ['PCHAR Seed']
#define locals_WINDOWS_2000__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtSetUuidSeed(ctx, pref) \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'ULONG TitleIndex', 'ULONG Type', 'PVOID Data', 'ULONG DataSize']
#define locals_WINDOWS_2000__X86_NtSetValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Data) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DataSize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtSetValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_2000__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtSetVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtShutdownSystem ['SHUTDOWN_ACTION Action']
#define locals_WINDOWS_2000__X86_NtShutdownSystem(ctx, pref) \
	uint32_t UNUSED(pref##Action) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtShutdownSystem(ctx, pref) \
	uint32_t &UNUSED(pref##Action) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtShutdownSystem(ctx, pref) \
	const uint32_t &UNUSED(pref##Action) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSignalAndWaitForSingleObject ['HANDLE SignalHandle', 'HANDLE WaitHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_2000__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##SignalHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WaitHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtStartProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_2000__X86_NtStartProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtStartProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtStartProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtStopProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_2000__X86_NtStopProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtStopProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtStopProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_2000__X86_NtSuspendThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSuspendThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtSuspendThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSystemDebugControl ['SYSDBG_COMMAND Command', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength', 'PULONG ReturnLength']
#define locals_WINDOWS_2000__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t UNUSED(pref##Command) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t &UNUSED(pref##Command) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtSystemDebugControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Command) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtTerminateJobObject ['HANDLE JobHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_2000__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtTerminateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateProcess ['HANDLE ProcessHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_2000__X86_NtTerminateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtTerminateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtTerminateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateThread ['HANDLE ThreadHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_2000__X86_NtTerminateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtTerminateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtTerminateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTestAlert ['']
#undef locals_WINDOWS_2000__X86_NtTestAlert
#if defined(__cplusplus)
#undef references_WINDOWS_2000__X86_NtTestAlert
#endif

// NTSTATUS NtUnloadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_2000__X86_NtUnloadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtUnloadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtUnloadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKey ['POBJECT_ATTRIBUTES TargetKey']
#define locals_WINDOWS_2000__X86_NtUnloadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtUnloadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtUnloadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnlockFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key']
#define locals_WINDOWS_2000__X86_NtUnlockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtUnlockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtUnlockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtUnlockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_2000__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_2000__X86_NtUnlockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnmapViewOfSection ['HANDLE ProcessHandle', 'PVOID BaseAddress']
#define locals_WINDOWS_2000__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtUnmapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtVdmControl ['VDMSERVICECLASS Service', 'PVOID ServiceData']
#define locals_WINDOWS_2000__X86_NtVdmControl(ctx, pref) \
	uint32_t UNUSED(pref##Service) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceData) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtVdmControl(ctx, pref) \
	uint32_t &UNUSED(pref##Service) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_2000__X86_NtVdmControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Service) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtWaitForMultipleObjects ['ULONG Count', 'HANDLE Handles[]', 'WAIT_TYPE WaitType', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_2000__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Handles) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WaitType) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtWaitForMultipleObjects(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtWaitForSingleObject ['HANDLE Handle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_2000__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_2000__X86_NtWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_2000__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_2000__X86_NtWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWriteFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_2000__X86_NtWriteFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWriteFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtWriteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteFileGather ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_2000__X86_NtWriteFileGather(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWriteFileGather(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_2000__X86_NtWriteFileGather(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_2000__X86_NtWriteRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWriteRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_2000__X86_NtWriteRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtWriteVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_2000__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_2000__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_2000__X86_NtWriteVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtYieldExecution ['']
#undef locals_WINDOWS_2000__X86_NtYieldExecution
#if defined(__cplusplus)
#undef references_WINDOWS_2000__X86_NtYieldExecution
#endif


/* ### windows_xpsp3:x86 ################################################ */
// NTSTATUS NtAcceptConnectPort ['PHANDLE PortHandle', 'PVOID PortContext', 'PPORT_MESSAGE ConnectionRequest', 'BOOLEAN AcceptConnection', 'PPORT_VIEW ServerView', 'PREMOTE_PORT_VIEW ClientView']
#define locals_WINDOWS_XPSP3__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AcceptConnection) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtAcceptConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAccessCheck ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheck(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheck(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtAccessCheckAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByType ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckByType(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultList ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[15]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[16]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[15]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[16]);
#define creferences_WINDOWS_XPSP3__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[16]);
#endif

// NTSTATUS NtAddAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_XPSP3__X86_NtAddAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAddAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtAddAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAddBootEntry ['PBOOT_ENTRY BootEntry', 'PULONG Id']
#define locals_WINDOWS_XPSP3__X86_NtAddBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAddBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtAddBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAdjustGroupsToken ['HANDLE TokenHandle', 'BOOLEAN ResetToDefault', 'PTOKEN_GROUPS NewState', 'ULONG BufferLength', 'PTOKEN_GROUPS PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResetToDefault) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtAdjustGroupsToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAdjustPrivilegesToken ['HANDLE TokenHandle', 'BOOLEAN DisableAllPrivileges', 'PTOKEN_PRIVILEGES NewState', 'ULONG BufferLength', 'PTOKEN_PRIVILEGES PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DisableAllPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtAdjustPrivilegesToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlertResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP3__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtAlertResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAlertThread ['HANDLE ThreadHandle']
#define locals_WINDOWS_XPSP3__X86_NtAlertThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAlertThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtAlertThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateLocallyUniqueId ['PLUID Luid']
#define locals_WINDOWS_XPSP3__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t UNUSED(pref##Luid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	const uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP3__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAllocateUuids ['PULARGE_INTEGER Time', 'PULONG Range', 'PULONG Sequence', 'PCHAR Seed']
#define locals_WINDOWS_XPSP3__X86_NtAllocateUuids(ctx, pref) \
	uint32_t UNUSED(pref##Time) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Range) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Sequence) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAllocateUuids(ctx, pref) \
	uint32_t &UNUSED(pref##Time) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Range) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtAllocateUuids(ctx, pref) \
	const uint32_t &UNUSED(pref##Time) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Range) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtAllocateVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'PSIZE_T RegionSize', 'ULONG AllocationType', 'ULONG Protect']
#define locals_WINDOWS_XPSP3__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Protect) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtAllocateVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAreMappedFilesTheSame ['PVOID File1MappedAsAnImage', 'PVOID File2MappedAsFile']
#define locals_WINDOWS_XPSP3__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t UNUSED(pref##File1MappedAsAnImage) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##File2MappedAsFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtAreMappedFilesTheSame(ctx, pref) \
	const uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAssignProcessToJobObject ['HANDLE JobHandle', 'HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP3__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtAssignProcessToJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCallbackReturn ['PVOID OutputBuffer', 'ULONG OutputLength', 'NTSTATUS Status']
#define locals_WINDOWS_XPSP3__X86_NtCallbackReturn(ctx, pref) \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputLength) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Status) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCallbackReturn(ctx, pref) \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Status) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCallbackReturn(ctx, pref) \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Status) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelIoFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_XPSP3__X86_NtCancelIoFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCancelIoFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtCancelIoFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCancelTimer ['HANDLE TimerHandle', 'PBOOLEAN CurrentState']
#define locals_WINDOWS_XPSP3__X86_NtCancelTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##CurrentState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCancelTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtCancelTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtClearEvent ['HANDLE EventHandle']
#define locals_WINDOWS_XPSP3__X86_NtClearEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtClearEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtClearEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtClose ['HANDLE Handle']
#define locals_WINDOWS_XPSP3__X86_NtClose(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtClose(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtClose(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCloseObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompactKeys ['ULONG Count', 'HANDLE KeyArray[]']
#define locals_WINDOWS_XPSP3__X86_NtCompactKeys(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyArray) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCompactKeys(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtCompactKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCompareTokens ['HANDLE FirstTokenHandle', 'HANDLE SecondTokenHandle', 'PBOOLEAN Equal']
#define locals_WINDOWS_XPSP3__X86_NtCompareTokens(ctx, pref) \
	uint32_t UNUSED(pref##FirstTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecondTokenHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Equal) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCompareTokens(ctx, pref) \
	uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCompareTokens(ctx, pref) \
	const uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompleteConnectPort ['HANDLE PortHandle']
#define locals_WINDOWS_XPSP3__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtCompleteConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCompressKey ['HANDLE Key']
#define locals_WINDOWS_XPSP3__X86_NtCompressKey(ctx, pref) \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCompressKey(ctx, pref) \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtCompressKey(ctx, pref) \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP3__X86_NtConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtContinue ['PCONTEXT ContextRecord', 'BOOLEAN TestAlert']
#define locals_WINDOWS_XPSP3__X86_NtContinue(ctx, pref) \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TestAlert) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtContinue(ctx, pref) \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCreateDebugObject ['PHANDLE DebugObjectHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'EVENT_TYPE EventType', 'BOOLEAN InitialState']
#define locals_WINDOWS_XPSP3__X86_NtCreateEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InitialState) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtCreateEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER AllocationSize', 'ULONG FileAttributes', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'PVOID EaBuffer', 'ULONG EaLength']
#define locals_WINDOWS_XPSP3__X86_NtCreateFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##EaBuffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##EaLength) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Count']
#define locals_WINDOWS_XPSP3__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtCreateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateJobSet ['ULONG NumJob', 'PJOB_SET_ARRAY UserJobSet', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtCreateJobSet(ctx, pref) \
	uint32_t UNUSED(pref##NumJob) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##UserJobSet) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateJobSet(ctx, pref) \
	uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateJobSet(ctx, pref) \
	const uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG TitleIndex', 'PUNICODE_STRING Class', 'ULONG CreateOptions', 'PULONG Disposition']
#define locals_WINDOWS_XPSP3__X86_NtCreateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Class) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Disposition) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Class) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Class) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateMailslotFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CreateOptions', 'ULONG MailslotQuota', 'ULONG MaximumMessageSize', 'PLARGE_INTEGER ReadTimeout']
#define locals_WINDOWS_XPSP3__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MailslotQuota) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaximumMessageSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ReadTimeout) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateMailslotFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN InitialOwner']
#define locals_WINDOWS_XPSP3__X86_NtCreateMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##InitialOwner) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateNamedPipeFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'ULONG NamedPipeType', 'ULONG ReadMode', 'ULONG CompletionMode', 'ULONG MaximumInstances', 'ULONG InboundQuota', 'ULONG OutboundQuota', 'PLARGE_INTEGER DefaultTimeout']
#define locals_WINDOWS_XPSP3__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##NamedPipeType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReadMode) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##CompletionMode) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##MaximumInstances) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##InboundQuota) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##OutboundQuota) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##DefaultTimeout) = *(uint32_t *)((ctx)->args[13]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[13]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateNamedPipeFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]);
#endif

// NTSTATUS NtCreatePagingFile ['PUNICODE_STRING PageFileName', 'PLARGE_INTEGER MinimumSize', 'PLARGE_INTEGER MaximumSize', 'ULONG Priority']
#define locals_WINDOWS_XPSP3__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t UNUSED(pref##PageFileName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumSize) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Priority) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreatePagingFile(ctx, pref) \
	const uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreatePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_XPSP3__X86_NtCreatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtCreatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'BOOLEAN InheritObjectTable', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort']
#define locals_WINDOWS_XPSP3__X86_NtCreateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InheritObjectTable) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateProcessEx ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'ULONG Flags', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort', 'ULONG JobMemberLevel']
#define locals_WINDOWS_XPSP3__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##JobMemberLevel) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateProcessEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateProfile ['PHANDLE ProfileHandle', 'HANDLE Process', 'PVOID RangeBase', 'SIZE_T RangeSize', 'ULONG BucketSize', 'PULONG Buffer', 'ULONG BufferSize', 'KPROFILE_SOURCE ProfileSource', 'KAFFINITY Affinity']
#define locals_WINDOWS_XPSP3__X86_NtCreateProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Process) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RangeBase) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RangeSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BucketSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Affinity) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Process) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Process) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PLARGE_INTEGER MaximumSize', 'ULONG SectionPageProtection', 'ULONG AllocationAttributes', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP3__X86_NtCreateSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SectionPageProtection) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AllocationAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LONG InitialCount', 'LONG MaximumCount']
#define locals_WINDOWS_XPSP3__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##InitialCount) = *(int32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##MaximumCount) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LinkTarget']
#define locals_WINDOWS_XPSP3__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ProcessHandle', 'PCLIENT_ID ClientId', 'PCONTEXT ThreadContext', 'PINITIAL_TEB InitialTeb', 'BOOLEAN CreateSuspended']
#define locals_WINDOWS_XPSP3__X86_NtCreateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InitialTeb) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateSuspended) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TIMER_TYPE TimerType']
#define locals_WINDOWS_XPSP3__X86_NtCreateTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateToken ['PHANDLE TokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TOKEN_TYPE TokenType', 'PLUID AuthenticationId', 'PLARGE_INTEGER ExpirationTime', 'PTOKEN_USER User', 'PTOKEN_GROUPS Groups', 'PTOKEN_PRIVILEGES Privileges', 'PTOKEN_OWNER Owner', 'PTOKEN_PRIMARY_GROUP PrimaryGroup', 'PTOKEN_DEFAULT_DACL DefaultDacl', 'PTOKEN_SOURCE TokenSource']
#define locals_WINDOWS_XPSP3__X86_NtCreateToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AuthenticationId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ExpirationTime) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##User) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Groups) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Owner) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##PrimaryGroup) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##DefaultDacl) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##TokenSource) = *(uint32_t *)((ctx)->args[12]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##User) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<uint32_t *>((ctx)->args[12]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##User) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]);
#endif

// NTSTATUS NtCreateWaitablePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_XPSP3__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateWaitablePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtDebugActiveProcess ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_XPSP3__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtDebugActiveProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDebugContinue ['HANDLE DebugObjectHandle', 'PCLIENT_ID ClientId', 'NTSTATUS ContinueStatus']
#define locals_WINDOWS_XPSP3__X86_NtDebugContinue(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContinueStatus) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDebugContinue(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtDebugContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDelayExecution ['BOOLEAN Alertable', 'PLARGE_INTEGER DelayInterval']
#define locals_WINDOWS_XPSP3__X86_NtDelayExecution(ctx, pref) \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DelayInterval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDelayExecution(ctx, pref) \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtDelayExecution(ctx, pref) \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeleteAtom ['RTL_ATOM Atom']
#define locals_WINDOWS_XPSP3__X86_NtDeleteAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteBootEntry ['ULONG Id']
#define locals_WINDOWS_XPSP3__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteFile ['POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtDeleteFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP3__X86_NtDeleteKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDeleteValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName']
#define locals_WINDOWS_XPSP3__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtDeleteValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeviceIoControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP3__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP3__X86_NtDeviceIoControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtDisplayString ['PUNICODE_STRING String']
#define locals_WINDOWS_XPSP3__X86_NtDisplayString(ctx, pref) \
	uint32_t UNUSED(pref##String) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDisplayString(ctx, pref) \
	uint32_t &UNUSED(pref##String) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtDisplayString(ctx, pref) \
	const uint32_t &UNUSED(pref##String) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDuplicateObject ['HANDLE SourceProcessHandle', 'HANDLE SourceHandle', 'HANDLE TargetProcessHandle', 'PHANDLE TargetHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Options']
#define locals_WINDOWS_XPSP3__X86_NtDuplicateObject(ctx, pref) \
	uint32_t UNUSED(pref##SourceProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TargetProcessHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Options) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDuplicateObject(ctx, pref) \
	uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Options) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtDuplicateObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Options) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtDuplicateToken ['HANDLE ExistingTokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN EffectiveOnly', 'TOKEN_TYPE TokenType', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtDuplicateToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EffectiveOnly) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtDuplicateToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtDuplicateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateBootEntries ['PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_XPSP3__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtEnumerateBootEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtEnumerateKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP3__X86_NtEnumerateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtEnumerateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtEnumerateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateSystemEnvironmentValuesEx ['ULONG InformationClass', 'PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_XPSP3__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtEnumerateValueKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP3__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtEnumerateValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtExtendSection ['HANDLE SectionHandle', 'PLARGE_INTEGER NewSectionSize']
#define locals_WINDOWS_XPSP3__X86_NtExtendSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewSectionSize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtExtendSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtExtendSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFilterToken ['HANDLE ExistingTokenHandle', 'ULONG Flags', 'PTOKEN_GROUPS SidsToDisable', 'PTOKEN_PRIVILEGES PrivilegesToDelete', 'PTOKEN_GROUPS RestrictedSids', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtFilterToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SidsToDisable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##PrivilegesToDelete) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestrictedSids) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFilterToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtFilterToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtFindAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_XPSP3__X86_NtFindAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFindAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtFindAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushBuffersFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_XPSP3__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtFlushBuffersFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFlushInstructionCache ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T Length']
#define locals_WINDOWS_XPSP3__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtFlushInstructionCache(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP3__X86_NtFlushKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFlushKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtFlushKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtFlushVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'PIO_STATUS_BLOCK IoStatus']
#define locals_WINDOWS_XPSP3__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtFlushVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFlushWriteBuffer ['']
#undef locals_WINDOWS_XPSP3__X86_NtFlushWriteBuffer
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP3__X86_NtFlushWriteBuffer
#endif

// NTSTATUS NtFreeUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP3__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtFreeUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFreeVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG FreeType']
#define locals_WINDOWS_XPSP3__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##FreeType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtFreeVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFsControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP3__X86_NtFsControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtFsControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP3__X86_NtFsControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtGetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_XPSP3__X86_NtGetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtGetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtGetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetDevicePowerState ['HANDLE Device', 'DEVICE_POWER_STATE *State']
#define locals_WINDOWS_XPSP3__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t UNUSED(pref##Device) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t &UNUSED(pref##Device) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtGetDevicePowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##Device) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetPlugPlayEvent ['HANDLE EventHandle', 'PVOID Context', 'PPLUGPLAY_EVENT_BLOCK EventBlock', 'ULONG EventBufferSize']
#define locals_WINDOWS_XPSP3__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventBlock) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventBufferSize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtGetPlugPlayEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtGetWriteWatch ['HANDLE ProcessHandle', 'ULONG Flags', 'PVOID BaseAddress', 'SIZE_T RegionSize', 'PVOID *UserAddressArray', 'PULONG_PTR EntriesInUserAddressArray', 'PULONG Granularity']
#define locals_WINDOWS_XPSP3__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##UserAddressArray) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EntriesInUserAddressArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Granularity) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtGetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtImpersonateAnonymousToken ['HANDLE ThreadHandle']
#define locals_WINDOWS_XPSP3__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtImpersonateAnonymousToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtImpersonateClientOfPort ['HANDLE PortHandle', 'PPORT_MESSAGE Message']
#define locals_WINDOWS_XPSP3__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtImpersonateClientOfPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtImpersonateThread ['HANDLE ServerThreadHandle', 'HANDLE ClientThreadHandle', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos']
#define locals_WINDOWS_XPSP3__X86_NtImpersonateThread(ctx, pref) \
	uint32_t UNUSED(pref##ServerThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtImpersonateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtImpersonateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtInitializeRegistry ['USHORT BootCondition']
#define locals_WINDOWS_XPSP3__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t UNUSED(pref##BootCondition) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtInitializeRegistry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtInitiatePowerAction ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP3__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtInitiatePowerAction(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtIsProcessInJob ['HANDLE ProcessHandle', 'HANDLE JobHandle']
#define locals_WINDOWS_XPSP3__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtIsProcessInJob(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// BOOLEAN NtIsSystemResumeAutomatic ['']
#undef locals_WINDOWS_XPSP3__X86_NtIsSystemResumeAutomatic
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP3__X86_NtIsSystemResumeAutomatic
#endif

// NTSTATUS NtListenPort ['HANDLE PortHandle', 'PPORT_MESSAGE ConnectionRequest']
#define locals_WINDOWS_XPSP3__X86_NtListenPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtListenPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtListenPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_XPSP3__X86_NtLoadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLoadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtLoadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLoadKey ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile']
#define locals_WINDOWS_XPSP3__X86_NtLoadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLoadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtLoadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadKey2 ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtLoadKey2(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLoadKey2(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtLoadKey2(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtLockFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key', 'BOOLEAN FailImmediately', 'BOOLEAN ExclusiveLock']
#define locals_WINDOWS_XPSP3__X86_NtLockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##FailImmediately) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ExclusiveLock) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP3__X86_NtLockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtLockProductActivationKeys ['ULONG *pPrivateVer', 'ULONG *pSafeMode']
#define locals_WINDOWS_XPSP3__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t UNUSED(pref##pPrivateVer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pSafeMode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtLockProductActivationKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLockRegistryKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP3__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtLockRegistryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_XPSP3__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtLockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtMakePermanentObject ['HANDLE Handle']
#define locals_WINDOWS_XPSP3__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtMakePermanentObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMakeTemporaryObject ['HANDLE Handle']
#define locals_WINDOWS_XPSP3__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtMakeTemporaryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMapUserPhysicalPages ['PVOID VirtualAddress', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP3__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddress) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtMapUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapUserPhysicalPagesScatter ['PVOID *VirtualAddresses', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP3__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddresses) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapViewOfSection ['HANDLE SectionHandle', 'HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'SIZE_T CommitSize', 'PLARGE_INTEGER SectionOffset', 'PSIZE_T ViewSize', 'SECTION_INHERIT InheritDisposition', 'ULONG AllocationType', 'WIN32_PROTECTION_MASK Win32Protect']
#define locals_WINDOWS_XPSP3__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CommitSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ViewSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InheritDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Win32Protect) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP3__X86_NtMapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtModifyBootEntry ['PBOOT_ENTRY BootEntry']
#define locals_WINDOWS_XPSP3__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtModifyBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtNotifyChangeDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'ULONG CompletionFilter', 'BOOLEAN WatchTree']
#define locals_WINDOWS_XPSP3__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtNotifyChangeKey ['HANDLE KeyHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP3__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP3__X86_NtNotifyChangeKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtNotifyChangeMultipleKeys ['HANDLE MasterKeyHandle', 'ULONG Count', 'OBJECT_ATTRIBUTES SlaveObjects[]', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP3__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t UNUSED(pref##MasterKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SlaveObjects) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_XPSP3__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG OpenOptions']
#define locals_WINDOWS_XPSP3__X86_NtOpenFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtOpenIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'ACCESS_MASK GrantedAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN ObjectCreation', 'BOOLEAN AccessGranted', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP3__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_XPSP3__X86_NtOpenProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenProcessToken ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenProcessToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenProcessTokenEx ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenProcessTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_XPSP3__X86_NtOpenThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadToken ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenThreadToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadTokenEx ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP3__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenThreadTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPlugPlayControl ['PLUGPLAY_CONTROL_CLASS PnPControlClass', 'PVOID PnPControlData', 'ULONG PnPControlDataLength']
#define locals_WINDOWS_XPSP3__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t UNUSED(pref##PnPControlClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PnPControlData) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PnPControlDataLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtPlugPlayControl(ctx, pref) \
	const uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPowerInformation ['POWER_INFORMATION_LEVEL InformationLevel', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP3__X86_NtPowerInformation(ctx, pref) \
	uint32_t UNUSED(pref##InformationLevel) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPowerInformation(ctx, pref) \
	uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtPowerInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrivilegeCheck ['HANDLE ClientToken', 'PPRIVILEGE_SET RequiredPrivileges', 'PBOOLEAN Result']
#define locals_WINDOWS_XPSP3__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequiredPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtPrivilegeCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPrivilegeObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_XPSP3__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtPrivilegedServiceAuditAlarm ['PUNICODE_STRING SubsystemName', 'PUNICODE_STRING ServiceName', 'HANDLE ClientToken', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_XPSP3__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtProtectVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'WIN32_PROTECTION_MASK NewProtectWin32', 'PULONG OldProtect']
#define locals_WINDOWS_XPSP3__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##NewProtectWin32) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OldProtect) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtProtectVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPulseEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP3__X86_NtPulseEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtPulseEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtPulseEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_BASIC_INFORMATION FileInformation']
#define locals_WINDOWS_XPSP3__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootEntryOrder ['PULONG Ids', 'PULONG Count']
#define locals_WINDOWS_XPSP3__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootOptions ['PBOOT_OPTIONS BootOptions', 'PULONG BootOptionsLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BootOptionsLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDebugFilterState ['ULONG ComponentId', 'ULONG Level']
#define locals_WINDOWS_XPSP3__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultLocale ['BOOLEAN UserProfile', 'PLCID DefaultLocaleId']
#define locals_WINDOWS_XPSP3__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultUILanguage ['LANGID *DefaultUILanguageId']
#define locals_WINDOWS_XPSP3__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass', 'BOOLEAN ReturnSingleEntry', 'PUNICODE_STRING FileName', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP3__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##FileName) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtQueryDirectoryObject ['HANDLE DirectoryHandle', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'BOOLEAN RestartScan', 'PULONG Context', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtQueryEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID EaList', 'ULONG EaListLength', 'PULONG EaIndex', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP3__X86_NtQueryEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EaList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##EaListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##EaIndex) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQueryEvent ['HANDLE EventHandle', 'EVENT_INFORMATION_CLASS EventInformationClass', 'PVOID EventInformation', 'ULONG EventInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EventInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryFullAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_NETWORK_OPEN_INFORMATION FileInformation']
#define locals_WINDOWS_XPSP3__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryFullAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryInformationAtom ['RTL_ATOM Atom', 'ATOM_INFORMATION_CLASS InformationClass', 'PVOID AtomInformation', 'ULONG AtomInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##AtomInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AtomInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationPort ['HANDLE PortHandle', 'PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInstallUILanguage ['LANGID *InstallUILanguageId']
#define locals_WINDOWS_XPSP3__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##InstallUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryInstallUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryIntervalProfile ['KPROFILE_SOURCE ProfileSource', 'PULONG Interval']
#define locals_WINDOWS_XPSP3__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryIoCompletion ['HANDLE IoCompletionHandle', 'IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass', 'PVOID IoCompletionInformation', 'ULONG IoCompletionInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoCompletionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoCompletionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryKey ['HANDLE KeyHandle', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryMultipleValueKey ['HANDLE KeyHandle', 'PKEY_VALUE_ENTRY ValueEntries', 'ULONG EntryCount', 'PVOID ValueBuffer', 'PULONG BufferLength', 'PULONG RequiredBufferLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueEntries) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EntryCount) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##RequiredBufferLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryMultipleValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryMutant ['HANDLE MutantHandle', 'MUTANT_INFORMATION_CLASS MutantInformationClass', 'PVOID MutantInformation', 'ULONG MutantInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MutantInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MutantInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MutantInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryOpenSubKeys ['POBJECT_ATTRIBUTES TargetKey', 'PULONG HandleCount']
#define locals_WINDOWS_XPSP3__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryOpenSubKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryPerformanceCounter ['PLARGE_INTEGER PerformanceCounter', 'PLARGE_INTEGER PerformanceFrequency']
#define locals_WINDOWS_XPSP3__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t UNUSED(pref##PerformanceCounter) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PerformanceFrequency) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryPerformanceCounter(ctx, pref) \
	const uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID SidList', 'ULONG SidListLength', 'PULONG StartSid', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP3__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SidList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##SidListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##StartSid) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQuerySection ['HANDLE SectionHandle', 'SECTION_INFORMATION_CLASS SectionInformationClass', 'PVOID SectionInformation', 'SIZE_T SectionInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQuerySection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SectionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ULONG Length', 'PULONG LengthNeeded']
#define locals_WINDOWS_XPSP3__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##LengthNeeded) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySemaphore ['HANDLE SemaphoreHandle', 'SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass', 'PVOID SemaphoreInformation', 'ULONG SemaphoreInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SemaphoreInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SemaphoreInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SemaphoreInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySymbolicLinkObject ['HANDLE LinkHandle', 'PUNICODE_STRING LinkTarget', 'PULONG ReturnedLength']
#define locals_WINDOWS_XPSP3__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReturnedLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PWSTR VariableValue', 'USHORT ValueLength', 'PUSHORT ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'PULONG ValueLength', 'PULONG Attributes']
#define locals_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemTime ['PLARGE_INTEGER SystemTime']
#define locals_WINDOWS_XPSP3__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtQuerySystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryTimer ['HANDLE TimerHandle', 'TIMER_INFORMATION_CLASS TimerInformationClass', 'PVOID TimerInformation', 'ULONG TimerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TimerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryTimerResolution ['PULONG MaximumTime', 'PULONG MinimumTime', 'PULONG CurrentTime']
#define locals_WINDOWS_XPSP3__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##MaximumTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##CurrentTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQueryValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'MEMORY_INFORMATION_CLASS MemoryInformationClass', 'PVOID MemoryInformation', 'SIZE_T MemoryInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MemoryInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MemoryInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MemoryInformationLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_XPSP3__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueryVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueueApcThread ['HANDLE ThreadHandle', 'PPS_APC_ROUTINE ApcRoutine', 'PVOID ApcArgument1', 'PVOID ApcArgument2', 'PVOID ApcArgument3']
#define locals_WINDOWS_XPSP3__X86_NtQueueApcThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcArgument1) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcArgument2) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcArgument3) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtQueueApcThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtQueueApcThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRaiseException ['PEXCEPTION_RECORD ExceptionRecord', 'PCONTEXT ContextRecord', 'BOOLEAN FirstChance']
#define locals_WINDOWS_XPSP3__X86_NtRaiseException(ctx, pref) \
	uint32_t UNUSED(pref##ExceptionRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FirstChance) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRaiseException(ctx, pref) \
	uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtRaiseException(ctx, pref) \
	const uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRaiseHardError ['NTSTATUS ErrorStatus', 'ULONG NumberOfParameters', 'ULONG UnicodeStringParameterMask', 'PULONG_PTR Parameters', 'ULONG ValidResponseOptions', 'PULONG Response']
#define locals_WINDOWS_XPSP3__X86_NtRaiseHardError(ctx, pref) \
	uint32_t UNUSED(pref##ErrorStatus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfParameters) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UnicodeStringParameterMask) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Parameters) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ValidResponseOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Response) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRaiseHardError(ctx, pref) \
	uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Response) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtRaiseHardError(ctx, pref) \
	const uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Response) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP3__X86_NtReadFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReadFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtReadFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadFileScatter ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP3__X86_NtReadFileScatter(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReadFileScatter(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtReadFileScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_XPSP3__X86_NtReadRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReadRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtReadRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_XPSP3__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtReadVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRegisterThreadTerminatePort ['HANDLE PortHandle']
#define locals_WINDOWS_XPSP3__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtReleaseMutant ['HANDLE MutantHandle', 'PLONG PreviousCount']
#define locals_WINDOWS_XPSP3__X86_NtReleaseMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReleaseMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtReleaseMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReleaseSemaphore ['HANDLE SemaphoreHandle', 'LONG ReleaseCount', 'PLONG PreviousCount']
#define locals_WINDOWS_XPSP3__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##ReleaseCount) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtReleaseSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRemoveIoCompletion ['HANDLE IoCompletionHandle', 'PVOID *KeyContext', 'PVOID *ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtRemoveIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRemoveProcessDebug ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_XPSP3__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtRemoveProcessDebug(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRenameKey ['HANDLE KeyHandle', 'PUNICODE_STRING NewName']
#define locals_WINDOWS_XPSP3__X86_NtRenameKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRenameKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtRenameKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplaceKey ['POBJECT_ATTRIBUTES NewFile', 'HANDLE TargetHandle', 'POBJECT_ATTRIBUTES OldFile']
#define locals_WINDOWS_XPSP3__X86_NtReplaceKey(ctx, pref) \
	uint32_t UNUSED(pref##NewFile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OldFile) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReplaceKey(ctx, pref) \
	uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtReplaceKey(ctx, pref) \
	const uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP3__X86_NtReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplyWaitReceivePort ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage']
#define locals_WINDOWS_XPSP3__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtReplyWaitReceivePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtReplyWaitReceivePortEx ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtReplyWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP3__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtReplyWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage']
#define locals_WINDOWS_XPSP3__X86_NtRequestPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRequestPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtRequestPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP3__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtRequestWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP3__X86_NtResetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtResetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtResetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtResetWriteWatch ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T RegionSize']
#define locals_WINDOWS_XPSP3__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtResetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRestoreKey ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtRestoreKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtRestoreKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtRestoreKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResumeProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP3__X86_NtResumeProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtResumeProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtResumeProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP3__X86_NtResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKey ['HANDLE KeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP3__X86_NtSaveKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSaveKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSaveKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKeyEx ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Format']
#define locals_WINDOWS_XPSP3__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Format) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Format) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSaveKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Format) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSaveMergedKeys ['HANDLE HighPrecedenceKeyHandle', 'HANDLE LowPrecedenceKeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP3__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t UNUSED(pref##HighPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LowPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSaveMergedKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSecureConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PSID RequiredServerSid', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RequiredServerSid) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtSecureConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtSetBootEntryOrder ['PULONG Ids', 'ULONG Count']
#define locals_WINDOWS_XPSP3__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetBootOptions ['PBOOT_OPTIONS BootOptions', 'ULONG FieldsToChange']
#define locals_WINDOWS_XPSP3__X86_NtSetBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FieldsToChange) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_XPSP3__X86_NtSetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDebugFilterState ['ULONG ComponentId', 'ULONG Level', 'BOOLEAN State']
#define locals_WINDOWS_XPSP3__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSetDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetDefaultHardErrorPort ['HANDLE DefaultHardErrorPort']
#define locals_WINDOWS_XPSP3__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t UNUSED(pref##DefaultHardErrorPort) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetDefaultLocale ['BOOLEAN UserProfile', 'LCID DefaultLocaleId']
#define locals_WINDOWS_XPSP3__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDefaultUILanguage ['LANGID DefaultUILanguageId']
#define locals_WINDOWS_XPSP3__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_XPSP3__X86_NtSetEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP3__X86_NtSetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetEventBoostPriority ['HANDLE EventHandle']
#define locals_WINDOWS_XPSP3__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetEventBoostPriority(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetInformationDebugObject ['HANDLE DebugObjectHandle', 'DEBUGOBJECTINFOCLASS DebugObjectInformationClass', 'PVOID DebugInformation', 'ULONG DebugInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DebugInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DebugInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationKey ['HANDLE KeyHandle', 'KEY_SET_INFORMATION_CLASS KeySetInformationClass', 'PVOID KeySetInformation', 'ULONG KeySetInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeySetInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeySetInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeySetInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetIntervalProfile ['ULONG Interval', 'KPROFILE_SOURCE Source']
#define locals_WINDOWS_XPSP3__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Source) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Source) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Source) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetIoCompletion ['HANDLE IoCompletionHandle', 'PVOID KeyContext', 'PVOID ApcContext', 'NTSTATUS IoStatus', 'ULONG_PTR IoStatusInformation']
#define locals_WINDOWS_XPSP3__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusInformation) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtSetIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetLdtEntries ['ULONG Selector0', 'ULONG Entry0Low', 'ULONG Entry0Hi', 'ULONG Selector1', 'ULONG Entry1Low', 'ULONG Entry1Hi']
#define locals_WINDOWS_XPSP3__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t UNUSED(pref##Selector0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Entry0Low) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Entry0Hi) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Selector1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Entry1Low) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Entry1Hi) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtSetLdtEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetLowWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_XPSP3__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSetQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetSecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor']
#define locals_WINDOWS_XPSP3__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PUNICODE_STRING VariableValue']
#define locals_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetSystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'ULONG ValueLength', 'ULONG Attributes']
#define locals_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetSystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength']
#define locals_WINDOWS_XPSP3__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemPowerState ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSystemPowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemTime ['PLARGE_INTEGER SystemTime', 'PLARGE_INTEGER PreviousTime']
#define locals_WINDOWS_XPSP3__X86_NtSetSystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousTime) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetSystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetSystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetThreadExecutionState ['EXECUTION_STATE esFlags', 'PEXECUTION_STATE PreviousFlags']
#define locals_WINDOWS_XPSP3__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t UNUSED(pref##esFlags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousFlags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSetThreadExecutionState(ctx, pref) \
	const uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetTimer ['HANDLE TimerHandle', 'PLARGE_INTEGER DueTime', 'PTIMER_APC_ROUTINE TimerApcRoutine', 'PVOID TimerContext', 'BOOLEAN WakeTimer', 'LONG Period', 'PBOOLEAN PreviousState']
#define locals_WINDOWS_XPSP3__X86_NtSetTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DueTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##WakeTimer) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##Period) = *(int32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##Period) = *reinterpret_cast<int32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP3__X86_NtSetTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##Period) = *reinterpret_cast<const int32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtSetTimerResolution ['ULONG DesiredTime', 'BOOLEAN SetResolution', 'PULONG ActualTime']
#define locals_WINDOWS_XPSP3__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##DesiredTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SetResolution) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ActualTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtSetTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetUuidSeed ['PCHAR Seed']
#define locals_WINDOWS_XPSP3__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSetUuidSeed(ctx, pref) \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'ULONG TitleIndex', 'ULONG Type', 'PVOID Data', 'ULONG DataSize']
#define locals_WINDOWS_XPSP3__X86_NtSetValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Data) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DataSize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtSetValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_XPSP3__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtSetVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtShutdownSystem ['SHUTDOWN_ACTION Action']
#define locals_WINDOWS_XPSP3__X86_NtShutdownSystem(ctx, pref) \
	uint32_t UNUSED(pref##Action) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtShutdownSystem(ctx, pref) \
	uint32_t &UNUSED(pref##Action) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtShutdownSystem(ctx, pref) \
	const uint32_t &UNUSED(pref##Action) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSignalAndWaitForSingleObject ['HANDLE SignalHandle', 'HANDLE WaitHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##SignalHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WaitHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtStartProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_XPSP3__X86_NtStartProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtStartProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtStartProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtStopProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_XPSP3__X86_NtStopProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtStopProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtStopProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP3__X86_NtSuspendProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSuspendProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtSuspendProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP3__X86_NtSuspendThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSuspendThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtSuspendThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSystemDebugControl ['SYSDBG_COMMAND Command', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP3__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t UNUSED(pref##Command) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t &UNUSED(pref##Command) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtSystemDebugControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Command) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtTerminateJobObject ['HANDLE JobHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP3__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtTerminateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateProcess ['HANDLE ProcessHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP3__X86_NtTerminateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtTerminateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtTerminateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateThread ['HANDLE ThreadHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP3__X86_NtTerminateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtTerminateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtTerminateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTestAlert ['']
#undef locals_WINDOWS_XPSP3__X86_NtTestAlert
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP3__X86_NtTestAlert
#endif

// NTSTATUS NtTraceEvent ['HANDLE TraceHandle', 'ULONG Flags', 'ULONG FieldSize', 'PVOID Fields']
#define locals_WINDOWS_XPSP3__X86_NtTraceEvent(ctx, pref) \
	uint32_t UNUSED(pref##TraceHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FieldSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Fields) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtTraceEvent(ctx, pref) \
	uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtTraceEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtTranslateFilePath ['PFILE_PATH InputFilePath', 'ULONG OutputType', 'PFILE_PATH OutputFilePath', 'PULONG OutputFilePathLength']
#define locals_WINDOWS_XPSP3__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t UNUSED(pref##InputFilePath) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputType) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OutputFilePath) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputFilePathLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtTranslateFilePath(ctx, pref) \
	const uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnloadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_XPSP3__X86_NtUnloadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnloadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtUnloadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKey ['POBJECT_ATTRIBUTES TargetKey']
#define locals_WINDOWS_XPSP3__X86_NtUnloadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnloadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtUnloadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKeyEx ['POBJECT_ATTRIBUTES TargetKey', 'HANDLE Event']
#define locals_WINDOWS_XPSP3__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtUnloadKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtUnlockFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key']
#define locals_WINDOWS_XPSP3__X86_NtUnlockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnlockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtUnlockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtUnlockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_XPSP3__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtUnlockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnmapViewOfSection ['HANDLE ProcessHandle', 'PVOID BaseAddress']
#define locals_WINDOWS_XPSP3__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtUnmapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtVdmControl ['VDMSERVICECLASS Service', 'PVOID ServiceData']
#define locals_WINDOWS_XPSP3__X86_NtVdmControl(ctx, pref) \
	uint32_t UNUSED(pref##Service) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceData) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtVdmControl(ctx, pref) \
	uint32_t &UNUSED(pref##Service) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP3__X86_NtVdmControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Service) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtWaitForDebugEvent ['HANDLE DebugObjectHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout', 'PDBGUI_WAIT_STATE_CHANGE WaitStateChange']
#define locals_WINDOWS_XPSP3__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##WaitStateChange) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitForDebugEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForMultipleObjects ['ULONG Count', 'HANDLE Handles[]', 'WAIT_TYPE WaitType', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Handles) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WaitType) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitForMultipleObjects(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtWaitForSingleObject ['HANDLE Handle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP3__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWriteFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP3__X86_NtWriteFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWriteFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtWriteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteFileGather ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP3__X86_NtWriteFileGather(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWriteFileGather(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP3__X86_NtWriteFileGather(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_XPSP3__X86_NtWriteRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWriteRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP3__X86_NtWriteRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtWriteVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_XPSP3__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP3__X86_NtWriteVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtYieldExecution ['']
#undef locals_WINDOWS_XPSP3__X86_NtYieldExecution
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP3__X86_NtYieldExecution
#endif

// NTSTATUS NtCreateKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_XPSP3__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtCreateKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP3__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP3__X86_NtOpenKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReleaseKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtReleaseKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP3__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP3__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP3__X86_NtWaitForKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQueryPortInformationProcess ['']
#undef locals_WINDOWS_XPSP3__X86_NtQueryPortInformationProcess
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP3__X86_NtQueryPortInformationProcess
#endif


/* ### windows_xpsp2:x86 ################################################ */
// NTSTATUS NtAcceptConnectPort ['PHANDLE PortHandle', 'PVOID PortContext', 'PPORT_MESSAGE ConnectionRequest', 'BOOLEAN AcceptConnection', 'PPORT_VIEW ServerView', 'PREMOTE_PORT_VIEW ClientView']
#define locals_WINDOWS_XPSP2__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AcceptConnection) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtAcceptConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAccessCheck ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheck(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheck(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtAccessCheckAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByType ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckByType(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultList ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[15]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[16]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[15]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[16]);
#define creferences_WINDOWS_XPSP2__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[16]);
#endif

// NTSTATUS NtAddAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_XPSP2__X86_NtAddAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAddAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtAddAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAddBootEntry ['PBOOT_ENTRY BootEntry', 'PULONG Id']
#define locals_WINDOWS_XPSP2__X86_NtAddBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAddBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtAddBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAdjustGroupsToken ['HANDLE TokenHandle', 'BOOLEAN ResetToDefault', 'PTOKEN_GROUPS NewState', 'ULONG BufferLength', 'PTOKEN_GROUPS PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResetToDefault) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtAdjustGroupsToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAdjustPrivilegesToken ['HANDLE TokenHandle', 'BOOLEAN DisableAllPrivileges', 'PTOKEN_PRIVILEGES NewState', 'ULONG BufferLength', 'PTOKEN_PRIVILEGES PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DisableAllPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtAdjustPrivilegesToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlertResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP2__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtAlertResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAlertThread ['HANDLE ThreadHandle']
#define locals_WINDOWS_XPSP2__X86_NtAlertThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAlertThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtAlertThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateLocallyUniqueId ['PLUID Luid']
#define locals_WINDOWS_XPSP2__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t UNUSED(pref##Luid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	const uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP2__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAllocateUuids ['PULARGE_INTEGER Time', 'PULONG Range', 'PULONG Sequence', 'PCHAR Seed']
#define locals_WINDOWS_XPSP2__X86_NtAllocateUuids(ctx, pref) \
	uint32_t UNUSED(pref##Time) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Range) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Sequence) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAllocateUuids(ctx, pref) \
	uint32_t &UNUSED(pref##Time) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Range) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtAllocateUuids(ctx, pref) \
	const uint32_t &UNUSED(pref##Time) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Range) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtAllocateVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'PSIZE_T RegionSize', 'ULONG AllocationType', 'ULONG Protect']
#define locals_WINDOWS_XPSP2__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Protect) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtAllocateVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAreMappedFilesTheSame ['PVOID File1MappedAsAnImage', 'PVOID File2MappedAsFile']
#define locals_WINDOWS_XPSP2__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t UNUSED(pref##File1MappedAsAnImage) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##File2MappedAsFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtAreMappedFilesTheSame(ctx, pref) \
	const uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAssignProcessToJobObject ['HANDLE JobHandle', 'HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP2__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtAssignProcessToJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCallbackReturn ['PVOID OutputBuffer', 'ULONG OutputLength', 'NTSTATUS Status']
#define locals_WINDOWS_XPSP2__X86_NtCallbackReturn(ctx, pref) \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputLength) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Status) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCallbackReturn(ctx, pref) \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Status) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCallbackReturn(ctx, pref) \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Status) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelIoFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_XPSP2__X86_NtCancelIoFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCancelIoFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtCancelIoFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCancelTimer ['HANDLE TimerHandle', 'PBOOLEAN CurrentState']
#define locals_WINDOWS_XPSP2__X86_NtCancelTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##CurrentState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCancelTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtCancelTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtClearEvent ['HANDLE EventHandle']
#define locals_WINDOWS_XPSP2__X86_NtClearEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtClearEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtClearEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtClose ['HANDLE Handle']
#define locals_WINDOWS_XPSP2__X86_NtClose(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtClose(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtClose(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCloseObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompactKeys ['ULONG Count', 'HANDLE KeyArray[]']
#define locals_WINDOWS_XPSP2__X86_NtCompactKeys(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyArray) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCompactKeys(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtCompactKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCompareTokens ['HANDLE FirstTokenHandle', 'HANDLE SecondTokenHandle', 'PBOOLEAN Equal']
#define locals_WINDOWS_XPSP2__X86_NtCompareTokens(ctx, pref) \
	uint32_t UNUSED(pref##FirstTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecondTokenHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Equal) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCompareTokens(ctx, pref) \
	uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCompareTokens(ctx, pref) \
	const uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompleteConnectPort ['HANDLE PortHandle']
#define locals_WINDOWS_XPSP2__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtCompleteConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCompressKey ['HANDLE Key']
#define locals_WINDOWS_XPSP2__X86_NtCompressKey(ctx, pref) \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCompressKey(ctx, pref) \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtCompressKey(ctx, pref) \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP2__X86_NtConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtContinue ['PCONTEXT ContextRecord', 'BOOLEAN TestAlert']
#define locals_WINDOWS_XPSP2__X86_NtContinue(ctx, pref) \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TestAlert) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtContinue(ctx, pref) \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCreateDebugObject ['PHANDLE DebugObjectHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'EVENT_TYPE EventType', 'BOOLEAN InitialState']
#define locals_WINDOWS_XPSP2__X86_NtCreateEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InitialState) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtCreateEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER AllocationSize', 'ULONG FileAttributes', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'PVOID EaBuffer', 'ULONG EaLength']
#define locals_WINDOWS_XPSP2__X86_NtCreateFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##EaBuffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##EaLength) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Count']
#define locals_WINDOWS_XPSP2__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtCreateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateJobSet ['ULONG NumJob', 'PJOB_SET_ARRAY UserJobSet', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtCreateJobSet(ctx, pref) \
	uint32_t UNUSED(pref##NumJob) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##UserJobSet) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateJobSet(ctx, pref) \
	uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateJobSet(ctx, pref) \
	const uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG TitleIndex', 'PUNICODE_STRING Class', 'ULONG CreateOptions', 'PULONG Disposition']
#define locals_WINDOWS_XPSP2__X86_NtCreateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Class) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Disposition) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Class) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Class) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateMailslotFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CreateOptions', 'ULONG MailslotQuota', 'ULONG MaximumMessageSize', 'PLARGE_INTEGER ReadTimeout']
#define locals_WINDOWS_XPSP2__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MailslotQuota) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaximumMessageSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ReadTimeout) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateMailslotFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN InitialOwner']
#define locals_WINDOWS_XPSP2__X86_NtCreateMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##InitialOwner) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateNamedPipeFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'ULONG NamedPipeType', 'ULONG ReadMode', 'ULONG CompletionMode', 'ULONG MaximumInstances', 'ULONG InboundQuota', 'ULONG OutboundQuota', 'PLARGE_INTEGER DefaultTimeout']
#define locals_WINDOWS_XPSP2__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##NamedPipeType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReadMode) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##CompletionMode) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##MaximumInstances) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##InboundQuota) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##OutboundQuota) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##DefaultTimeout) = *(uint32_t *)((ctx)->args[13]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[13]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateNamedPipeFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]);
#endif

// NTSTATUS NtCreatePagingFile ['PUNICODE_STRING PageFileName', 'PLARGE_INTEGER MinimumSize', 'PLARGE_INTEGER MaximumSize', 'ULONG Priority']
#define locals_WINDOWS_XPSP2__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t UNUSED(pref##PageFileName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumSize) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Priority) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreatePagingFile(ctx, pref) \
	const uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreatePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_XPSP2__X86_NtCreatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtCreatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'BOOLEAN InheritObjectTable', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort']
#define locals_WINDOWS_XPSP2__X86_NtCreateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InheritObjectTable) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateProcessEx ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'ULONG Flags', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort', 'ULONG JobMemberLevel']
#define locals_WINDOWS_XPSP2__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##JobMemberLevel) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateProcessEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateProfile ['PHANDLE ProfileHandle', 'HANDLE Process', 'PVOID RangeBase', 'SIZE_T RangeSize', 'ULONG BucketSize', 'PULONG Buffer', 'ULONG BufferSize', 'KPROFILE_SOURCE ProfileSource', 'KAFFINITY Affinity']
#define locals_WINDOWS_XPSP2__X86_NtCreateProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Process) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RangeBase) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RangeSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BucketSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Affinity) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Process) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Process) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PLARGE_INTEGER MaximumSize', 'ULONG SectionPageProtection', 'ULONG AllocationAttributes', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP2__X86_NtCreateSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SectionPageProtection) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AllocationAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LONG InitialCount', 'LONG MaximumCount']
#define locals_WINDOWS_XPSP2__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##InitialCount) = *(int32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##MaximumCount) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LinkTarget']
#define locals_WINDOWS_XPSP2__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ProcessHandle', 'PCLIENT_ID ClientId', 'PCONTEXT ThreadContext', 'PINITIAL_TEB InitialTeb', 'BOOLEAN CreateSuspended']
#define locals_WINDOWS_XPSP2__X86_NtCreateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InitialTeb) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateSuspended) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TIMER_TYPE TimerType']
#define locals_WINDOWS_XPSP2__X86_NtCreateTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateToken ['PHANDLE TokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TOKEN_TYPE TokenType', 'PLUID AuthenticationId', 'PLARGE_INTEGER ExpirationTime', 'PTOKEN_USER User', 'PTOKEN_GROUPS Groups', 'PTOKEN_PRIVILEGES Privileges', 'PTOKEN_OWNER Owner', 'PTOKEN_PRIMARY_GROUP PrimaryGroup', 'PTOKEN_DEFAULT_DACL DefaultDacl', 'PTOKEN_SOURCE TokenSource']
#define locals_WINDOWS_XPSP2__X86_NtCreateToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AuthenticationId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ExpirationTime) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##User) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Groups) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Owner) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##PrimaryGroup) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##DefaultDacl) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##TokenSource) = *(uint32_t *)((ctx)->args[12]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##User) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<uint32_t *>((ctx)->args[12]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##User) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]);
#endif

// NTSTATUS NtCreateWaitablePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_XPSP2__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateWaitablePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtDebugActiveProcess ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_XPSP2__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtDebugActiveProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDebugContinue ['HANDLE DebugObjectHandle', 'PCLIENT_ID ClientId', 'NTSTATUS ContinueStatus']
#define locals_WINDOWS_XPSP2__X86_NtDebugContinue(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContinueStatus) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDebugContinue(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtDebugContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDelayExecution ['BOOLEAN Alertable', 'PLARGE_INTEGER DelayInterval']
#define locals_WINDOWS_XPSP2__X86_NtDelayExecution(ctx, pref) \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DelayInterval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDelayExecution(ctx, pref) \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtDelayExecution(ctx, pref) \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeleteAtom ['RTL_ATOM Atom']
#define locals_WINDOWS_XPSP2__X86_NtDeleteAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteBootEntry ['ULONG Id']
#define locals_WINDOWS_XPSP2__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteFile ['POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtDeleteFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP2__X86_NtDeleteKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDeleteValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName']
#define locals_WINDOWS_XPSP2__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtDeleteValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeviceIoControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP2__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP2__X86_NtDeviceIoControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtDisplayString ['PUNICODE_STRING String']
#define locals_WINDOWS_XPSP2__X86_NtDisplayString(ctx, pref) \
	uint32_t UNUSED(pref##String) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDisplayString(ctx, pref) \
	uint32_t &UNUSED(pref##String) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtDisplayString(ctx, pref) \
	const uint32_t &UNUSED(pref##String) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDuplicateObject ['HANDLE SourceProcessHandle', 'HANDLE SourceHandle', 'HANDLE TargetProcessHandle', 'PHANDLE TargetHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Options']
#define locals_WINDOWS_XPSP2__X86_NtDuplicateObject(ctx, pref) \
	uint32_t UNUSED(pref##SourceProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TargetProcessHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Options) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDuplicateObject(ctx, pref) \
	uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Options) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtDuplicateObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Options) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtDuplicateToken ['HANDLE ExistingTokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN EffectiveOnly', 'TOKEN_TYPE TokenType', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtDuplicateToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EffectiveOnly) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtDuplicateToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtDuplicateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateBootEntries ['PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_XPSP2__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtEnumerateBootEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtEnumerateKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP2__X86_NtEnumerateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtEnumerateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtEnumerateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateSystemEnvironmentValuesEx ['ULONG InformationClass', 'PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_XPSP2__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtEnumerateValueKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP2__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtEnumerateValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtExtendSection ['HANDLE SectionHandle', 'PLARGE_INTEGER NewSectionSize']
#define locals_WINDOWS_XPSP2__X86_NtExtendSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewSectionSize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtExtendSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtExtendSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFilterToken ['HANDLE ExistingTokenHandle', 'ULONG Flags', 'PTOKEN_GROUPS SidsToDisable', 'PTOKEN_PRIVILEGES PrivilegesToDelete', 'PTOKEN_GROUPS RestrictedSids', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtFilterToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SidsToDisable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##PrivilegesToDelete) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestrictedSids) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFilterToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtFilterToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtFindAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_XPSP2__X86_NtFindAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFindAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtFindAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushBuffersFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_XPSP2__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtFlushBuffersFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFlushInstructionCache ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T Length']
#define locals_WINDOWS_XPSP2__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtFlushInstructionCache(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP2__X86_NtFlushKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFlushKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtFlushKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtFlushVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'PIO_STATUS_BLOCK IoStatus']
#define locals_WINDOWS_XPSP2__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtFlushVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFlushWriteBuffer ['']
#undef locals_WINDOWS_XPSP2__X86_NtFlushWriteBuffer
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP2__X86_NtFlushWriteBuffer
#endif

// NTSTATUS NtFreeUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP2__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtFreeUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFreeVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG FreeType']
#define locals_WINDOWS_XPSP2__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##FreeType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtFreeVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFsControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP2__X86_NtFsControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtFsControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP2__X86_NtFsControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtGetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_XPSP2__X86_NtGetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtGetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtGetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetDevicePowerState ['HANDLE Device', 'DEVICE_POWER_STATE *State']
#define locals_WINDOWS_XPSP2__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t UNUSED(pref##Device) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t &UNUSED(pref##Device) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtGetDevicePowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##Device) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetPlugPlayEvent ['HANDLE EventHandle', 'PVOID Context', 'PPLUGPLAY_EVENT_BLOCK EventBlock', 'ULONG EventBufferSize']
#define locals_WINDOWS_XPSP2__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventBlock) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventBufferSize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtGetPlugPlayEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtGetWriteWatch ['HANDLE ProcessHandle', 'ULONG Flags', 'PVOID BaseAddress', 'SIZE_T RegionSize', 'PVOID *UserAddressArray', 'PULONG_PTR EntriesInUserAddressArray', 'PULONG Granularity']
#define locals_WINDOWS_XPSP2__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##UserAddressArray) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EntriesInUserAddressArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Granularity) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtGetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtImpersonateAnonymousToken ['HANDLE ThreadHandle']
#define locals_WINDOWS_XPSP2__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtImpersonateAnonymousToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtImpersonateClientOfPort ['HANDLE PortHandle', 'PPORT_MESSAGE Message']
#define locals_WINDOWS_XPSP2__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtImpersonateClientOfPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtImpersonateThread ['HANDLE ServerThreadHandle', 'HANDLE ClientThreadHandle', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos']
#define locals_WINDOWS_XPSP2__X86_NtImpersonateThread(ctx, pref) \
	uint32_t UNUSED(pref##ServerThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtImpersonateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtImpersonateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtInitializeRegistry ['USHORT BootCondition']
#define locals_WINDOWS_XPSP2__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t UNUSED(pref##BootCondition) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtInitializeRegistry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtInitiatePowerAction ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP2__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtInitiatePowerAction(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtIsProcessInJob ['HANDLE ProcessHandle', 'HANDLE JobHandle']
#define locals_WINDOWS_XPSP2__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtIsProcessInJob(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// BOOLEAN NtIsSystemResumeAutomatic ['']
#undef locals_WINDOWS_XPSP2__X86_NtIsSystemResumeAutomatic
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP2__X86_NtIsSystemResumeAutomatic
#endif

// NTSTATUS NtListenPort ['HANDLE PortHandle', 'PPORT_MESSAGE ConnectionRequest']
#define locals_WINDOWS_XPSP2__X86_NtListenPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtListenPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtListenPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_XPSP2__X86_NtLoadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLoadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtLoadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLoadKey ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile']
#define locals_WINDOWS_XPSP2__X86_NtLoadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLoadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtLoadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadKey2 ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtLoadKey2(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLoadKey2(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtLoadKey2(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtLockFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key', 'BOOLEAN FailImmediately', 'BOOLEAN ExclusiveLock']
#define locals_WINDOWS_XPSP2__X86_NtLockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##FailImmediately) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ExclusiveLock) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP2__X86_NtLockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtLockProductActivationKeys ['ULONG *pPrivateVer', 'ULONG *pSafeMode']
#define locals_WINDOWS_XPSP2__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t UNUSED(pref##pPrivateVer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pSafeMode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtLockProductActivationKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLockRegistryKey ['HANDLE KeyHandle']
#define locals_WINDOWS_XPSP2__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtLockRegistryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_XPSP2__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtLockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtMakePermanentObject ['HANDLE Handle']
#define locals_WINDOWS_XPSP2__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtMakePermanentObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMakeTemporaryObject ['HANDLE Handle']
#define locals_WINDOWS_XPSP2__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtMakeTemporaryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMapUserPhysicalPages ['PVOID VirtualAddress', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP2__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddress) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtMapUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapUserPhysicalPagesScatter ['PVOID *VirtualAddresses', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_XPSP2__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddresses) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapViewOfSection ['HANDLE SectionHandle', 'HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'SIZE_T CommitSize', 'PLARGE_INTEGER SectionOffset', 'PSIZE_T ViewSize', 'SECTION_INHERIT InheritDisposition', 'ULONG AllocationType', 'WIN32_PROTECTION_MASK Win32Protect']
#define locals_WINDOWS_XPSP2__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CommitSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ViewSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InheritDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Win32Protect) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP2__X86_NtMapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtModifyBootEntry ['PBOOT_ENTRY BootEntry']
#define locals_WINDOWS_XPSP2__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtModifyBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtNotifyChangeDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'ULONG CompletionFilter', 'BOOLEAN WatchTree']
#define locals_WINDOWS_XPSP2__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtNotifyChangeKey ['HANDLE KeyHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP2__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_XPSP2__X86_NtNotifyChangeKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtNotifyChangeMultipleKeys ['HANDLE MasterKeyHandle', 'ULONG Count', 'OBJECT_ATTRIBUTES SlaveObjects[]', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_XPSP2__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t UNUSED(pref##MasterKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SlaveObjects) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_XPSP2__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG OpenOptions']
#define locals_WINDOWS_XPSP2__X86_NtOpenFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtOpenIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'ACCESS_MASK GrantedAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN ObjectCreation', 'BOOLEAN AccessGranted', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_XPSP2__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_XPSP2__X86_NtOpenProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenProcessToken ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenProcessToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenProcessTokenEx ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenProcessTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_XPSP2__X86_NtOpenThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadToken ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenThreadToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadTokenEx ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_XPSP2__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenThreadTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPlugPlayControl ['PLUGPLAY_CONTROL_CLASS PnPControlClass', 'PVOID PnPControlData', 'ULONG PnPControlDataLength']
#define locals_WINDOWS_XPSP2__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t UNUSED(pref##PnPControlClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PnPControlData) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PnPControlDataLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtPlugPlayControl(ctx, pref) \
	const uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPowerInformation ['POWER_INFORMATION_LEVEL InformationLevel', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_XPSP2__X86_NtPowerInformation(ctx, pref) \
	uint32_t UNUSED(pref##InformationLevel) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPowerInformation(ctx, pref) \
	uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtPowerInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrivilegeCheck ['HANDLE ClientToken', 'PPRIVILEGE_SET RequiredPrivileges', 'PBOOLEAN Result']
#define locals_WINDOWS_XPSP2__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequiredPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtPrivilegeCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPrivilegeObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_XPSP2__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtPrivilegedServiceAuditAlarm ['PUNICODE_STRING SubsystemName', 'PUNICODE_STRING ServiceName', 'HANDLE ClientToken', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_XPSP2__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtProtectVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'WIN32_PROTECTION_MASK NewProtectWin32', 'PULONG OldProtect']
#define locals_WINDOWS_XPSP2__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##NewProtectWin32) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OldProtect) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtProtectVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPulseEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP2__X86_NtPulseEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtPulseEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtPulseEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_BASIC_INFORMATION FileInformation']
#define locals_WINDOWS_XPSP2__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootEntryOrder ['PULONG Ids', 'PULONG Count']
#define locals_WINDOWS_XPSP2__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootOptions ['PBOOT_OPTIONS BootOptions', 'PULONG BootOptionsLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BootOptionsLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDebugFilterState ['ULONG ComponentId', 'ULONG Level']
#define locals_WINDOWS_XPSP2__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultLocale ['BOOLEAN UserProfile', 'PLCID DefaultLocaleId']
#define locals_WINDOWS_XPSP2__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultUILanguage ['LANGID *DefaultUILanguageId']
#define locals_WINDOWS_XPSP2__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass', 'BOOLEAN ReturnSingleEntry', 'PUNICODE_STRING FileName', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP2__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##FileName) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtQueryDirectoryObject ['HANDLE DirectoryHandle', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'BOOLEAN RestartScan', 'PULONG Context', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtQueryEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID EaList', 'ULONG EaListLength', 'PULONG EaIndex', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP2__X86_NtQueryEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EaList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##EaListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##EaIndex) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQueryEvent ['HANDLE EventHandle', 'EVENT_INFORMATION_CLASS EventInformationClass', 'PVOID EventInformation', 'ULONG EventInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EventInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryFullAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_NETWORK_OPEN_INFORMATION FileInformation']
#define locals_WINDOWS_XPSP2__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryFullAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryInformationAtom ['RTL_ATOM Atom', 'ATOM_INFORMATION_CLASS InformationClass', 'PVOID AtomInformation', 'ULONG AtomInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##AtomInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AtomInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationPort ['HANDLE PortHandle', 'PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInstallUILanguage ['LANGID *InstallUILanguageId']
#define locals_WINDOWS_XPSP2__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##InstallUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryInstallUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryIntervalProfile ['KPROFILE_SOURCE ProfileSource', 'PULONG Interval']
#define locals_WINDOWS_XPSP2__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryIoCompletion ['HANDLE IoCompletionHandle', 'IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass', 'PVOID IoCompletionInformation', 'ULONG IoCompletionInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoCompletionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoCompletionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryKey ['HANDLE KeyHandle', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryMultipleValueKey ['HANDLE KeyHandle', 'PKEY_VALUE_ENTRY ValueEntries', 'ULONG EntryCount', 'PVOID ValueBuffer', 'PULONG BufferLength', 'PULONG RequiredBufferLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueEntries) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EntryCount) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##RequiredBufferLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryMultipleValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryMutant ['HANDLE MutantHandle', 'MUTANT_INFORMATION_CLASS MutantInformationClass', 'PVOID MutantInformation', 'ULONG MutantInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MutantInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MutantInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MutantInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryOpenSubKeys ['POBJECT_ATTRIBUTES TargetKey', 'PULONG HandleCount']
#define locals_WINDOWS_XPSP2__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryOpenSubKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryPerformanceCounter ['PLARGE_INTEGER PerformanceCounter', 'PLARGE_INTEGER PerformanceFrequency']
#define locals_WINDOWS_XPSP2__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t UNUSED(pref##PerformanceCounter) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PerformanceFrequency) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryPerformanceCounter(ctx, pref) \
	const uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID SidList', 'ULONG SidListLength', 'PULONG StartSid', 'BOOLEAN RestartScan']
#define locals_WINDOWS_XPSP2__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SidList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##SidListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##StartSid) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQuerySection ['HANDLE SectionHandle', 'SECTION_INFORMATION_CLASS SectionInformationClass', 'PVOID SectionInformation', 'SIZE_T SectionInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQuerySection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SectionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ULONG Length', 'PULONG LengthNeeded']
#define locals_WINDOWS_XPSP2__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##LengthNeeded) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySemaphore ['HANDLE SemaphoreHandle', 'SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass', 'PVOID SemaphoreInformation', 'ULONG SemaphoreInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SemaphoreInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SemaphoreInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SemaphoreInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySymbolicLinkObject ['HANDLE LinkHandle', 'PUNICODE_STRING LinkTarget', 'PULONG ReturnedLength']
#define locals_WINDOWS_XPSP2__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReturnedLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PWSTR VariableValue', 'USHORT ValueLength', 'PUSHORT ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'PULONG ValueLength', 'PULONG Attributes']
#define locals_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemTime ['PLARGE_INTEGER SystemTime']
#define locals_WINDOWS_XPSP2__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtQuerySystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryTimer ['HANDLE TimerHandle', 'TIMER_INFORMATION_CLASS TimerInformationClass', 'PVOID TimerInformation', 'ULONG TimerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TimerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryTimerResolution ['PULONG MaximumTime', 'PULONG MinimumTime', 'PULONG CurrentTime']
#define locals_WINDOWS_XPSP2__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##MaximumTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##CurrentTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQueryValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'MEMORY_INFORMATION_CLASS MemoryInformationClass', 'PVOID MemoryInformation', 'SIZE_T MemoryInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MemoryInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MemoryInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MemoryInformationLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_XPSP2__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueryVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueueApcThread ['HANDLE ThreadHandle', 'PPS_APC_ROUTINE ApcRoutine', 'PVOID ApcArgument1', 'PVOID ApcArgument2', 'PVOID ApcArgument3']
#define locals_WINDOWS_XPSP2__X86_NtQueueApcThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcArgument1) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcArgument2) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcArgument3) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtQueueApcThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtQueueApcThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRaiseException ['PEXCEPTION_RECORD ExceptionRecord', 'PCONTEXT ContextRecord', 'BOOLEAN FirstChance']
#define locals_WINDOWS_XPSP2__X86_NtRaiseException(ctx, pref) \
	uint32_t UNUSED(pref##ExceptionRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FirstChance) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRaiseException(ctx, pref) \
	uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtRaiseException(ctx, pref) \
	const uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRaiseHardError ['NTSTATUS ErrorStatus', 'ULONG NumberOfParameters', 'ULONG UnicodeStringParameterMask', 'PULONG_PTR Parameters', 'ULONG ValidResponseOptions', 'PULONG Response']
#define locals_WINDOWS_XPSP2__X86_NtRaiseHardError(ctx, pref) \
	uint32_t UNUSED(pref##ErrorStatus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfParameters) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UnicodeStringParameterMask) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Parameters) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ValidResponseOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Response) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRaiseHardError(ctx, pref) \
	uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Response) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtRaiseHardError(ctx, pref) \
	const uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Response) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP2__X86_NtReadFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReadFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtReadFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadFileScatter ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP2__X86_NtReadFileScatter(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReadFileScatter(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtReadFileScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_XPSP2__X86_NtReadRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReadRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtReadRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_XPSP2__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtReadVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRegisterThreadTerminatePort ['HANDLE PortHandle']
#define locals_WINDOWS_XPSP2__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtReleaseMutant ['HANDLE MutantHandle', 'PLONG PreviousCount']
#define locals_WINDOWS_XPSP2__X86_NtReleaseMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReleaseMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtReleaseMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReleaseSemaphore ['HANDLE SemaphoreHandle', 'LONG ReleaseCount', 'PLONG PreviousCount']
#define locals_WINDOWS_XPSP2__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##ReleaseCount) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtReleaseSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRemoveIoCompletion ['HANDLE IoCompletionHandle', 'PVOID *KeyContext', 'PVOID *ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtRemoveIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRemoveProcessDebug ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_XPSP2__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtRemoveProcessDebug(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRenameKey ['HANDLE KeyHandle', 'PUNICODE_STRING NewName']
#define locals_WINDOWS_XPSP2__X86_NtRenameKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRenameKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtRenameKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplaceKey ['POBJECT_ATTRIBUTES NewFile', 'HANDLE TargetHandle', 'POBJECT_ATTRIBUTES OldFile']
#define locals_WINDOWS_XPSP2__X86_NtReplaceKey(ctx, pref) \
	uint32_t UNUSED(pref##NewFile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OldFile) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReplaceKey(ctx, pref) \
	uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtReplaceKey(ctx, pref) \
	const uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP2__X86_NtReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplyWaitReceivePort ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage']
#define locals_WINDOWS_XPSP2__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtReplyWaitReceivePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtReplyWaitReceivePortEx ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtReplyWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP2__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtReplyWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage']
#define locals_WINDOWS_XPSP2__X86_NtRequestPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRequestPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtRequestPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_XPSP2__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtRequestWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP2__X86_NtResetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtResetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtResetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtResetWriteWatch ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T RegionSize']
#define locals_WINDOWS_XPSP2__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtResetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRestoreKey ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtRestoreKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtRestoreKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtRestoreKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResumeProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP2__X86_NtResumeProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtResumeProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtResumeProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP2__X86_NtResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKey ['HANDLE KeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP2__X86_NtSaveKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSaveKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSaveKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKeyEx ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Format']
#define locals_WINDOWS_XPSP2__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Format) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Format) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSaveKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Format) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSaveMergedKeys ['HANDLE HighPrecedenceKeyHandle', 'HANDLE LowPrecedenceKeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_XPSP2__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t UNUSED(pref##HighPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LowPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSaveMergedKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSecureConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PSID RequiredServerSid', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RequiredServerSid) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtSecureConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtSetBootEntryOrder ['PULONG Ids', 'ULONG Count']
#define locals_WINDOWS_XPSP2__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetBootOptions ['PBOOT_OPTIONS BootOptions', 'ULONG FieldsToChange']
#define locals_WINDOWS_XPSP2__X86_NtSetBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FieldsToChange) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_XPSP2__X86_NtSetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDebugFilterState ['ULONG ComponentId', 'ULONG Level', 'BOOLEAN State']
#define locals_WINDOWS_XPSP2__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSetDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetDefaultHardErrorPort ['HANDLE DefaultHardErrorPort']
#define locals_WINDOWS_XPSP2__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t UNUSED(pref##DefaultHardErrorPort) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetDefaultLocale ['BOOLEAN UserProfile', 'LCID DefaultLocaleId']
#define locals_WINDOWS_XPSP2__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDefaultUILanguage ['LANGID DefaultUILanguageId']
#define locals_WINDOWS_XPSP2__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_XPSP2__X86_NtSetEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_XPSP2__X86_NtSetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetEventBoostPriority ['HANDLE EventHandle']
#define locals_WINDOWS_XPSP2__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetEventBoostPriority(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetInformationDebugObject ['HANDLE DebugObjectHandle', 'DEBUGOBJECTINFOCLASS DebugObjectInformationClass', 'PVOID DebugInformation', 'ULONG DebugInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DebugInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DebugInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationKey ['HANDLE KeyHandle', 'KEY_SET_INFORMATION_CLASS KeySetInformationClass', 'PVOID KeySetInformation', 'ULONG KeySetInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeySetInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeySetInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeySetInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetIntervalProfile ['ULONG Interval', 'KPROFILE_SOURCE Source']
#define locals_WINDOWS_XPSP2__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Source) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Source) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Source) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetIoCompletion ['HANDLE IoCompletionHandle', 'PVOID KeyContext', 'PVOID ApcContext', 'NTSTATUS IoStatus', 'ULONG_PTR IoStatusInformation']
#define locals_WINDOWS_XPSP2__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusInformation) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtSetIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetLdtEntries ['ULONG Selector0', 'ULONG Entry0Low', 'ULONG Entry0Hi', 'ULONG Selector1', 'ULONG Entry1Low', 'ULONG Entry1Hi']
#define locals_WINDOWS_XPSP2__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t UNUSED(pref##Selector0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Entry0Low) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Entry0Hi) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Selector1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Entry1Low) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Entry1Hi) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtSetLdtEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetLowWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_XPSP2__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSetQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetSecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor']
#define locals_WINDOWS_XPSP2__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PUNICODE_STRING VariableValue']
#define locals_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetSystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'ULONG ValueLength', 'ULONG Attributes']
#define locals_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetSystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength']
#define locals_WINDOWS_XPSP2__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemPowerState ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSystemPowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemTime ['PLARGE_INTEGER SystemTime', 'PLARGE_INTEGER PreviousTime']
#define locals_WINDOWS_XPSP2__X86_NtSetSystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousTime) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetSystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetSystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetThreadExecutionState ['EXECUTION_STATE esFlags', 'PEXECUTION_STATE PreviousFlags']
#define locals_WINDOWS_XPSP2__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t UNUSED(pref##esFlags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousFlags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSetThreadExecutionState(ctx, pref) \
	const uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetTimer ['HANDLE TimerHandle', 'PLARGE_INTEGER DueTime', 'PTIMER_APC_ROUTINE TimerApcRoutine', 'PVOID TimerContext', 'BOOLEAN WakeTimer', 'LONG Period', 'PBOOLEAN PreviousState']
#define locals_WINDOWS_XPSP2__X86_NtSetTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DueTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##WakeTimer) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##Period) = *(int32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##Period) = *reinterpret_cast<int32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_XPSP2__X86_NtSetTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##Period) = *reinterpret_cast<const int32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtSetTimerResolution ['ULONG DesiredTime', 'BOOLEAN SetResolution', 'PULONG ActualTime']
#define locals_WINDOWS_XPSP2__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##DesiredTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SetResolution) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ActualTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtSetTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetUuidSeed ['PCHAR Seed']
#define locals_WINDOWS_XPSP2__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSetUuidSeed(ctx, pref) \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'ULONG TitleIndex', 'ULONG Type', 'PVOID Data', 'ULONG DataSize']
#define locals_WINDOWS_XPSP2__X86_NtSetValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Data) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DataSize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtSetValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_XPSP2__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtSetVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtShutdownSystem ['SHUTDOWN_ACTION Action']
#define locals_WINDOWS_XPSP2__X86_NtShutdownSystem(ctx, pref) \
	uint32_t UNUSED(pref##Action) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtShutdownSystem(ctx, pref) \
	uint32_t &UNUSED(pref##Action) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtShutdownSystem(ctx, pref) \
	const uint32_t &UNUSED(pref##Action) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSignalAndWaitForSingleObject ['HANDLE SignalHandle', 'HANDLE WaitHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##SignalHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WaitHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtStartProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_XPSP2__X86_NtStartProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtStartProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtStartProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtStopProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_XPSP2__X86_NtStopProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtStopProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtStopProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_XPSP2__X86_NtSuspendProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSuspendProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtSuspendProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_XPSP2__X86_NtSuspendThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSuspendThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtSuspendThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSystemDebugControl ['SYSDBG_COMMAND Command', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength', 'PULONG ReturnLength']
#define locals_WINDOWS_XPSP2__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t UNUSED(pref##Command) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t &UNUSED(pref##Command) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtSystemDebugControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Command) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtTerminateJobObject ['HANDLE JobHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP2__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtTerminateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateProcess ['HANDLE ProcessHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP2__X86_NtTerminateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtTerminateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtTerminateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateThread ['HANDLE ThreadHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_XPSP2__X86_NtTerminateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtTerminateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtTerminateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTestAlert ['']
#undef locals_WINDOWS_XPSP2__X86_NtTestAlert
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP2__X86_NtTestAlert
#endif

// NTSTATUS NtTraceEvent ['HANDLE TraceHandle', 'ULONG Flags', 'ULONG FieldSize', 'PVOID Fields']
#define locals_WINDOWS_XPSP2__X86_NtTraceEvent(ctx, pref) \
	uint32_t UNUSED(pref##TraceHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FieldSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Fields) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtTraceEvent(ctx, pref) \
	uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtTraceEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtTranslateFilePath ['PFILE_PATH InputFilePath', 'ULONG OutputType', 'PFILE_PATH OutputFilePath', 'PULONG OutputFilePathLength']
#define locals_WINDOWS_XPSP2__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t UNUSED(pref##InputFilePath) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputType) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OutputFilePath) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputFilePathLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtTranslateFilePath(ctx, pref) \
	const uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnloadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_XPSP2__X86_NtUnloadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnloadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtUnloadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKey ['POBJECT_ATTRIBUTES TargetKey']
#define locals_WINDOWS_XPSP2__X86_NtUnloadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnloadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtUnloadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKeyEx ['POBJECT_ATTRIBUTES TargetKey', 'HANDLE Event']
#define locals_WINDOWS_XPSP2__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtUnloadKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtUnlockFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key']
#define locals_WINDOWS_XPSP2__X86_NtUnlockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnlockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtUnlockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtUnlockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_XPSP2__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtUnlockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnmapViewOfSection ['HANDLE ProcessHandle', 'PVOID BaseAddress']
#define locals_WINDOWS_XPSP2__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtUnmapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtVdmControl ['VDMSERVICECLASS Service', 'PVOID ServiceData']
#define locals_WINDOWS_XPSP2__X86_NtVdmControl(ctx, pref) \
	uint32_t UNUSED(pref##Service) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceData) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtVdmControl(ctx, pref) \
	uint32_t &UNUSED(pref##Service) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_XPSP2__X86_NtVdmControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Service) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtWaitForDebugEvent ['HANDLE DebugObjectHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout', 'PDBGUI_WAIT_STATE_CHANGE WaitStateChange']
#define locals_WINDOWS_XPSP2__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##WaitStateChange) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitForDebugEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForMultipleObjects ['ULONG Count', 'HANDLE Handles[]', 'WAIT_TYPE WaitType', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Handles) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WaitType) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitForMultipleObjects(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtWaitForSingleObject ['HANDLE Handle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_XPSP2__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWriteFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP2__X86_NtWriteFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWriteFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtWriteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteFileGather ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_XPSP2__X86_NtWriteFileGather(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWriteFileGather(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_XPSP2__X86_NtWriteFileGather(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_XPSP2__X86_NtWriteRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWriteRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_XPSP2__X86_NtWriteRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtWriteVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_XPSP2__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_XPSP2__X86_NtWriteVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtYieldExecution ['']
#undef locals_WINDOWS_XPSP2__X86_NtYieldExecution
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP2__X86_NtYieldExecution
#endif

// NTSTATUS NtCreateKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_XPSP2__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtCreateKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_XPSP2__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_XPSP2__X86_NtOpenKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReleaseKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtReleaseKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_XPSP2__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_XPSP2__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_XPSP2__X86_NtWaitForKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQueryPortInformationProcess ['']
#undef locals_WINDOWS_XPSP2__X86_NtQueryPortInformationProcess
#if defined(__cplusplus)
#undef references_WINDOWS_XPSP2__X86_NtQueryPortInformationProcess
#endif


/* ### linux:arm ######################################################## */
// long sys_restart_syscall ['void']
#undef locals_LINUX__ARM_sys_restart_syscall
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_restart_syscall
#endif

// long sys_exit ['int error_code']
#define locals_LINUX__ARM_sys_exit(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_exit(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_exit(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fork ['void']
#undef locals_LINUX__ARM_sys_fork
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_fork
#endif

// long sys_read ['unsigned int fd', 'char __user *buf', 'size_t count']
#define locals_LINUX__ARM_sys_read(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_read(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_read(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_write ['unsigned int fd', 'const char __user *buf', 'size_t count']
#define locals_LINUX__ARM_sys_write(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_write(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_write(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_open ['const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__ARM_sys_open(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_open(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_open(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_close ['unsigned int fd']
#define locals_LINUX__ARM_sys_close(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_close(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_close(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_creat ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__ARM_sys_creat(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_creat(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_creat(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_link ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__ARM_sys_link(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_link(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_link(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_unlink ['const char __user *pathname']
#define locals_LINUX__ARM_sys_unlink(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_unlink(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_unlink(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_execve ['const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp']
#define locals_LINUX__ARM_sys_execve(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##argv) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##envp) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_execve(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##argv) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##envp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_execve(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##argv) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##envp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chdir ['const char __user *filename']
#define locals_LINUX__ARM_sys_chdir(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_chdir(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_chdir(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_time ['time_t __user *tloc']
#define locals_LINUX__ARM_sys_time(ctx, pref) \
	uint32_t UNUSED(pref##tloc) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_time(ctx, pref) \
	uint32_t &UNUSED(pref##tloc) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_time(ctx, pref) \
	const uint32_t &UNUSED(pref##tloc) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mknod ['const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__ARM_sys_mknod(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mknod(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mknod(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chmod ['const char __user *filename', 'umode_t mode']
#define locals_LINUX__ARM_sys_chmod(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_chmod(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_chmod(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lchown16 ['const char __user *filename', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__ARM_sys_lchown16(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lchown16(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_lchown16(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_lseek ['unsigned int fd', 'off_t offset', 'unsigned int whence']
#define locals_LINUX__ARM_sys_lseek(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##whence) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lseek(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##whence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_lseek(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##whence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpid ['void']
#undef locals_LINUX__ARM_sys_getpid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getpid
#endif

// long sys_mount ['char __user *dev_name', 'char __user *dir_name', 'char __user *type', 'unsigned long flags', 'void __user *data']
#define locals_LINUX__ARM_sys_mount(ctx, pref) \
	uint32_t UNUSED(pref##dev_name) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dir_name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##type) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mount(ctx, pref) \
	uint32_t &UNUSED(pref##dev_name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dir_name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##type) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_mount(ctx, pref) \
	const uint32_t &UNUSED(pref##dev_name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dir_name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##type) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setuid16 ['old_uid_t uid']
#define locals_LINUX__ARM_sys_setuid16(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setuid16(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getuid16 ['void']
#undef locals_LINUX__ARM_sys_getuid16
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getuid16
#endif

// long sys_stime ['time_t __user *tptr']
#define locals_LINUX__ARM_sys_stime(ctx, pref) \
	uint32_t UNUSED(pref##tptr) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_stime(ctx, pref) \
	uint32_t &UNUSED(pref##tptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_stime(ctx, pref) \
	const uint32_t &UNUSED(pref##tptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ptrace ['long request', 'long pid', 'unsigned long addr', 'unsigned long data']
#define locals_LINUX__ARM_sys_ptrace(ctx, pref) \
	int32_t UNUSED(pref##request) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ptrace(ctx, pref) \
	int32_t &UNUSED(pref##request) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_ptrace(ctx, pref) \
	const int32_t &UNUSED(pref##request) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_alarm ['unsigned int seconds']
#define locals_LINUX__ARM_sys_alarm(ctx, pref) \
	uint32_t UNUSED(pref##seconds) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_alarm(ctx, pref) \
	uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_alarm(ctx, pref) \
	const uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_pause ['void']
#undef locals_LINUX__ARM_sys_pause
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_pause
#endif

// long sys_utime ['char __user *filename', 'struct utimbuf __user *times']
#define locals_LINUX__ARM_sys_utime(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##times) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_utime(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##times) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_utime(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##times) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_access ['const char __user *filename', 'int mode']
#define locals_LINUX__ARM_sys_access(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_access(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_access(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_nice ['int increment']
#define locals_LINUX__ARM_sys_nice(ctx, pref) \
	int32_t UNUSED(pref##increment) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_nice(ctx, pref) \
	int32_t &UNUSED(pref##increment) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_nice(ctx, pref) \
	const int32_t &UNUSED(pref##increment) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sync ['void']
#undef locals_LINUX__ARM_sys_sync
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_sync
#endif

// long sys_kill ['int pid', 'int sig']
#define locals_LINUX__ARM_sys_kill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_kill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_kill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_rename ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__ARM_sys_rename(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rename(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_rename(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mkdir ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__ARM_sys_mkdir(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mkdir(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_mkdir(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rmdir ['const char __user *pathname']
#define locals_LINUX__ARM_sys_rmdir(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rmdir(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_rmdir(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_dup ['unsigned int fildes']
#define locals_LINUX__ARM_sys_dup(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_dup(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_dup(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_pipe ['int __user *fildes']
#define locals_LINUX__ARM_sys_pipe(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pipe(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_pipe(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_times ['struct tms __user *tbuf']
#define locals_LINUX__ARM_sys_times(ctx, pref) \
	uint32_t UNUSED(pref##tbuf) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_times(ctx, pref) \
	uint32_t &UNUSED(pref##tbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_times(ctx, pref) \
	const uint32_t &UNUSED(pref##tbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_brk ['unsigned long brk']
#define locals_LINUX__ARM_sys_brk(ctx, pref) \
	uint32_t UNUSED(pref##brk) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_brk(ctx, pref) \
	uint32_t &UNUSED(pref##brk) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_brk(ctx, pref) \
	const uint32_t &UNUSED(pref##brk) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setgid16 ['old_gid_t gid']
#define locals_LINUX__ARM_sys_setgid16(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setgid16(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getgid16 ['void']
#undef locals_LINUX__ARM_sys_getgid16
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getgid16
#endif

// long sys_geteuid16 ['void']
#undef locals_LINUX__ARM_sys_geteuid16
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_geteuid16
#endif

// long sys_getegid16 ['void']
#undef locals_LINUX__ARM_sys_getegid16
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getegid16
#endif

// long sys_acct ['const char __user *name']
#define locals_LINUX__ARM_sys_acct(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_acct(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_acct(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_umount ['char __user *name', 'int flags']
#define locals_LINUX__ARM_sys_umount(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_umount(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_umount(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_ioctl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__ARM_sys_ioctl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ioctl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_ioctl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fcntl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__ARM_sys_fcntl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fcntl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fcntl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setpgid ['pid_t pid', 'pid_t pgid']
#define locals_LINUX__ARM_sys_setpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pgid) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pgid) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pgid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_umask ['int mask']
#define locals_LINUX__ARM_sys_umask(ctx, pref) \
	int32_t UNUSED(pref##mask) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_umask(ctx, pref) \
	int32_t &UNUSED(pref##mask) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_umask(ctx, pref) \
	const int32_t &UNUSED(pref##mask) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_chroot ['const char __user *filename']
#define locals_LINUX__ARM_sys_chroot(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_chroot(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_chroot(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ustat ['unsigned dev', 'struct ustat __user *ubuf']
#define locals_LINUX__ARM_sys_ustat(ctx, pref) \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ubuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ustat(ctx, pref) \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ubuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_ustat(ctx, pref) \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ubuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_dup2 ['unsigned int oldfd', 'unsigned int newfd']
#define locals_LINUX__ARM_sys_dup2(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_dup2(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_dup2(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getppid ['void']
#undef locals_LINUX__ARM_sys_getppid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getppid
#endif

// long sys_getpgrp ['void']
#undef locals_LINUX__ARM_sys_getpgrp
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getpgrp
#endif

// long sys_setsid ['void']
#undef locals_LINUX__ARM_sys_setsid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_setsid
#endif

// long sys_sigaction ['int', 'const struct old_sigaction __user *', 'struct old_sigaction __user *']
#define locals_LINUX__ARM_sys_sigaction(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigaction(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sigaction(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setreuid16 ['old_uid_t ruid', 'old_uid_t euid']
#define locals_LINUX__ARM_sys_setreuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setreuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setreuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setregid16 ['old_gid_t rgid', 'old_gid_t egid']
#define locals_LINUX__ARM_sys_setregid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setregid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setregid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sigsuspend ['int unused1', 'int unused2', 'old_sigset_t mask']
#define locals_LINUX__ARM_sys_sigsuspend(ctx, pref) \
	int32_t UNUSED(pref##unused1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##unused2) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigsuspend(ctx, pref) \
	int32_t &UNUSED(pref##unused1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##unused2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sigsuspend(ctx, pref) \
	const int32_t &UNUSED(pref##unused1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##unused2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sigpending ['old_sigset_t __user *set']
#define locals_LINUX__ARM_sys_sigpending(ctx, pref) \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigpending(ctx, pref) \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sigpending(ctx, pref) \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sethostname ['char __user *name', 'int len']
#define locals_LINUX__ARM_sys_sethostname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sethostname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_sethostname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__ARM_sys_setrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rlim) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getrusage ['int who', 'struct rusage __user *ru']
#define locals_LINUX__ARM_sys_getrusage(ctx, pref) \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getrusage(ctx, pref) \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getrusage(ctx, pref) \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_gettimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__ARM_sys_gettimeofday(ctx, pref) \
	uint32_t UNUSED(pref##tv) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tz) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_gettimeofday(ctx, pref) \
	uint32_t &UNUSED(pref##tv) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_gettimeofday(ctx, pref) \
	const uint32_t &UNUSED(pref##tv) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_settimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__ARM_sys_settimeofday(ctx, pref) \
	uint32_t UNUSED(pref##tv) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tz) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_settimeofday(ctx, pref) \
	uint32_t &UNUSED(pref##tv) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_settimeofday(ctx, pref) \
	const uint32_t &UNUSED(pref##tv) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getgroups16 ['int gidsetsize', 'old_gid_t __user *grouplist']
#define locals_LINUX__ARM_sys_getgroups16(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getgroups16(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getgroups16(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setgroups16 ['int gidsetsize', 'old_gid_t __user *grouplist']
#define locals_LINUX__ARM_sys_setgroups16(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setgroups16(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setgroups16(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_symlink ['const char __user *old', 'const char __user *new']
#define locals_LINUX__ARM_sys_symlink(ctx, pref) \
	uint32_t UNUSED(pref##old) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_new) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_symlink(ctx, pref) \
	uint32_t &UNUSED(pref##old) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_new) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_symlink(ctx, pref) \
	const uint32_t &UNUSED(pref##old) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_new) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_readlink ['const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__ARM_sys_readlink(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_readlink(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_readlink(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_uselib ['const char __user *library']
#define locals_LINUX__ARM_sys_uselib(ctx, pref) \
	uint32_t UNUSED(pref##library) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_uselib(ctx, pref) \
	uint32_t &UNUSED(pref##library) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_uselib(ctx, pref) \
	const uint32_t &UNUSED(pref##library) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_swapon ['const char __user *specialfile', 'int swap_flags']
#define locals_LINUX__ARM_sys_swapon(ctx, pref) \
	uint32_t UNUSED(pref##specialfile) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##swap_flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_swapon(ctx, pref) \
	uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_swapon(ctx, pref) \
	const uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_reboot ['int magic1', 'int magic2', 'unsigned int cmd', 'void __user *arg']
#define locals_LINUX__ARM_sys_reboot(ctx, pref) \
	int32_t UNUSED(pref##magic1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##magic2) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_reboot(ctx, pref) \
	int32_t &UNUSED(pref##magic1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##magic2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_reboot(ctx, pref) \
	const int32_t &UNUSED(pref##magic1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##magic2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_munmap ['unsigned long addr', 'size_t len']
#define locals_LINUX__ARM_sys_munmap(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_munmap(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_munmap(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_truncate ['const char __user *path', 'long length']
#define locals_LINUX__ARM_sys_truncate(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##length) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_truncate(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##length) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_truncate(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##length) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_ftruncate ['unsigned int fd', 'unsigned long length']
#define locals_LINUX__ARM_sys_ftruncate(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##length) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ftruncate(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_ftruncate(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchmod ['unsigned int fd', 'umode_t mode']
#define locals_LINUX__ARM_sys_fchmod(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchmod(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_fchmod(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchown16 ['unsigned int fd', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__ARM_sys_fchown16(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchown16(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fchown16(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpriority ['int which', 'int who']
#define locals_LINUX__ARM_sys_getpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setpriority ['int which', 'int who', 'int niceval']
#define locals_LINUX__ARM_sys_setpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##niceval) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##niceval) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##niceval) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_statfs ['const char __user *path', 'struct statfs __user *buf']
#define locals_LINUX__ARM_sys_statfs(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_statfs(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_statfs(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fstatfs ['unsigned int fd', 'struct statfs __user *buf']
#define locals_LINUX__ARM_sys_fstatfs(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fstatfs(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_fstatfs(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_socketcall ['int call', 'unsigned long __user *args']
#define locals_LINUX__ARM_sys_socketcall(ctx, pref) \
	int32_t UNUSED(pref##call) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##args) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_socketcall(ctx, pref) \
	int32_t &UNUSED(pref##call) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##args) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_socketcall(ctx, pref) \
	const int32_t &UNUSED(pref##call) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##args) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_syslog ['int type', 'char __user *buf', 'int len']
#define locals_LINUX__ARM_sys_syslog(ctx, pref) \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_syslog(ctx, pref) \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_syslog(ctx, pref) \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_setitimer ['int which', 'struct itimerval __user *value', 'struct itimerval __user *ovalue']
#define locals_LINUX__ARM_sys_setitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ovalue) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ovalue) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ovalue) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getitimer ['int which', 'struct itimerval __user *value']
#define locals_LINUX__ARM_sys_getitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__ARM_sys_newstat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_newstat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_newstat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newlstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__ARM_sys_newlstat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_newlstat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_newlstat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newfstat ['unsigned int fd', 'struct stat __user *statbuf']
#define locals_LINUX__ARM_sys_newfstat(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_newfstat(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_newfstat(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_vhangup ['void']
#undef locals_LINUX__ARM_sys_vhangup
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_vhangup
#endif

// long sys_wait4 ['pid_t pid', 'int __user *stat_addr', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__ARM_sys_wait4(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##stat_addr) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_wait4(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_wait4(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_swapoff ['const char __user *specialfile']
#define locals_LINUX__ARM_sys_swapoff(ctx, pref) \
	uint32_t UNUSED(pref##specialfile) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_swapoff(ctx, pref) \
	uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_swapoff(ctx, pref) \
	const uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sysinfo ['struct sysinfo __user *info']
#define locals_LINUX__ARM_sys_sysinfo(ctx, pref) \
	uint32_t UNUSED(pref##info) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sysinfo(ctx, pref) \
	uint32_t &UNUSED(pref##info) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sysinfo(ctx, pref) \
	const uint32_t &UNUSED(pref##info) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ipc ['unsigned int call', 'int first', 'unsigned long second', 'unsigned long third', 'void __user *ptr', 'long fifth']
#define locals_LINUX__ARM_sys_ipc(ctx, pref) \
	uint32_t UNUSED(pref##call) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##first) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##second) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##third) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ptr) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##fifth) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ipc(ctx, pref) \
	uint32_t &UNUSED(pref##call) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##first) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##second) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##third) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##fifth) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_ipc(ctx, pref) \
	const uint32_t &UNUSED(pref##call) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##first) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##second) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##third) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##fifth) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_fsync ['unsigned int fd']
#define locals_LINUX__ARM_sys_fsync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fsync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_fsync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// int sys_sigreturn ['struct pt_regs *regs']
#define locals_LINUX__ARM_sys_sigreturn(ctx, pref) \
	uint32_t UNUSED(pref##regs) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigreturn(ctx, pref) \
	uint32_t &UNUSED(pref##regs) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sigreturn(ctx, pref) \
	const uint32_t &UNUSED(pref##regs) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_clone ['unsigned long', 'unsigned long', 'int __user *', 'int __user *', 'unsigned long']
#define locals_LINUX__ARM_sys_clone(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clone(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_clone(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setdomainname ['char __user *name', 'int len']
#define locals_LINUX__ARM_sys_setdomainname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setdomainname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setdomainname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_newuname ['struct new_utsname __user *name']
#define locals_LINUX__ARM_sys_newuname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_newuname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_newuname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_adjtimex ['struct timex __user *txc_p']
#define locals_LINUX__ARM_sys_adjtimex(ctx, pref) \
	uint32_t UNUSED(pref##txc_p) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_adjtimex(ctx, pref) \
	uint32_t &UNUSED(pref##txc_p) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_adjtimex(ctx, pref) \
	const uint32_t &UNUSED(pref##txc_p) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mprotect ['unsigned long start', 'size_t len', 'unsigned long prot']
#define locals_LINUX__ARM_sys_mprotect(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mprotect(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mprotect(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sigprocmask ['int how', 'old_sigset_t __user *set', 'old_sigset_t __user *oset']
#define locals_LINUX__ARM_sys_sigprocmask(ctx, pref) \
	int32_t UNUSED(pref##how) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##oset) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigprocmask(ctx, pref) \
	int32_t &UNUSED(pref##how) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##oset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sigprocmask(ctx, pref) \
	const int32_t &UNUSED(pref##how) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##oset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_init_module ['void __user *umod', 'unsigned long len', 'const char __user *uargs']
#define locals_LINUX__ARM_sys_init_module(ctx, pref) \
	uint32_t UNUSED(pref##umod) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_init_module(ctx, pref) \
	uint32_t &UNUSED(pref##umod) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_init_module(ctx, pref) \
	const uint32_t &UNUSED(pref##umod) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_delete_module ['const char __user *name_user', 'unsigned int flags']
#define locals_LINUX__ARM_sys_delete_module(ctx, pref) \
	uint32_t UNUSED(pref##name_user) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_delete_module(ctx, pref) \
	uint32_t &UNUSED(pref##name_user) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_delete_module(ctx, pref) \
	const uint32_t &UNUSED(pref##name_user) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_quotactl ['unsigned int cmd', 'const char __user *special', 'qid_t id', 'void __user *addr']
#define locals_LINUX__ARM_sys_quotactl(ctx, pref) \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##special) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##id) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_quotactl(ctx, pref) \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##special) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##id) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_quotactl(ctx, pref) \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##special) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##id) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_getpgid ['pid_t pid']
#define locals_LINUX__ARM_sys_getpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_getpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fchdir ['unsigned int fd']
#define locals_LINUX__ARM_sys_fchdir(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchdir(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_fchdir(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_bdflush ['int func', 'long data']
#define locals_LINUX__ARM_sys_bdflush(ctx, pref) \
	int32_t UNUSED(pref##func) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##_data) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_bdflush(ctx, pref) \
	int32_t &UNUSED(pref##func) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##_data) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_bdflush(ctx, pref) \
	const int32_t &UNUSED(pref##func) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##_data) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_sysfs ['int option', 'unsigned long arg1', 'unsigned long arg2']
#define locals_LINUX__ARM_sys_sysfs(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sysfs(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sysfs(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_personality ['unsigned int personality']
#define locals_LINUX__ARM_sys_personality(ctx, pref) \
	uint32_t UNUSED(pref##personality) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_personality(ctx, pref) \
	uint32_t &UNUSED(pref##personality) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_personality(ctx, pref) \
	const uint32_t &UNUSED(pref##personality) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsuid16 ['old_uid_t uid']
#define locals_LINUX__ARM_sys_setfsuid16(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setfsuid16(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setfsuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsgid16 ['old_gid_t gid']
#define locals_LINUX__ARM_sys_setfsgid16(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setfsgid16(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setfsgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_llseek ['unsigned int fd', 'unsigned long offset_high', 'unsigned long offset_low', 'loff_t __user *result', 'unsigned int whence']
#define locals_LINUX__ARM_sys_llseek(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##offset_high) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset_low) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##result) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##whence) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_llseek(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##offset_high) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset_low) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##result) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##whence) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_llseek(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##offset_high) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset_low) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##result) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##whence) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_getdents ['unsigned int fd', 'struct linux_dirent __user *dirent', 'unsigned int count']
#define locals_LINUX__ARM_sys_getdents(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dirent) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getdents(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getdents(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_select ['int n', 'fd_set __user *inp', 'fd_set __user *outp', 'fd_set __user *exp', 'struct timeval __user *tvp']
#define locals_LINUX__ARM_sys_select(ctx, pref) \
	int32_t UNUSED(pref##n) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##inp) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##outp) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##exp) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##tvp) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_select(ctx, pref) \
	int32_t &UNUSED(pref##n) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##inp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##outp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##exp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##tvp) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_select(ctx, pref) \
	const int32_t &UNUSED(pref##n) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##inp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##outp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##exp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##tvp) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_flock ['unsigned int fd', 'unsigned int cmd']
#define locals_LINUX__ARM_sys_flock(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_flock(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_flock(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_msync ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__ARM_sys_msync(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_msync(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_msync(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_readv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__ARM_sys_readv(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_readv(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_readv(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_writev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__ARM_sys_writev(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_writev(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_writev(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getsid ['pid_t pid']
#define locals_LINUX__ARM_sys_getsid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getsid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_getsid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fdatasync ['unsigned int fd']
#define locals_LINUX__ARM_sys_fdatasync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fdatasync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_fdatasync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sysctl ['struct __sysctl_args __user *args']
#define locals_LINUX__ARM_sys_sysctl(ctx, pref) \
	uint32_t UNUSED(pref##args) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sysctl(ctx, pref) \
	uint32_t &UNUSED(pref##args) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sysctl(ctx, pref) \
	const uint32_t &UNUSED(pref##args) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mlock ['unsigned long start', 'size_t len']
#define locals_LINUX__ARM_sys_mlock(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mlock(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_mlock(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_munlock ['unsigned long start', 'size_t len']
#define locals_LINUX__ARM_sys_munlock(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_munlock(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_munlock(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mlockall ['int flags']
#define locals_LINUX__ARM_sys_mlockall(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mlockall(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_mlockall(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_munlockall ['void']
#undef locals_LINUX__ARM_sys_munlockall
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_munlockall
#endif

// long sys_sched_setparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__ARM_sys_sched_setparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_setparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_sched_setparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sched_getparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__ARM_sys_sched_getparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_getparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_sched_getparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sched_setscheduler ['pid_t pid', 'int policy', 'struct sched_param __user *param']
#define locals_LINUX__ARM_sys_sched_setscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_setscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sched_setscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getscheduler ['pid_t pid']
#define locals_LINUX__ARM_sys_sched_getscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_getscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sched_getscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_yield ['void']
#undef locals_LINUX__ARM_sys_sched_yield
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_sched_yield
#endif

// long sys_sched_get_priority_max ['int policy']
#define locals_LINUX__ARM_sys_sched_get_priority_max(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_get_priority_max(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sched_get_priority_max(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_get_priority_min ['int policy']
#define locals_LINUX__ARM_sys_sched_get_priority_min(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_get_priority_min(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_sched_get_priority_min(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_rr_get_interval ['pid_t pid', 'struct timespec __user *interval']
#define locals_LINUX__ARM_sys_sched_rr_get_interval(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_rr_get_interval(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_sched_rr_get_interval(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_nanosleep ['struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__ARM_sys_nanosleep(ctx, pref) \
	uint32_t UNUSED(pref##rqtp) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rmtp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_nanosleep(ctx, pref) \
	uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_nanosleep(ctx, pref) \
	const uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mremap ['unsigned long addr', 'unsigned long old_len', 'unsigned long new_len', 'unsigned long flags', 'unsigned long new_addr']
#define locals_LINUX__ARM_sys_mremap(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##old_len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##new_addr) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mremap(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##old_len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##new_addr) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_mremap(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##old_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##new_addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setresuid16 ['old_uid_t ruid', 'old_uid_t euid', 'old_uid_t suid']
#define locals_LINUX__ARM_sys_setresuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setresuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setresuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresuid16 ['old_uid_t __user *ruid', 'old_uid_t __user *euid', 'old_uid_t __user *suid']
#define locals_LINUX__ARM_sys_getresuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getresuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getresuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_poll ['struct pollfd __user *ufds', 'unsigned int nfds', 'int timeout']
#define locals_LINUX__ARM_sys_poll(ctx, pref) \
	uint32_t UNUSED(pref##ufds) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nfds) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_poll(ctx, pref) \
	uint32_t &UNUSED(pref##ufds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_poll(ctx, pref) \
	const uint32_t &UNUSED(pref##ufds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_setresgid16 ['old_gid_t rgid', 'old_gid_t egid', 'old_gid_t sgid']
#define locals_LINUX__ARM_sys_setresgid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setresgid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setresgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresgid16 ['old_gid_t __user *rgid', 'old_gid_t __user *egid', 'old_gid_t __user *sgid']
#define locals_LINUX__ARM_sys_getresgid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getresgid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getresgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_prctl ['int option', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__ARM_sys_prctl(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_prctl(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_prctl(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// int sys_rt_sigreturn ['struct pt_regs *regs']
#define locals_LINUX__ARM_sys_rt_sigreturn(ctx, pref) \
	uint32_t UNUSED(pref##regs) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigreturn(ctx, pref) \
	uint32_t &UNUSED(pref##regs) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_rt_sigreturn(ctx, pref) \
	const uint32_t &UNUSED(pref##regs) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_rt_sigaction ['int', 'const struct sigaction __user *', 'struct sigaction __user *', 'size_t']
#define locals_LINUX__ARM_sys_rt_sigaction(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigaction(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_rt_sigaction(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigprocmask ['int how', 'sigset_t __user *set', 'sigset_t __user *oset', 'size_t sigsetsize']
#define locals_LINUX__ARM_sys_rt_sigprocmask(ctx, pref) \
	int32_t UNUSED(pref##how) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##oset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigprocmask(ctx, pref) \
	int32_t &UNUSED(pref##how) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##oset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_rt_sigprocmask(ctx, pref) \
	const int32_t &UNUSED(pref##how) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##oset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigpending ['sigset_t __user *set', 'size_t sigsetsize']
#define locals_LINUX__ARM_sys_rt_sigpending(ctx, pref) \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigpending(ctx, pref) \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_rt_sigpending(ctx, pref) \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rt_sigtimedwait ['const sigset_t __user *uthese', 'siginfo_t __user *uinfo', 'const struct timespec __user *uts', 'size_t sigsetsize']
#define locals_LINUX__ARM_sys_rt_sigtimedwait(ctx, pref) \
	uint32_t UNUSED(pref##uthese) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uts) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigtimedwait(ctx, pref) \
	uint32_t &UNUSED(pref##uthese) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uts) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_rt_sigtimedwait(ctx, pref) \
	const uint32_t &UNUSED(pref##uthese) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uts) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigqueueinfo ['int pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__ARM_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_rt_sigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_rt_sigsuspend ['sigset_t __user *unewset', 'size_t sigsetsize']
#define locals_LINUX__ARM_sys_rt_sigsuspend(ctx, pref) \
	uint32_t UNUSED(pref##unewset) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_sigsuspend(ctx, pref) \
	uint32_t &UNUSED(pref##unewset) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_rt_sigsuspend(ctx, pref) \
	const uint32_t &UNUSED(pref##unewset) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_pread64 ['unsigned int fd', 'char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__ARM_sys_pread64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pread64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_pread64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_pwrite64 ['unsigned int fd', 'const char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__ARM_sys_pwrite64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pwrite64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_pwrite64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_chown16 ['const char __user *filename', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__ARM_sys_chown16(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_chown16(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_chown16(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getcwd ['char __user *buf', 'unsigned long size']
#define locals_LINUX__ARM_sys_getcwd(ctx, pref) \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getcwd(ctx, pref) \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getcwd(ctx, pref) \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_capget ['cap_user_header_t header', 'cap_user_data_t dataptr']
#define locals_LINUX__ARM_sys_capget(ctx, pref) \
	uint32_t UNUSED(pref##header) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dataptr) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_capget(ctx, pref) \
	uint32_t &UNUSED(pref##header) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dataptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_capget(ctx, pref) \
	const uint32_t &UNUSED(pref##header) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dataptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_capset ['cap_user_header_t header', 'const cap_user_data_t data']
#define locals_LINUX__ARM_sys_capset(ctx, pref) \
	uint32_t UNUSED(pref##header) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_capset(ctx, pref) \
	uint32_t &UNUSED(pref##header) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_capset(ctx, pref) \
	const uint32_t &UNUSED(pref##header) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sigaltstack ['const struct sigaltstack __user *uss', 'struct sigaltstack __user *uoss']
#define locals_LINUX__ARM_sys_sigaltstack(ctx, pref) \
	uint32_t UNUSED(pref##uss) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uoss) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sigaltstack(ctx, pref) \
	uint32_t &UNUSED(pref##uss) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uoss) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_sigaltstack(ctx, pref) \
	const uint32_t &UNUSED(pref##uss) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uoss) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sendfile ['int out_fd', 'int in_fd', 'off_t __user *offset', 'size_t count']
#define locals_LINUX__ARM_sys_sendfile(ctx, pref) \
	int32_t UNUSED(pref##out_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##in_fd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sendfile(ctx, pref) \
	int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_sendfile(ctx, pref) \
	const int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_vfork ['void']
#undef locals_LINUX__ARM_sys_vfork
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_vfork
#endif

// long sys_getrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__ARM_sys_getrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rlim) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long do_mmap2 ['unsigned long addr', 'unsigned long len', 'unsigned long prot', 'unsigned long flags', 'unsigned long fd', 'unsigned long pgoff']
#define locals_LINUX__ARM_do_mmap2(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##pgoff) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_do_mmap2(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_do_mmap2(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_truncate64 ['const char __user *path', 'loff_t length']
#define locals_LINUX__ARM_sys_truncate64(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##length) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_truncate64(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##length) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_truncate64(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##length) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_ftruncate64 ['unsigned int fd', 'loff_t length']
#define locals_LINUX__ARM_sys_ftruncate64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##length) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ftruncate64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##length) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_ftruncate64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##length) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_stat64 ['const char __user *filename', 'struct stat64 __user *statbuf']
#define locals_LINUX__ARM_sys_stat64(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_stat64(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_stat64(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lstat64 ['const char __user *filename', 'struct stat64 __user *statbuf']
#define locals_LINUX__ARM_sys_lstat64(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lstat64(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_lstat64(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fstat64 ['unsigned long fd', 'struct stat64 __user *statbuf']
#define locals_LINUX__ARM_sys_fstat64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fstat64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_fstat64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lchown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__ARM_sys_lchown(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lchown(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_lchown(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getuid ['void']
#undef locals_LINUX__ARM_sys_getuid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getuid
#endif

// long sys_getgid ['void']
#undef locals_LINUX__ARM_sys_getgid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getgid
#endif

// long sys_geteuid ['void']
#undef locals_LINUX__ARM_sys_geteuid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_geteuid
#endif

// long sys_getegid ['void']
#undef locals_LINUX__ARM_sys_getegid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_getegid
#endif

// long sys_setreuid ['uid_t ruid', 'uid_t euid']
#define locals_LINUX__ARM_sys_setreuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setreuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setreuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setregid ['gid_t rgid', 'gid_t egid']
#define locals_LINUX__ARM_sys_setregid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setregid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setregid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__ARM_sys_getgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_getgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__ARM_sys_setgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchown ['unsigned int fd', 'uid_t user', 'gid_t group']
#define locals_LINUX__ARM_sys_fchown(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchown(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fchown(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setresuid ['uid_t ruid', 'uid_t euid', 'uid_t suid']
#define locals_LINUX__ARM_sys_setresuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setresuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setresuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresuid ['uid_t __user *ruid', 'uid_t __user *euid', 'uid_t __user *suid']
#define locals_LINUX__ARM_sys_getresuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getresuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getresuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setresgid ['gid_t rgid', 'gid_t egid', 'gid_t sgid']
#define locals_LINUX__ARM_sys_setresgid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setresgid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_setresgid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresgid ['gid_t __user *rgid', 'gid_t __user *egid', 'gid_t __user *sgid']
#define locals_LINUX__ARM_sys_getresgid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getresgid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getresgid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__ARM_sys_chown(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_chown(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_chown(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setuid ['uid_t uid']
#define locals_LINUX__ARM_sys_setuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setgid ['gid_t gid']
#define locals_LINUX__ARM_sys_setgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsuid ['uid_t uid']
#define locals_LINUX__ARM_sys_setfsuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setfsuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setfsuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsgid ['gid_t gid']
#define locals_LINUX__ARM_sys_setfsgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setfsgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_setfsgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getdents64 ['unsigned int fd', 'struct linux_dirent64 __user *dirent', 'unsigned int count']
#define locals_LINUX__ARM_sys_getdents64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dirent) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getdents64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getdents64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_pivot_root ['const char __user *new_root', 'const char __user *put_old']
#define locals_LINUX__ARM_sys_pivot_root(ctx, pref) \
	uint32_t UNUSED(pref##new_root) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##put_old) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pivot_root(ctx, pref) \
	uint32_t &UNUSED(pref##new_root) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##put_old) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_pivot_root(ctx, pref) \
	const uint32_t &UNUSED(pref##new_root) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##put_old) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mincore ['unsigned long start', 'size_t len', 'unsigned char __user *vec']
#define locals_LINUX__ARM_sys_mincore(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mincore(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mincore(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_madvise ['unsigned long start', 'size_t len', 'int behavior']
#define locals_LINUX__ARM_sys_madvise(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##behavior) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_madvise(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##behavior) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_madvise(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##behavior) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_fcntl64 ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__ARM_sys_fcntl64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fcntl64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fcntl64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_gettid ['void']
#undef locals_LINUX__ARM_sys_gettid
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_gettid
#endif

// long sys_readahead ['int fd', 'loff_t offset', 'size_t count']
#define locals_LINUX__ARM_sys_readahead(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_readahead(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_readahead(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__ARM_sys_setxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_setxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_lsetxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__ARM_sys_lsetxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lsetxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_lsetxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_fsetxattr ['int fd', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__ARM_sys_fsetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fsetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_fsetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__ARM_sys_getxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_getxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_lgetxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__ARM_sys_lgetxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lgetxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_lgetxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fgetxattr ['int fd', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__ARM_sys_fgetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fgetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_fgetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_listxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__ARM_sys_listxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_listxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_listxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_llistxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__ARM_sys_llistxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_llistxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_llistxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_flistxattr ['int fd', 'char __user *list', 'size_t size']
#define locals_LINUX__ARM_sys_flistxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_flistxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_flistxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_removexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__ARM_sys_removexattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_removexattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_removexattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lremovexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__ARM_sys_lremovexattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lremovexattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_lremovexattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fremovexattr ['int fd', 'const char __user *name']
#define locals_LINUX__ARM_sys_fremovexattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fremovexattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_fremovexattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_tkill ['int pid', 'int sig']
#define locals_LINUX__ARM_sys_tkill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_tkill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_tkill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_sendfile64 ['int out_fd', 'int in_fd', 'loff_t __user *offset', 'size_t count']
#define locals_LINUX__ARM_sys_sendfile64(ctx, pref) \
	int32_t UNUSED(pref##out_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##in_fd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sendfile64(ctx, pref) \
	int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_sendfile64(ctx, pref) \
	const int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_futex ['u32 __user *uaddr', 'int op', 'u32 val', 'struct timespec __user *utime', 'u32 __user *uaddr2', 'u32 val3']
#define locals_LINUX__ARM_sys_futex(ctx, pref) \
	uint32_t UNUSED(pref##uaddr) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##val) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##utime) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##uaddr2) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##val3) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_futex(ctx, pref) \
	uint32_t &UNUSED(pref##uaddr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##val) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##utime) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##uaddr2) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##val3) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_futex(ctx, pref) \
	const uint32_t &UNUSED(pref##uaddr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##val) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##utime) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##uaddr2) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##val3) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_sched_setaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__ARM_sys_sched_setaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user_mask_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_setaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sched_setaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__ARM_sys_sched_getaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user_mask_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_getaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sched_getaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_io_setup ['unsigned nr_reqs', 'aio_context_t __user *ctx']
#define locals_LINUX__ARM_sys_io_setup(ctx, pref) \
	uint32_t UNUSED(pref##nr_reqs) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ctx) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_io_setup(ctx, pref) \
	uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_io_setup(ctx, pref) \
	const uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_io_destroy ['aio_context_t ctx']
#define locals_LINUX__ARM_sys_io_destroy(ctx, pref) \
	uint32_t UNUSED(pref##ctx) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_io_destroy(ctx, pref) \
	uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_io_destroy(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_io_getevents ['aio_context_t ctx_id', 'long min_nr', 'long nr', 'struct io_event __user *events', 'struct timespec __user *timeout']
#define locals_LINUX__ARM_sys_io_getevents(ctx, pref) \
	uint32_t UNUSED(pref##ctx_id) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##min_nr) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##nr) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_io_getevents(ctx, pref) \
	uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##min_nr) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##nr) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_io_getevents(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##min_nr) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##nr) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_io_submit ['aio_context_t', 'long', 'struct iocb __user * __user *']
#define locals_LINUX__ARM_sys_io_submit(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_io_submit(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_io_submit(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_io_cancel ['aio_context_t ctx_id', 'struct iocb __user *iocb', 'struct io_event __user *result']
#define locals_LINUX__ARM_sys_io_cancel(ctx, pref) \
	uint32_t UNUSED(pref##ctx_id) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##iocb) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_io_cancel(ctx, pref) \
	uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##iocb) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_io_cancel(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##iocb) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_exit_group ['int error_code']
#define locals_LINUX__ARM_sys_exit_group(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_exit_group(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_exit_group(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_lookup_dcookie ['u64 cookie64', 'char __user *buf', 'size_t len']
#define locals_LINUX__ARM_sys_lookup_dcookie(ctx, pref) \
	uint64_t UNUSED(pref##cookie64) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_lookup_dcookie(ctx, pref) \
	uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_lookup_dcookie(ctx, pref) \
	const uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_epoll_create ['int size']
#define locals_LINUX__ARM_sys_epoll_create(ctx, pref) \
	int32_t UNUSED(pref##size) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_epoll_create(ctx, pref) \
	int32_t &UNUSED(pref##size) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_epoll_create(ctx, pref) \
	const int32_t &UNUSED(pref##size) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_epoll_ctl ['int epfd', 'int op', 'int fd', 'struct epoll_event __user *event']
#define locals_LINUX__ARM_sys_epoll_ctl(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##event) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_epoll_ctl(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_epoll_ctl(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_epoll_wait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout']
#define locals_LINUX__ARM_sys_epoll_wait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_epoll_wait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_epoll_wait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_remap_file_pages ['unsigned long start', 'unsigned long size', 'unsigned long prot', 'unsigned long pgoff', 'unsigned long flags']
#define locals_LINUX__ARM_sys_remap_file_pages(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pgoff) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_remap_file_pages(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_remap_file_pages(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_set_tid_address ['int __user *tidptr']
#define locals_LINUX__ARM_sys_set_tid_address(ctx, pref) \
	uint32_t UNUSED(pref##tidptr) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_set_tid_address(ctx, pref) \
	uint32_t &UNUSED(pref##tidptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_set_tid_address(ctx, pref) \
	const uint32_t &UNUSED(pref##tidptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_timer_create ['clockid_t which_clock', 'struct sigevent __user *timer_event_spec', 'timer_t __user *created_timer_id']
#define locals_LINUX__ARM_sys_timer_create(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##timer_event_spec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##created_timer_id) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timer_create(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_timer_create(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_timer_settime ['timer_t timer_id', 'int flags', 'const struct itimerspec __user *new_setting', 'struct itimerspec __user *old_setting']
#define locals_LINUX__ARM_sys_timer_settime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_setting) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##old_setting) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timer_settime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_setting) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##old_setting) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_timer_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##old_setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_timer_gettime ['timer_t timer_id', 'struct itimerspec __user *setting']
#define locals_LINUX__ARM_sys_timer_gettime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##setting) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timer_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##setting) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_timer_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_timer_getoverrun ['timer_t timer_id']
#define locals_LINUX__ARM_sys_timer_getoverrun(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timer_getoverrun(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_timer_getoverrun(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_timer_delete ['timer_t timer_id']
#define locals_LINUX__ARM_sys_timer_delete(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timer_delete(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_timer_delete(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_clock_settime ['clockid_t which_clock', 'const struct timespec __user *tp']
#define locals_LINUX__ARM_sys_clock_settime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clock_settime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_clock_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_gettime ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__ARM_sys_clock_gettime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clock_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_clock_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_getres ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__ARM_sys_clock_getres(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clock_getres(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_clock_getres(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_nanosleep ['clockid_t which_clock', 'int flags', 'const struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__ARM_sys_clock_nanosleep(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##rqtp) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rmtp) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clock_nanosleep(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_clock_nanosleep(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_statfs64 ['const char __user *path', 'size_t sz', 'struct statfs64 __user *buf']
#define locals_LINUX__ARM_sys_statfs64(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sz) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_statfs64(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_statfs64(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fstatfs64 ['unsigned int fd', 'size_t sz', 'struct statfs64 __user *buf']
#define locals_LINUX__ARM_sys_fstatfs64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sz) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fstatfs64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fstatfs64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_tgkill ['int tgid', 'int pid', 'int sig']
#define locals_LINUX__ARM_sys_tgkill(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_tgkill(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_tgkill(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_utimes ['char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__ARM_sys_utimes(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_utimes(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_utimes(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_arm_fadvise64_64 ['int fd', 'int advice', 'loff_t offset', 'loff_t len']
#define locals_LINUX__ARM_sys_arm_fadvise64_64(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##advice) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_arm_fadvise64_64(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##advice) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_arm_fadvise64_64(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##advice) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_pciconfig_iobase ['long which', 'unsigned long bus', 'unsigned long devfn']
#define locals_LINUX__ARM_sys_pciconfig_iobase(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##bus) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##devfn) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pciconfig_iobase(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##bus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##devfn) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_pciconfig_iobase(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##bus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##devfn) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_pciconfig_read ['unsigned long bus', 'unsigned long dfn', 'unsigned long off', 'unsigned long len', 'void __user *buf']
#define locals_LINUX__ARM_sys_pciconfig_read(ctx, pref) \
	uint32_t UNUSED(pref##bus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dfn) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##off) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pciconfig_read(ctx, pref) \
	uint32_t &UNUSED(pref##bus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dfn) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##off) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_pciconfig_read(ctx, pref) \
	const uint32_t &UNUSED(pref##bus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dfn) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##off) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_pciconfig_write ['unsigned long bus', 'unsigned long dfn', 'unsigned long off', 'unsigned long len', 'void __user *buf']
#define locals_LINUX__ARM_sys_pciconfig_write(ctx, pref) \
	uint32_t UNUSED(pref##bus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dfn) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##off) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pciconfig_write(ctx, pref) \
	uint32_t &UNUSED(pref##bus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dfn) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##off) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_pciconfig_write(ctx, pref) \
	const uint32_t &UNUSED(pref##bus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dfn) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##off) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_mq_open ['const char __user *name', 'int oflag', 'umode_t mode', 'struct mq_attr __user *attr']
#define locals_LINUX__ARM_sys_mq_open(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##oflag) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_open(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##oflag) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_mq_open(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##oflag) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_mq_unlink ['const char __user *name']
#define locals_LINUX__ARM_sys_mq_unlink(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_unlink(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_mq_unlink(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mq_timedsend ['mqd_t mqdes', 'const char __user *msg_ptr', 'size_t msg_len', 'unsigned int msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__ARM_sys_mq_timedsend(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##msg_prio) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##abs_timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_timedsend(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_mq_timedsend(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_mq_timedreceive ['mqd_t mqdes', 'char __user *msg_ptr', 'size_t msg_len', 'unsigned int __user *msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__ARM_sys_mq_timedreceive(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##msg_prio) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##abs_timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_timedreceive(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_mq_timedreceive(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_mq_notify ['mqd_t mqdes', 'const struct sigevent __user *notification']
#define locals_LINUX__ARM_sys_mq_notify(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##notification) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_notify(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##notification) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_mq_notify(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##notification) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mq_getsetattr ['mqd_t mqdes', 'const struct mq_attr __user *mqstat', 'struct mq_attr __user *omqstat']
#define locals_LINUX__ARM_sys_mq_getsetattr(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mqstat) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##omqstat) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mq_getsetattr(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mqstat) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##omqstat) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mq_getsetattr(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mqstat) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##omqstat) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_waitid ['int which', 'pid_t pid', 'struct siginfo __user *infop', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__ARM_sys_waitid(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##infop) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_waitid(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##infop) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_waitid(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##infop) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_socket ['int', 'int', 'int']
#define locals_LINUX__ARM_sys_socket(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_socket(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_socket(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_bind ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__ARM_sys_bind(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_bind(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_bind(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_connect ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__ARM_sys_connect(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_connect(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_connect(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_listen ['int', 'int']
#define locals_LINUX__ARM_sys_listen(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_listen(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_listen(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_accept ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__ARM_sys_accept(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_accept(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_accept(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getsockname ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__ARM_sys_getsockname(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getsockname(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getsockname(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpeername ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__ARM_sys_getpeername(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getpeername(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getpeername(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_socketpair ['int', 'int', 'int', 'int __user *']
#define locals_LINUX__ARM_sys_socketpair(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_socketpair(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_socketpair(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_send ['int', 'void __user *', 'size_t', 'unsigned']
#define locals_LINUX__ARM_sys_send(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_send(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_send(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_sendto ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int']
#define locals_LINUX__ARM_sys_sendto(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##arg5) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sendto(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##arg5) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_sendto(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##arg5) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_recv ['int', 'void __user *', 'size_t', 'unsigned']
#define locals_LINUX__ARM_sys_recv(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_recv(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_recv(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_recvfrom ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__ARM_sys_recvfrom(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_recvfrom(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_recvfrom(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_shutdown ['int', 'int']
#define locals_LINUX__ARM_sys_shutdown(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_shutdown(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_shutdown(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int optlen']
#define locals_LINUX__ARM_sys_setsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##optval) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##optlen) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##optval) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##optlen) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_setsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##optval) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##optlen) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int __user *optlen']
#define locals_LINUX__ARM_sys_getsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##optval) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##optlen) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##optval) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##optlen) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_getsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##optval) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##optlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_sendmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__ARM_sys_sendmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sendmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sendmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_recvmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__ARM_sys_recvmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_recvmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_recvmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_semop ['int semid', 'struct sembuf __user *sops', 'unsigned nsops']
#define locals_LINUX__ARM_sys_semop(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sops) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nsops) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_semop(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sops) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_semop(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sops) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_semget ['key_t key', 'int nsems', 'int semflg']
#define locals_LINUX__ARM_sys_semget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##nsems) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##semflg) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_semget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##nsems) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##semflg) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_semget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##nsems) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##semflg) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_semctl ['int semid', 'int semnum', 'int cmd', 'unsigned long arg']
#define locals_LINUX__ARM_sys_semctl(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##semnum) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_semctl(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##semnum) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_semctl(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##semnum) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_msgsnd ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'int msgflg']
#define locals_LINUX__ARM_sys_msgsnd(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msgp) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msgsz) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_msgsnd(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msgp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_msgsnd(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msgp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_msgrcv ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'long msgtyp', 'int msgflg']
#define locals_LINUX__ARM_sys_msgrcv(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msgp) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msgsz) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##msgtyp) = *(int32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_msgrcv(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msgp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##msgtyp) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_msgrcv(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msgp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msgsz) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##msgtyp) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_msgget ['key_t key', 'int msgflg']
#define locals_LINUX__ARM_sys_msgget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##msgflg) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_msgget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_msgget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##msgflg) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_msgctl ['int msqid', 'int cmd', 'struct msqid_ds __user *buf']
#define locals_LINUX__ARM_sys_msgctl(ctx, pref) \
	int32_t UNUSED(pref##msqid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_msgctl(ctx, pref) \
	int32_t &UNUSED(pref##msqid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_msgctl(ctx, pref) \
	const int32_t &UNUSED(pref##msqid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_shmat ['int shmid', 'char __user *shmaddr', 'int shmflg']
#define locals_LINUX__ARM_sys_shmat(ctx, pref) \
	int32_t UNUSED(pref##shmid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##shmaddr) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##shmflg) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_shmat(ctx, pref) \
	int32_t &UNUSED(pref##shmid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##shmaddr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##shmflg) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_shmat(ctx, pref) \
	const int32_t &UNUSED(pref##shmid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##shmaddr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##shmflg) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_shmdt ['char __user *shmaddr']
#define locals_LINUX__ARM_sys_shmdt(ctx, pref) \
	uint32_t UNUSED(pref##shmaddr) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_shmdt(ctx, pref) \
	uint32_t &UNUSED(pref##shmaddr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_shmdt(ctx, pref) \
	const uint32_t &UNUSED(pref##shmaddr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_shmget ['key_t key', 'size_t size', 'int flag']
#define locals_LINUX__ARM_sys_shmget(ctx, pref) \
	uint32_t UNUSED(pref##key) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_shmget(ctx, pref) \
	uint32_t &UNUSED(pref##key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_shmget(ctx, pref) \
	const uint32_t &UNUSED(pref##key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_shmctl ['int shmid', 'int cmd', 'struct shmid_ds __user *buf']
#define locals_LINUX__ARM_sys_shmctl(ctx, pref) \
	int32_t UNUSED(pref##shmid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_shmctl(ctx, pref) \
	int32_t &UNUSED(pref##shmid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_shmctl(ctx, pref) \
	const int32_t &UNUSED(pref##shmid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_add_key ['const char __user *_type', 'const char __user *_description', 'const void __user *_payload', 'size_t plen', 'key_serial_t destringid']
#define locals_LINUX__ARM_sys_add_key(ctx, pref) \
	uint32_t UNUSED(pref##_type) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_description) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##_payload) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##plen) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_add_key(ctx, pref) \
	uint32_t &UNUSED(pref##_type) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_description) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##_payload) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##plen) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_add_key(ctx, pref) \
	const uint32_t &UNUSED(pref##_type) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_description) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##_payload) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##plen) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_request_key ['const char __user *_type', 'const char __user *_description', 'const char __user *_callout_info', 'key_serial_t destringid']
#define locals_LINUX__ARM_sys_request_key(ctx, pref) \
	uint32_t UNUSED(pref##_type) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_description) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##_callout_info) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_request_key(ctx, pref) \
	uint32_t &UNUSED(pref##_type) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_description) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##_callout_info) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_request_key(ctx, pref) \
	const uint32_t &UNUSED(pref##_type) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_description) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##_callout_info) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_keyctl ['int cmd', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__ARM_sys_keyctl(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_keyctl(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_keyctl(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_semtimedop ['int semid', 'struct sembuf __user *sops', 'unsigned nsops', 'const struct timespec __user *timeout']
#define locals_LINUX__ARM_sys_semtimedop(ctx, pref) \
	int32_t UNUSED(pref##semid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sops) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nsops) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_semtimedop(ctx, pref) \
	int32_t &UNUSED(pref##semid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sops) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_semtimedop(ctx, pref) \
	const int32_t &UNUSED(pref##semid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sops) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nsops) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_ioprio_set ['int which', 'int who', 'int ioprio']
#define locals_LINUX__ARM_sys_ioprio_set(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##ioprio) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ioprio_set(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_ioprio_set(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_ioprio_get ['int which', 'int who']
#define locals_LINUX__ARM_sys_ioprio_get(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ioprio_get(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_ioprio_get(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init ['void']
#undef locals_LINUX__ARM_sys_inotify_init
#if defined(__cplusplus)
#undef references_LINUX__ARM_sys_inotify_init
#endif

// long sys_inotify_add_watch ['int fd', 'const char __user *path', 'u32 mask']
#define locals_LINUX__ARM_sys_inotify_add_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_inotify_add_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_inotify_add_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_inotify_rm_watch ['int fd', '__s32 wd']
#define locals_LINUX__ARM_sys_inotify_rm_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##wd) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_inotify_rm_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##wd) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_inotify_rm_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##wd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_mbind ['unsigned long start', 'unsigned long len', 'unsigned long mode', 'const unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned flags']
#define locals_LINUX__ARM_sys_mbind(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mbind(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_mbind(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_get_mempolicy ['int __user *policy', 'unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned long addr', 'unsigned long flags']
#define locals_LINUX__ARM_sys_get_mempolicy(ctx, pref) \
	uint32_t UNUSED(pref##policy) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_get_mempolicy(ctx, pref) \
	uint32_t &UNUSED(pref##policy) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_get_mempolicy(ctx, pref) \
	const uint32_t &UNUSED(pref##policy) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_set_mempolicy ['int mode', 'const unsigned long __user *nmask', 'unsigned long maxnode']
#define locals_LINUX__ARM_sys_set_mempolicy(ctx, pref) \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_set_mempolicy(ctx, pref) \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_set_mempolicy(ctx, pref) \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_openat ['int dfd', 'const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__ARM_sys_openat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_openat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_openat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_mkdirat ['int dfd', 'const char __user *pathname', 'umode_t mode']
#define locals_LINUX__ARM_sys_mkdirat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mkdirat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mkdirat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_mknodat ['int dfd', 'const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__ARM_sys_mknodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mknodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_mknodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fchownat ['int dfd', 'const char __user *filename', 'uid_t user', 'gid_t group', 'int flag']
#define locals_LINUX__ARM_sys_fchownat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchownat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_fchownat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_futimesat ['int dfd', 'const char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__ARM_sys_futimesat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_futimesat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_futimesat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fstatat64 ['int dfd', 'const char __user *filename', 'struct stat64 __user *statbuf', 'int flag']
#define locals_LINUX__ARM_sys_fstatat64(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fstatat64(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_fstatat64(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_unlinkat ['int dfd', 'const char __user *pathname', 'int flag']
#define locals_LINUX__ARM_sys_unlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_unlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_unlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_renameat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__ARM_sys_renameat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_renameat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_renameat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_linkat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'int flags']
#define locals_LINUX__ARM_sys_linkat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_linkat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_linkat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_symlinkat ['const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__ARM_sys_symlinkat(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_symlinkat(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_symlinkat(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_readlinkat ['int dfd', 'const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__ARM_sys_readlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_readlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_readlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_fchmodat ['int dfd', 'const char __user *filename', 'umode_t mode']
#define locals_LINUX__ARM_sys_fchmodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fchmodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_fchmodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_faccessat ['int dfd', 'const char __user *filename', 'int mode']
#define locals_LINUX__ARM_sys_faccessat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_faccessat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_faccessat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pselect6 ['int', 'fd_set __user *', 'fd_set __user *', 'fd_set __user *', 'struct timespec __user *', 'void __user *']
#define locals_LINUX__ARM_sys_pselect6(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pselect6(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_pselect6(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_ppoll ['struct pollfd __user *', 'unsigned int', 'struct timespec __user *', 'const sigset_t __user *', 'size_t']
#define locals_LINUX__ARM_sys_ppoll(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_ppoll(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_ppoll(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_unshare ['unsigned long unshare_flags']
#define locals_LINUX__ARM_sys_unshare(ctx, pref) \
	uint32_t UNUSED(pref##unshare_flags) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_unshare(ctx, pref) \
	uint32_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_unshare(ctx, pref) \
	const uint32_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_set_robust_list ['struct robust_list_head __user *head', 'size_t len']
#define locals_LINUX__ARM_sys_set_robust_list(ctx, pref) \
	uint32_t UNUSED(pref##head) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_set_robust_list(ctx, pref) \
	uint32_t &UNUSED(pref##head) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_set_robust_list(ctx, pref) \
	const uint32_t &UNUSED(pref##head) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_get_robust_list ['int pid', 'struct robust_list_head __user * __user *head_ptr', 'size_t __user *len_ptr']
#define locals_LINUX__ARM_sys_get_robust_list(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##head_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_get_robust_list(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##head_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_get_robust_list(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##head_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_splice ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']
#define locals_LINUX__ARM_sys_splice(ctx, pref) \
	int32_t UNUSED(pref##fd_in) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##off_in) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd_out) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##off_out) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_splice(ctx, pref) \
	int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_splice(ctx, pref) \
	const int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_sync_file_range2 ['int fd', 'unsigned int flags', 'loff_t offset', 'loff_t nbytes']
#define locals_LINUX__ARM_sys_sync_file_range2(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##nbytes) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sync_file_range2(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_sync_file_range2(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_tee ['int fdin', 'int fdout', 'size_t len', 'unsigned int flags']
#define locals_LINUX__ARM_sys_tee(ctx, pref) \
	int32_t UNUSED(pref##fdin) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##fdout) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_tee(ctx, pref) \
	int32_t &UNUSED(pref##fdin) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##fdout) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_tee(ctx, pref) \
	const int32_t &UNUSED(pref##fdin) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##fdout) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_vmsplice ['int fd', 'const struct iovec __user *iov', 'unsigned long nr_segs', 'unsigned int flags']
#define locals_LINUX__ARM_sys_vmsplice(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##iov) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nr_segs) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_vmsplice(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##iov) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nr_segs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_vmsplice(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##iov) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nr_segs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_move_pages ['pid_t pid', 'unsigned long nr_pages', 'const void __user * __user *pages', 'const int __user *nodes', 'int __user *status', 'int flags']
#define locals_LINUX__ARM_sys_move_pages(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nr_pages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##pages) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##nodes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##status) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_move_pages(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nr_pages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##pages) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##nodes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##status) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_move_pages(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nr_pages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##pages) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##nodes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##status) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_getcpu ['unsigned __user *cpu', 'unsigned __user *node', 'struct getcpu_cache __user *cache']
#define locals_LINUX__ARM_sys_getcpu(ctx, pref) \
	uint32_t UNUSED(pref##_cpu) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##node) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##cache) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getcpu(ctx, pref) \
	uint32_t &UNUSED(pref##_cpu) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##node) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##cache) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getcpu(ctx, pref) \
	const uint32_t &UNUSED(pref##_cpu) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##node) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##cache) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_epoll_pwait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout', 'const sigset_t __user *sigmask', 'size_t sigsetsize']
#define locals_LINUX__ARM_sys_epoll_pwait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##sigmask) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_epoll_pwait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##sigmask) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_epoll_pwait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##sigmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_kexec_load ['unsigned long entry', 'unsigned long nr_segments', 'struct kexec_segment __user *segments', 'unsigned long flags']
#define locals_LINUX__ARM_sys_kexec_load(ctx, pref) \
	uint32_t UNUSED(pref##entry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nr_segments) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##segments) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_kexec_load(ctx, pref) \
	uint32_t &UNUSED(pref##entry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nr_segments) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##segments) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_kexec_load(ctx, pref) \
	const uint32_t &UNUSED(pref##entry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nr_segments) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##segments) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_utimensat ['int dfd', 'const char __user *filename', 'struct timespec __user *utimes', 'int flags']
#define locals_LINUX__ARM_sys_utimensat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_utimensat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_utimensat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_signalfd ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask']
#define locals_LINUX__ARM_sys_signalfd(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user_mask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_signalfd(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_signalfd(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_timerfd_create ['int clockid', 'int flags']
#define locals_LINUX__ARM_sys_timerfd_create(ctx, pref) \
	int32_t UNUSED(pref##clockid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timerfd_create(ctx, pref) \
	int32_t &UNUSED(pref##clockid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_timerfd_create(ctx, pref) \
	const int32_t &UNUSED(pref##clockid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_eventfd ['unsigned int count']
#define locals_LINUX__ARM_sys_eventfd(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_eventfd(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_eventfd(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_fallocate ['int fd', 'int mode', 'loff_t offset', 'loff_t len']
#define locals_LINUX__ARM_sys_fallocate(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fallocate(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_fallocate(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_settime ['int ufd', 'int flags', 'const struct itimerspec __user *utmr', 'struct itimerspec __user *otmr']
#define locals_LINUX__ARM_sys_timerfd_settime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utmr) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##otmr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timerfd_settime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utmr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_timerfd_settime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_gettime ['int ufd', 'struct itimerspec __user *otmr']
#define locals_LINUX__ARM_sys_timerfd_gettime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##otmr) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_timerfd_gettime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_timerfd_gettime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_signalfd4 ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask', 'int flags']
#define locals_LINUX__ARM_sys_signalfd4(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user_mask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_signalfd4(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_signalfd4(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_eventfd2 ['unsigned int count', 'int flags']
#define locals_LINUX__ARM_sys_eventfd2(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_eventfd2(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_eventfd2(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_epoll_create1 ['int flags']
#define locals_LINUX__ARM_sys_epoll_create1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_epoll_create1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_epoll_create1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_dup3 ['unsigned int oldfd', 'unsigned int newfd', 'int flags']
#define locals_LINUX__ARM_sys_dup3(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_dup3(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_dup3(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pipe2 ['int __user *fildes', 'int flags']
#define locals_LINUX__ARM_sys_pipe2(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pipe2(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_pipe2(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init1 ['int flags']
#define locals_LINUX__ARM_sys_inotify_init1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_inotify_init1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_inotify_init1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_preadv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__ARM_sys_preadv(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_preadv(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_preadv(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_pwritev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__ARM_sys_pwritev(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_pwritev(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_pwritev(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_rt_tgsigqueueinfo ['pid_t tgid', 'pid_t pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__ARM_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_rt_tgsigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_perf_event_open ['struct perf_event_attr __user *attr_uptr', 'pid_t pid', 'int cpu', 'int group_fd', 'unsigned long flags']
#define locals_LINUX__ARM_sys_perf_event_open(ctx, pref) \
	uint32_t UNUSED(pref##attr_uptr) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##_cpu) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##group_fd) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_perf_event_open(ctx, pref) \
	uint32_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_perf_event_open(ctx, pref) \
	const uint32_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_recvmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags', 'struct timespec __user *timeout']
#define locals_LINUX__ARM_sys_recvmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_recvmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_recvmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_accept4 ['int', 'struct sockaddr __user *', 'int __user *', 'int']
#define locals_LINUX__ARM_sys_accept4(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##arg3) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_accept4(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##arg3) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_accept4(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##arg3) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_fanotify_init ['unsigned int flags', 'unsigned int event_f_flags']
#define locals_LINUX__ARM_sys_fanotify_init(ctx, pref) \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##event_f_flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fanotify_init(ctx, pref) \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_fanotify_init(ctx, pref) \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fanotify_mark ['int fanotify_fd', 'unsigned int flags', 'u64 mask', 'int fd', 'const char __user *pathname']
#define locals_LINUX__ARM_sys_fanotify_mark(ctx, pref) \
	int32_t UNUSED(pref##fanotify_fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##mask) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_fanotify_mark(ctx, pref) \
	int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##mask) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_fanotify_mark(ctx, pref) \
	const int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##mask) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_prlimit64 ['pid_t pid', 'unsigned int resource', 'const struct rlimit64 __user *new_rlim', 'struct rlimit64 __user *old_rlim']
#define locals_LINUX__ARM_sys_prlimit64(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_rlim) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##old_rlim) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_prlimit64(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##old_rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_prlimit64(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##old_rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_name_to_handle_at ['int dfd', 'const char __user *name', 'struct file_handle __user *handle', 'int __user *mnt_id', 'int flag']
#define locals_LINUX__ARM_sys_name_to_handle_at(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##handle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mnt_id) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_name_to_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##handle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mnt_id) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_name_to_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mnt_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_open_by_handle_at ['int mountdirfd', 'struct file_handle __user *handle', 'int flags']
#define locals_LINUX__ARM_sys_open_by_handle_at(ctx, pref) \
	int32_t UNUSED(pref##mountdirfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##handle) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_open_by_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##handle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_open_by_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_clock_adjtime ['clockid_t which_clock', 'struct timex __user *tx']
#define locals_LINUX__ARM_sys_clock_adjtime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tx) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_clock_adjtime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tx) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_clock_adjtime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tx) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_syncfs ['int fd']
#define locals_LINUX__ARM_sys_syncfs(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_syncfs(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_syncfs(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sendmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags']
#define locals_LINUX__ARM_sys_sendmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sendmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_sendmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_setns ['int fd', 'int nstype']
#define locals_LINUX__ARM_sys_setns(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##nstype) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_setns(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##nstype) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_setns(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##nstype) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_process_vm_readv ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__ARM_sys_process_vm_readv(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##lvec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##liovcnt) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rvec) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##riovcnt) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_process_vm_readv(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_process_vm_readv(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_process_vm_writev ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__ARM_sys_process_vm_writev(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##lvec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##liovcnt) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rvec) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##riovcnt) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_process_vm_writev(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__ARM_sys_process_vm_writev(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_kcmp ['pid_t pid1', 'pid_t pid2', 'int type', 'unsigned long idx1', 'unsigned long idx2']
#define locals_LINUX__ARM_sys_kcmp(ctx, pref) \
	int32_t UNUSED(pref##pid1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid2) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##idx1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##idx2) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_kcmp(ctx, pref) \
	int32_t &UNUSED(pref##pid1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##idx1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##idx2) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_kcmp(ctx, pref) \
	const int32_t &UNUSED(pref##pid1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##idx1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##idx2) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_finit_module ['int fd', 'const char __user *uargs', 'int flags']
#define locals_LINUX__ARM_sys_finit_module(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_finit_module(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_finit_module(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_sched_setattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int flags']
#define locals_LINUX__ARM_sys_sched_setattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_setattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_sched_setattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int size', 'unsigned int flags']
#define locals_LINUX__ARM_sys_sched_getattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_sched_getattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__ARM_sys_sched_getattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_renameat2 ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'unsigned int flags']
#define locals_LINUX__ARM_sys_renameat2(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_renameat2(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_renameat2(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_seccomp ['unsigned int op', 'unsigned int flags', 'const char __user *uargs']
#define locals_LINUX__ARM_sys_seccomp(ctx, pref) \
	uint32_t UNUSED(pref##op) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_seccomp(ctx, pref) \
	uint32_t &UNUSED(pref##op) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_seccomp(ctx, pref) \
	const uint32_t &UNUSED(pref##op) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getrandom ['char __user *buf', 'size_t count', 'unsigned int flags']
#define locals_LINUX__ARM_sys_getrandom(ctx, pref) \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_getrandom(ctx, pref) \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_getrandom(ctx, pref) \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_memfd_create ['const char __user *uname_ptr', 'unsigned int flags']
#define locals_LINUX__ARM_sys_memfd_create(ctx, pref) \
	uint32_t UNUSED(pref##uname_ptr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_memfd_create(ctx, pref) \
	uint32_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_memfd_create(ctx, pref) \
	const uint32_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_bpf ['int cmd', 'union bpf_attr *attr', 'unsigned int size']
#define locals_LINUX__ARM_sys_bpf(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_bpf(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_bpf(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_execveat ['int dfd', 'const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp', 'int flags']
#define locals_LINUX__ARM_sys_execveat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##argv) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##envp) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_execveat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##argv) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##envp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__ARM_sys_execveat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##argv) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##envp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_userfaultfd ['int flags']
#define locals_LINUX__ARM_sys_userfaultfd(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_userfaultfd(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_sys_userfaultfd(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_membarrier ['int cmd', 'int flags']
#define locals_LINUX__ARM_sys_membarrier(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_membarrier(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__ARM_sys_membarrier(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_mlock2 ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__ARM_sys_mlock2(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_sys_mlock2(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_sys_mlock2(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long ARM_breakpoint ['void']
#undef locals_LINUX__ARM_ARM_breakpoint
#if defined(__cplusplus)
#undef references_LINUX__ARM_ARM_breakpoint
#endif

// long ARM_cacheflush ['unsigned long start', 'unsigned long end', 'unsigned long flags']
#define locals_LINUX__ARM_ARM_cacheflush(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##end) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__ARM_ARM_cacheflush(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##end) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__ARM_ARM_cacheflush(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##end) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long ARM_user26_mode ['void']
#undef locals_LINUX__ARM_ARM_user26_mode
#if defined(__cplusplus)
#undef references_LINUX__ARM_ARM_user26_mode
#endif

// long ARM_usr32_mode ['void']
#undef locals_LINUX__ARM_ARM_usr32_mode
#if defined(__cplusplus)
#undef references_LINUX__ARM_ARM_usr32_mode
#endif

// long ARM_set_tls ['unsigned long arg']
#define locals_LINUX__ARM_ARM_set_tls(ctx, pref) \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__ARM_ARM_set_tls(ctx, pref) \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__ARM_ARM_set_tls(ctx, pref) \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif


/* ### windows_7:x86 #################################################### */
// NTSTATUS NtAcceptConnectPort ['PHANDLE PortHandle', 'PVOID PortContext', 'PPORT_MESSAGE ConnectionRequest', 'BOOLEAN AcceptConnection', 'PPORT_VIEW ServerView', 'PREMOTE_PORT_VIEW ClientView']
#define locals_WINDOWS_7__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AcceptConnection) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAcceptConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAcceptConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAccessCheck ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_7__X86_NtAccessCheck(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheck(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtAccessCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtAccessCheckAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ACCESS_MASK DesiredAccess', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtAccessCheckAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByType ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_7__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckByType(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtAccessCheckByType(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_7__X86_NtAccessCheckByTypeAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultList ['PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'PPRIVILEGE_SET PrivilegeSet', 'PULONG PrivilegeSetLength', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus']
#define locals_WINDOWS_7__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##PrivilegeSet) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##PrivilegeSetLength) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtAccessCheckByTypeResultList(ctx, pref) \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##PrivilegeSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##PrivilegeSetLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[15]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[15]);
#define creferences_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]);
#endif

// NTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'PSID PrincipalSelfSid', 'ACCESS_MASK DesiredAccess', 'AUDIT_EVENT_TYPE AuditType', 'ULONG Flags', 'POBJECT_TYPE_LIST ObjectTypeList', 'ULONG ObjectTypeListLength', 'PGENERIC_MAPPING GenericMapping', 'BOOLEAN ObjectCreation', 'PACCESS_MASK GrantedAccess', 'PNTSTATUS AccessStatus', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PrincipalSelfSid) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AuditType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##ObjectTypeList) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##ObjectTypeListLength) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##GenericMapping) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[13]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[14]); \
	uint32_t UNUSED(pref##AccessStatus) = *(uint32_t *)((ctx)->args[15]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[16]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[13]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[14]); \
	uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[15]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[16]);
#define creferences_WINDOWS_7__X86_NtAccessCheckByTypeResultListAndAuditAlarmByHandle(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PrincipalSelfSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AuditType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##ObjectTypeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##ObjectTypeListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##GenericMapping) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[14]); \
	const uint32_t &UNUSED(pref##AccessStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[15]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[16]);
#endif

// NTSTATUS NtAddAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_7__X86_NtAddAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAddAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAddAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAddBootEntry ['PBOOT_ENTRY BootEntry', 'PULONG Id']
#define locals_WINDOWS_7__X86_NtAddBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAddBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAddBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAddDriverEntry ['PEFI_DRIVER_ENTRY DriverEntry', 'PULONG Id']
#define locals_WINDOWS_7__X86_NtAddDriverEntry(ctx, pref) \
	uint32_t UNUSED(pref##DriverEntry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAddDriverEntry(ctx, pref) \
	uint32_t &UNUSED(pref##DriverEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAddDriverEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAdjustGroupsToken ['HANDLE TokenHandle', 'BOOLEAN ResetToDefault', 'PTOKEN_GROUPS NewState', 'ULONG BufferLength', 'PTOKEN_GROUPS PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResetToDefault) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAdjustGroupsToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAdjustGroupsToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResetToDefault) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAdjustPrivilegesToken ['HANDLE TokenHandle', 'BOOLEAN DisableAllPrivileges', 'PTOKEN_PRIVILEGES NewState', 'ULONG BufferLength', 'PTOKEN_PRIVILEGES PreviousState', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DisableAllPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NewState) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAdjustPrivilegesToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAdjustPrivilegesToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DisableAllPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NewState) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlertResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_7__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlertResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAlertResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAlertThread ['HANDLE ThreadHandle']
#define locals_WINDOWS_7__X86_NtAlertThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlertThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtAlertThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateLocallyUniqueId ['PLUID Luid']
#define locals_WINDOWS_7__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t UNUSED(pref##Luid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtAllocateLocallyUniqueId(ctx, pref) \
	const uint32_t &UNUSED(pref##Luid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtAllocateReserveObject ['PHANDLE MemoryReserveHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'MEMORY_RESERVE_TYPE Type']
#define locals_WINDOWS_7__X86_NtAllocateReserveObject(ctx, pref) \
	uint32_t UNUSED(pref##MemoryReserveHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAllocateReserveObject(ctx, pref) \
	uint32_t &UNUSED(pref##MemoryReserveHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAllocateReserveObject(ctx, pref) \
	const uint32_t &UNUSED(pref##MemoryReserveHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAllocateUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_7__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAllocateUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAllocateUuids ['PULARGE_INTEGER Time', 'PULONG Range', 'PULONG Sequence', 'PCHAR Seed']
#define locals_WINDOWS_7__X86_NtAllocateUuids(ctx, pref) \
	uint32_t UNUSED(pref##Time) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Range) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Sequence) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAllocateUuids(ctx, pref) \
	uint32_t &UNUSED(pref##Time) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Range) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtAllocateUuids(ctx, pref) \
	const uint32_t &UNUSED(pref##Time) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Range) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Sequence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtAllocateVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'PSIZE_T RegionSize', 'ULONG AllocationType', 'ULONG Protect']
#define locals_WINDOWS_7__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Protect) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAllocateVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAllocateVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlpcAcceptConnectPort ['PHANDLE PortHandle', 'HANDLE ConnectionPortHandle', 'ULONG Flags', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PALPC_PORT_ATTRIBUTES PortAttributes', 'PVOID PortContext', 'PPORT_MESSAGE ConnectionRequest', 'PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes', 'BOOLEAN AcceptConnection']
#define locals_WINDOWS_7__X86_NtAlpcAcceptConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ConnectionPortHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##PortAttributes) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionMessageAttributes) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AcceptConnection) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcAcceptConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ConnectionPortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionMessageAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtAlpcAcceptConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ConnectionPortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionMessageAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AcceptConnection) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtAlpcCancelMessage ['HANDLE PortHandle', 'ULONG Flags', 'PALPC_CONTEXT_ATTR MessageContext']
#define locals_WINDOWS_7__X86_NtAlpcCancelMessage(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MessageContext) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCancelMessage(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MessageContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcCancelMessage(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MessageContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PALPC_PORT_ATTRIBUTES PortAttributes', 'ULONG Flags', 'PSID RequiredServerSid', 'PPORT_MESSAGE ConnectionMessage', 'PULONG BufferLength', 'PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes', 'PALPC_MESSAGE_ATTRIBUTES InMessageAttributes', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtAlpcConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##PortAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##RequiredServerSid) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionMessage) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutMessageAttributes) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##InMessageAttributes) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutMessageAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##InMessageAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtAlpcConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutMessageAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##InMessageAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtAlpcCreatePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PALPC_PORT_ATTRIBUTES PortAttributes']
#define locals_WINDOWS_7__X86_NtAlpcCreatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCreatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcCreatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcCreatePortSection ['HANDLE PortHandle', 'ULONG Flags', 'HANDLE SectionHandle', 'SIZE_T SectionSize', 'PALPC_HANDLE AlpcSectionHandle', 'PSIZE_T ActualSectionSize']
#define locals_WINDOWS_7__X86_NtAlpcCreatePortSection(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AlpcSectionHandle) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ActualSectionSize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCreatePortSection(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AlpcSectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ActualSectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAlpcCreatePortSection(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AlpcSectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ActualSectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlpcCreateResourceReserve ['HANDLE PortHandle', 'ULONG Flags', 'SIZE_T MessageSize', 'PALPC_HANDLE ResourceId']
#define locals_WINDOWS_7__X86_NtAlpcCreateResourceReserve(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MessageSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ResourceId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCreateResourceReserve(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MessageSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ResourceId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtAlpcCreateResourceReserve(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MessageSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ResourceId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtAlpcCreateSectionView ['HANDLE PortHandle', 'ULONG Flags', 'PALPC_DATA_VIEW_ATTR ViewAttributes']
#define locals_WINDOWS_7__X86_NtAlpcCreateSectionView(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ViewAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCreateSectionView(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ViewAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcCreateSectionView(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ViewAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcCreateSecurityContext ['HANDLE PortHandle', 'ULONG Flags', 'PALPC_SECURITY_ATTR SecurityAttribute']
#define locals_WINDOWS_7__X86_NtAlpcCreateSecurityContext(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityAttribute) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcCreateSecurityContext(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityAttribute) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcCreateSecurityContext(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityAttribute) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcDeletePortSection ['HANDLE PortHandle', 'ULONG Flags', 'ALPC_HANDLE SectionHandle']
#define locals_WINDOWS_7__X86_NtAlpcDeletePortSection(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcDeletePortSection(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcDeletePortSection(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcDeleteResourceReserve ['HANDLE PortHandle', 'ULONG Flags', 'ALPC_HANDLE ResourceId']
#define locals_WINDOWS_7__X86_NtAlpcDeleteResourceReserve(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ResourceId) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcDeleteResourceReserve(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ResourceId) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcDeleteResourceReserve(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ResourceId) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcDeleteSectionView ['HANDLE PortHandle', 'ULONG Flags', 'PVOID ViewBase']
#define locals_WINDOWS_7__X86_NtAlpcDeleteSectionView(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ViewBase) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcDeleteSectionView(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ViewBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcDeleteSectionView(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ViewBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcDeleteSecurityContext ['HANDLE PortHandle', 'ULONG Flags', 'ALPC_HANDLE ContextHandle']
#define locals_WINDOWS_7__X86_NtAlpcDeleteSecurityContext(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContextHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcDeleteSecurityContext(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContextHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcDeleteSecurityContext(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContextHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcDisconnectPort ['HANDLE PortHandle', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtAlpcDisconnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcDisconnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAlpcDisconnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAlpcImpersonateClientOfPort ['HANDLE PortHandle', 'PPORT_MESSAGE PortMessage', 'PVOID Reserved']
#define locals_WINDOWS_7__X86_NtAlpcImpersonateClientOfPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Reserved) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcImpersonateClientOfPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Reserved) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcImpersonateClientOfPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Reserved) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcOpenSenderProcess ['PHANDLE ProcessHandle', 'HANDLE PortHandle', 'PPORT_MESSAGE PortMessage', 'ULONG Flags', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtAlpcOpenSenderProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcOpenSenderProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAlpcOpenSenderProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlpcOpenSenderThread ['PHANDLE ThreadHandle', 'HANDLE PortHandle', 'PPORT_MESSAGE PortMessage', 'ULONG Flags', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtAlpcOpenSenderThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcOpenSenderThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAlpcOpenSenderThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlpcQueryInformation ['HANDLE PortHandle', 'ALPC_PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtAlpcQueryInformation(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcQueryInformation(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtAlpcQueryInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtAlpcQueryInformationMessage ['HANDLE PortHandle', 'PPORT_MESSAGE PortMessage', 'ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass', 'PVOID MessageInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtAlpcQueryInformationMessage(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MessageInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MessageInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcQueryInformationMessage(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MessageInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MessageInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtAlpcQueryInformationMessage(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MessageInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MessageInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtAlpcRevokeSecurityContext ['HANDLE PortHandle', 'ULONG Flags', 'ALPC_HANDLE ContextHandle']
#define locals_WINDOWS_7__X86_NtAlpcRevokeSecurityContext(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContextHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcRevokeSecurityContext(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContextHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtAlpcRevokeSecurityContext(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContextHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtAlpcSendWaitReceivePort ['HANDLE PortHandle', 'ULONG Flags', 'PPORT_MESSAGE SendMessage', 'PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes', 'PPORT_MESSAGE ReceiveMessage', 'PULONG BufferLength', 'PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtAlpcSendWaitReceivePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SendMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SendMessageAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ReceiveMessageAttributes) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcSendWaitReceivePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SendMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SendMessageAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ReceiveMessageAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtAlpcSendWaitReceivePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SendMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SendMessageAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ReceiveMessageAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtAlpcSetInformation ['HANDLE PortHandle', 'ALPC_PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length']
#define locals_WINDOWS_7__X86_NtAlpcSetInformation(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAlpcSetInformation(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtAlpcSetInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtApphelpCacheControl ['APPHELPCOMMAND type', 'PVOID buf']
#define locals_WINDOWS_7__X86_NtApphelpCacheControl(ctx, pref) \
	uint32_t UNUSED(pref##type) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtApphelpCacheControl(ctx, pref) \
	uint32_t &UNUSED(pref##type) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtApphelpCacheControl(ctx, pref) \
	const uint32_t &UNUSED(pref##type) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAreMappedFilesTheSame ['PVOID File1MappedAsAnImage', 'PVOID File2MappedAsFile']
#define locals_WINDOWS_7__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t UNUSED(pref##File1MappedAsAnImage) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##File2MappedAsFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAreMappedFilesTheSame(ctx, pref) \
	uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAreMappedFilesTheSame(ctx, pref) \
	const uint32_t &UNUSED(pref##File1MappedAsAnImage) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##File2MappedAsFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtAssignProcessToJobObject ['HANDLE JobHandle', 'HANDLE ProcessHandle']
#define locals_WINDOWS_7__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtAssignProcessToJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtAssignProcessToJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCallbackReturn ['PVOID OutputBuffer', 'ULONG OutputLength', 'NTSTATUS Status']
#define locals_WINDOWS_7__X86_NtCallbackReturn(ctx, pref) \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputLength) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Status) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCallbackReturn(ctx, pref) \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Status) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCallbackReturn(ctx, pref) \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Status) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelIoFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_7__X86_NtCancelIoFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCancelIoFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCancelIoFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCancelIoFileEx ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoRequestToCancel', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_7__X86_NtCancelIoFileEx(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoRequestToCancel) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCancelIoFileEx(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoRequestToCancel) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCancelIoFileEx(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoRequestToCancel) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelSynchronousIoFile ['HANDLE ThreadHandle', 'PIO_STATUS_BLOCK IoRequestToCancel', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_7__X86_NtCancelSynchronousIoFile(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoRequestToCancel) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCancelSynchronousIoFile(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoRequestToCancel) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCancelSynchronousIoFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoRequestToCancel) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCancelTimer ['HANDLE TimerHandle', 'PBOOLEAN CurrentState']
#define locals_WINDOWS_7__X86_NtCancelTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##CurrentState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCancelTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCancelTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##CurrentState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtClearEvent ['HANDLE EventHandle']
#define locals_WINDOWS_7__X86_NtClearEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtClearEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtClearEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtClose ['HANDLE Handle']
#define locals_WINDOWS_7__X86_NtClose(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtClose(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtClose(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCloseObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCloseObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCommitComplete ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtCommitComplete(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCommitComplete(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCommitComplete(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCommitEnlistment ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtCommitEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCommitEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCommitEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCommitTransaction ['HANDLE TransactionHandle', 'BOOLEAN Wait']
#define locals_WINDOWS_7__X86_NtCommitTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Wait) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCommitTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Wait) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCommitTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Wait) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCompactKeys ['ULONG Count', 'HANDLE KeyArray[]']
#define locals_WINDOWS_7__X86_NtCompactKeys(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyArray) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCompactKeys(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtCompactKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCompareTokens ['HANDLE FirstTokenHandle', 'HANDLE SecondTokenHandle', 'PBOOLEAN Equal']
#define locals_WINDOWS_7__X86_NtCompareTokens(ctx, pref) \
	uint32_t UNUSED(pref##FirstTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecondTokenHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Equal) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCompareTokens(ctx, pref) \
	uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCompareTokens(ctx, pref) \
	const uint32_t &UNUSED(pref##FirstTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecondTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Equal) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCompleteConnectPort ['HANDLE PortHandle']
#define locals_WINDOWS_7__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCompleteConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtCompleteConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtCompressKey ['HANDLE Key']
#define locals_WINDOWS_7__X86_NtCompressKey(ctx, pref) \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCompressKey(ctx, pref) \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtCompressKey(ctx, pref) \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_7__X86_NtConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtContinue ['PCONTEXT ContextRecord', 'BOOLEAN TestAlert']
#define locals_WINDOWS_7__X86_NtContinue(ctx, pref) \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TestAlert) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtContinue(ctx, pref) \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TestAlert) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtCreateDebugObject ['PHANDLE DebugObjectHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCreateDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateEnlistment ['PHANDLE EnlistmentHandle', 'ACCESS_MASK DesiredAccess', 'HANDLE ResourceManagerHandle', 'HANDLE TransactionHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG CreateOptions', 'NOTIFICATION_MASK NotificationMask', 'PVOID EnlistmentKey']
#define locals_WINDOWS_7__X86_NtCreateEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##NotificationMask) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##EnlistmentKey) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##NotificationMask) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##EnlistmentKey) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtCreateEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##NotificationMask) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##EnlistmentKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'EVENT_TYPE EventType', 'BOOLEAN InitialState']
#define locals_WINDOWS_7__X86_NtCreateEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InitialState) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtCreateEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InitialState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtCreateEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCreateEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER AllocationSize', 'ULONG FileAttributes', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'PVOID EaBuffer', 'ULONG EaLength']
#define locals_WINDOWS_7__X86_NtCreateFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AllocationSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##EaBuffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##EaLength) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtCreateFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AllocationSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##EaBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##EaLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Count']
#define locals_WINDOWS_7__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtCreateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCreateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateJobSet ['ULONG NumJob', 'PJOB_SET_ARRAY UserJobSet', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtCreateJobSet(ctx, pref) \
	uint32_t UNUSED(pref##NumJob) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##UserJobSet) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateJobSet(ctx, pref) \
	uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtCreateJobSet(ctx, pref) \
	const uint32_t &UNUSED(pref##NumJob) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##UserJobSet) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtCreateKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG TitleIndex', 'PUNICODE_STRING Class', 'ULONG CreateOptions', 'PULONG Disposition']
#define locals_WINDOWS_7__X86_NtCreateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Class) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Disposition) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Class) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtCreateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Class) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateKeyTransacted ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG TitleIndex', 'PUNICODE_STRING Class', 'ULONG CreateOptions', 'HANDLE TransactionHandle', 'PULONG Disposition']
#define locals_WINDOWS_7__X86_NtCreateKeyTransacted(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Class) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Disposition) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateKeyTransacted(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Class) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtCreateKeyTransacted(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Class) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Disposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateMailslotFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CreateOptions', 'ULONG MailslotQuota', 'ULONG MaximumMessageSize', 'PLARGE_INTEGER ReadTimeout']
#define locals_WINDOWS_7__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##MailslotQuota) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaximumMessageSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ReadTimeout) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateMailslotFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtCreateMailslotFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##MailslotQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaximumMessageSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ReadTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN InitialOwner']
#define locals_WINDOWS_7__X86_NtCreateMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##InitialOwner) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##InitialOwner) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateNamedPipeFile ['PHANDLE FileHandle', 'ULONG DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG CreateDisposition', 'ULONG CreateOptions', 'ULONG NamedPipeType', 'ULONG ReadMode', 'ULONG CompletionMode', 'ULONG MaximumInstances', 'ULONG InboundQuota', 'ULONG OutboundQuota', 'PLARGE_INTEGER DefaultTimeout']
#define locals_WINDOWS_7__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateDisposition) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##NamedPipeType) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReadMode) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##CompletionMode) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##MaximumInstances) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##InboundQuota) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##OutboundQuota) = *(uint32_t *)((ctx)->args[12]); \
	uint32_t UNUSED(pref##DefaultTimeout) = *(uint32_t *)((ctx)->args[13]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateNamedPipeFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<uint32_t *>((ctx)->args[12]); \
	uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[13]);
#define creferences_WINDOWS_7__X86_NtCreateNamedPipeFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##NamedPipeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReadMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##CompletionMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##MaximumInstances) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##InboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##OutboundQuota) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]); \
	const uint32_t &UNUSED(pref##DefaultTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[13]);
#endif

// NTSTATUS NtCreatePagingFile ['PUNICODE_STRING PageFileName', 'PLARGE_INTEGER MinimumSize', 'PLARGE_INTEGER MaximumSize', 'ULONG Priority']
#define locals_WINDOWS_7__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t UNUSED(pref##PageFileName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumSize) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Priority) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreatePagingFile(ctx, pref) \
	uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreatePagingFile(ctx, pref) \
	const uint32_t &UNUSED(pref##PageFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Priority) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreatePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_7__X86_NtCreatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtCreatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreatePrivateNamespace ['PHANDLE NamespaceHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PVOID BoundaryDescriptor']
#define locals_WINDOWS_7__X86_NtCreatePrivateNamespace(ctx, pref) \
	uint32_t UNUSED(pref##NamespaceHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BoundaryDescriptor) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreatePrivateNamespace(ctx, pref) \
	uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BoundaryDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreatePrivateNamespace(ctx, pref) \
	const uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BoundaryDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'BOOLEAN InheritObjectTable', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort']
#define locals_WINDOWS_7__X86_NtCreateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##InheritObjectTable) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtCreateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##InheritObjectTable) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateProcessEx ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ParentProcess', 'ULONG Flags', 'HANDLE SectionHandle', 'HANDLE DebugPort', 'HANDLE ExceptionPort', 'ULONG JobMemberLevel']
#define locals_WINDOWS_7__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ParentProcess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DebugPort) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ExceptionPort) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##JobMemberLevel) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateProcessEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtCreateProcessEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ParentProcess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DebugPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ExceptionPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##JobMemberLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateProfile ['PHANDLE ProfileHandle', 'HANDLE Process', 'PVOID RangeBase', 'SIZE_T RangeSize', 'ULONG BucketSize', 'PULONG Buffer', 'ULONG BufferSize', 'KPROFILE_SOURCE ProfileSource', 'KAFFINITY Affinity']
#define locals_WINDOWS_7__X86_NtCreateProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Process) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RangeBase) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RangeSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BucketSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Affinity) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Process) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtCreateProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Process) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RangeBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RangeSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Affinity) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtCreateProfileEx ['PHANDLE ProfileHandle', 'HANDLE Process', 'PVOID ProfileBase', 'SIZE_T ProfileSize', 'ULONG BucketSize', 'PULONG Buffer', 'ULONG BufferSize', 'KPROFILE_SOURCE ProfileSource', 'ULONG GroupAffinityCount', 'PGROUP_AFFINITY GroupAffinity']
#define locals_WINDOWS_7__X86_NtCreateProfileEx(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Process) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProfileBase) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProfileSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BucketSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##GroupAffinityCount) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##GroupAffinity) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateProfileEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Process) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProfileBase) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProfileSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##GroupAffinityCount) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##GroupAffinity) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtCreateProfileEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Process) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProfileBase) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProfileSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BucketSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##GroupAffinityCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##GroupAffinity) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtCreateResourceManager ['PHANDLE ResourceManagerHandle', 'ACCESS_MASK DesiredAccess', 'HANDLE TmHandle', 'LPGUID RmGuid', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG CreateOptions', 'PUNICODE_STRING Description']
#define locals_WINDOWS_7__X86_NtCreateResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RmGuid) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Description) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RmGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Description) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtCreateResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RmGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Description) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PLARGE_INTEGER MaximumSize', 'ULONG SectionPageProtection', 'ULONG AllocationAttributes', 'HANDLE FileHandle']
#define locals_WINDOWS_7__X86_NtCreateSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaximumSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SectionPageProtection) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AllocationAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtCreateSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaximumSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SectionPageProtection) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AllocationAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtCreateSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LONG InitialCount', 'LONG MaximumCount']
#define locals_WINDOWS_7__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##InitialCount) = *(int32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##MaximumCount) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtCreateSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##InitialCount) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##MaximumCount) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LinkTarget']
#define locals_WINDOWS_7__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ProcessHandle', 'PCLIENT_ID ClientId', 'PCONTEXT ThreadContext', 'PINITIAL_TEB InitialTeb', 'BOOLEAN CreateSuspended']
#define locals_WINDOWS_7__X86_NtCreateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InitialTeb) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CreateSuspended) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtCreateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InitialTeb) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CreateSuspended) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtCreateThreadEx ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE ProcessHandle', 'PVOID StartRoutine', 'PVOID Argument', 'ULONG CreateFlags', 'ULONG_PTR ZeroBits', 'SIZE_T StackSize', 'SIZE_T MaximumStackSize', 'PPS_ATTRIBUTE_LIST AttributeList']
#define locals_WINDOWS_7__X86_NtCreateThreadEx(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##StartRoutine) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Argument) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##CreateFlags) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##StackSize) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##MaximumStackSize) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AttributeList) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateThreadEx(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##StartRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Argument) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##CreateFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##StackSize) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##MaximumStackSize) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AttributeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtCreateThreadEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##StartRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Argument) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##CreateFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##StackSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##MaximumStackSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AttributeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TIMER_TYPE TimerType']
#define locals_WINDOWS_7__X86_NtCreateTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtCreateTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtCreateToken ['PHANDLE TokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'TOKEN_TYPE TokenType', 'PLUID AuthenticationId', 'PLARGE_INTEGER ExpirationTime', 'PTOKEN_USER User', 'PTOKEN_GROUPS Groups', 'PTOKEN_PRIVILEGES Privileges', 'PTOKEN_OWNER Owner', 'PTOKEN_PRIMARY_GROUP PrimaryGroup', 'PTOKEN_DEFAULT_DACL DefaultDacl', 'PTOKEN_SOURCE TokenSource']
#define locals_WINDOWS_7__X86_NtCreateToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AuthenticationId) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ExpirationTime) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##User) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Groups) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Owner) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##PrimaryGroup) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##DefaultDacl) = *(uint32_t *)((ctx)->args[11]); \
	uint32_t UNUSED(pref##TokenSource) = *(uint32_t *)((ctx)->args[12]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##User) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<uint32_t *>((ctx)->args[11]); \
	uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<uint32_t *>((ctx)->args[12]);
#define creferences_WINDOWS_7__X86_NtCreateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AuthenticationId) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ExpirationTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##User) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Groups) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Owner) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##PrimaryGroup) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##DefaultDacl) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]); \
	const uint32_t &UNUSED(pref##TokenSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[12]);
#endif

// NTSTATUS NtCreateTransaction ['PHANDLE TransactionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LPGUID Uow', 'HANDLE TmHandle', 'ULONG CreateOptions', 'ULONG IsolationLevel', 'ULONG IsolationFlags', 'PLARGE_INTEGER Timeout', 'PUNICODE_STRING Description']
#define locals_WINDOWS_7__X86_NtCreateTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Uow) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##IsolationLevel) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##IsolationFlags) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Description) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Uow) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##IsolationLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##IsolationFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Description) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtCreateTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Uow) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##IsolationLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##IsolationFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Description) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtCreateTransactionManager ['PHANDLE TmHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LogFileName', 'ULONG CreateOptions', 'ULONG CommitStrength']
#define locals_WINDOWS_7__X86_NtCreateTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LogFileName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CommitStrength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CommitStrength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtCreateTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CommitStrength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtCreateUserProcess ['PHANDLE ProcessHandle', 'PHANDLE ThreadHandle', 'ACCESS_MASK ProcessDesiredAccess', 'ACCESS_MASK ThreadDesiredAccess', 'POBJECT_ATTRIBUTES ProcessObjectAttributes', 'POBJECT_ATTRIBUTES ThreadObjectAttributes', 'ULONG ProcessFlags', 'ULONG ThreadFlags', 'PRTL_USER_PROCESS_PARAMETERS ProcessParameters', 'PPROCESS_CREATE_INFO CreateInfo', 'PPROCESS_ATTRIBUTE_LIST AttributeList']
#define locals_WINDOWS_7__X86_NtCreateUserProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessDesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadDesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ProcessObjectAttributes) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ThreadObjectAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ProcessFlags) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ThreadFlags) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ProcessParameters) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##CreateInfo) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AttributeList) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateUserProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessDesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadDesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ProcessObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ThreadObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ProcessFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ThreadFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ProcessParameters) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##CreateInfo) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AttributeList) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtCreateUserProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessDesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadDesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ProcessObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ThreadObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ProcessFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ThreadFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ProcessParameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##CreateInfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AttributeList) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtCreateWaitablePort ['PHANDLE PortHandle', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG MaxConnectionInfoLength', 'ULONG MaxMessageLength', 'ULONG MaxPoolUsage']
#define locals_WINDOWS_7__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MaxConnectionInfoLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MaxPoolUsage) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateWaitablePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtCreateWaitablePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MaxConnectionInfoLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MaxPoolUsage) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtCreateWorkerFactory ['PHANDLE WorkerFactoryHandleReturn', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE CompletionPortHandle', 'HANDLE WorkerProcessHandle', 'PVOID StartRoutine', 'PVOID StartParameter', 'ULONG MaxThreadCount', 'SIZE_T StackReserve', 'SIZE_T StackCommit']
#define locals_WINDOWS_7__X86_NtCreateWorkerFactory(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandleReturn) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##CompletionPortHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##WorkerProcessHandle) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##StartRoutine) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##StartParameter) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##MaxThreadCount) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##StackReserve) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##StackCommit) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtCreateWorkerFactory(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandleReturn) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##CompletionPortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##WorkerProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##StartRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##StartParameter) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##MaxThreadCount) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##StackReserve) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##StackCommit) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtCreateWorkerFactory(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandleReturn) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##CompletionPortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##WorkerProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##StartRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##StartParameter) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##MaxThreadCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##StackReserve) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##StackCommit) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtDebugActiveProcess ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_7__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDebugActiveProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtDebugActiveProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDebugContinue ['HANDLE DebugObjectHandle', 'PCLIENT_ID ClientId', 'NTSTATUS ContinueStatus']
#define locals_WINDOWS_7__X86_NtDebugContinue(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContinueStatus) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDebugContinue(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtDebugContinue(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContinueStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDelayExecution ['BOOLEAN Alertable', 'PLARGE_INTEGER DelayInterval']
#define locals_WINDOWS_7__X86_NtDelayExecution(ctx, pref) \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DelayInterval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDelayExecution(ctx, pref) \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtDelayExecution(ctx, pref) \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DelayInterval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeleteAtom ['RTL_ATOM Atom']
#define locals_WINDOWS_7__X86_NtDeleteAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeleteAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteBootEntry ['ULONG Id']
#define locals_WINDOWS_7__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeleteBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteDriverEntry ['ULONG Id']
#define locals_WINDOWS_7__X86_NtDeleteDriverEntry(ctx, pref) \
	uint32_t UNUSED(pref##Id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteDriverEntry(ctx, pref) \
	uint32_t &UNUSED(pref##Id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeleteDriverEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##Id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteFile ['POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtDeleteFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeleteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteKey ['HANDLE KeyHandle']
#define locals_WINDOWS_7__X86_NtDeleteKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeleteKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'BOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtDeleteObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtDeletePrivateNamespace ['HANDLE NamespaceHandle']
#define locals_WINDOWS_7__X86_NtDeletePrivateNamespace(ctx, pref) \
	uint32_t UNUSED(pref##NamespaceHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeletePrivateNamespace(ctx, pref) \
	uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDeletePrivateNamespace(ctx, pref) \
	const uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDeleteValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName']
#define locals_WINDOWS_7__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeleteValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtDeleteValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtDeviceIoControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_7__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDeviceIoControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtDeviceIoControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtDisableLastKnownGood ['']
#undef locals_WINDOWS_7__X86_NtDisableLastKnownGood
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtDisableLastKnownGood
#endif

// NTSTATUS NtDisplayString ['PUNICODE_STRING String']
#define locals_WINDOWS_7__X86_NtDisplayString(ctx, pref) \
	uint32_t UNUSED(pref##String) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDisplayString(ctx, pref) \
	uint32_t &UNUSED(pref##String) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDisplayString(ctx, pref) \
	const uint32_t &UNUSED(pref##String) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDrawText ['PUNICODE_STRING Text']
#define locals_WINDOWS_7__X86_NtDrawText(ctx, pref) \
	uint32_t UNUSED(pref##Text) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDrawText(ctx, pref) \
	uint32_t &UNUSED(pref##Text) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtDrawText(ctx, pref) \
	const uint32_t &UNUSED(pref##Text) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtDuplicateObject ['HANDLE SourceProcessHandle', 'HANDLE SourceHandle', 'HANDLE TargetProcessHandle', 'PHANDLE TargetHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Options']
#define locals_WINDOWS_7__X86_NtDuplicateObject(ctx, pref) \
	uint32_t UNUSED(pref##SourceProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TargetProcessHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Options) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDuplicateObject(ctx, pref) \
	uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Options) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtDuplicateObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SourceProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TargetProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Options) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtDuplicateToken ['HANDLE ExistingTokenHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'BOOLEAN EffectiveOnly', 'TOKEN_TYPE TokenType', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_7__X86_NtDuplicateToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EffectiveOnly) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenType) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtDuplicateToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtDuplicateToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EffectiveOnly) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenType) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnableLastKnownGood ['']
#undef locals_WINDOWS_7__X86_NtEnableLastKnownGood
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtEnableLastKnownGood
#endif

// NTSTATUS NtEnumerateBootEntries ['PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_7__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateBootEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtEnumerateBootEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtEnumerateDriverEntries ['PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_7__X86_NtEnumerateDriverEntries(ctx, pref) \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateDriverEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtEnumerateDriverEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtEnumerateKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_7__X86_NtEnumerateKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtEnumerateKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtEnumerateSystemEnvironmentValuesEx ['ULONG InformationClass', 'PVOID Buffer', 'PULONG BufferLength']
#define locals_WINDOWS_7__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtEnumerateSystemEnvironmentValuesEx(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtEnumerateTransactionObject ['HANDLE RootObjectHandle', 'KTMOBJECT_TYPE QueryType', 'PKTMOBJECT_CURSOR ObjectCursor', 'ULONG ObjectCursorLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtEnumerateTransactionObject(ctx, pref) \
	uint32_t UNUSED(pref##RootObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##QueryType) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectCursor) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectCursorLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateTransactionObject(ctx, pref) \
	uint32_t &UNUSED(pref##RootObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##QueryType) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectCursor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectCursorLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtEnumerateTransactionObject(ctx, pref) \
	const uint32_t &UNUSED(pref##RootObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##QueryType) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectCursor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectCursorLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtEnumerateValueKey ['HANDLE KeyHandle', 'ULONG Index', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_7__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtEnumerateValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtEnumerateValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtExtendSection ['HANDLE SectionHandle', 'PLARGE_INTEGER NewSectionSize']
#define locals_WINDOWS_7__X86_NtExtendSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewSectionSize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtExtendSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtExtendSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewSectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFilterToken ['HANDLE ExistingTokenHandle', 'ULONG Flags', 'PTOKEN_GROUPS SidsToDisable', 'PTOKEN_PRIVILEGES PrivilegesToDelete', 'PTOKEN_GROUPS RestrictedSids', 'PHANDLE NewTokenHandle']
#define locals_WINDOWS_7__X86_NtFilterToken(ctx, pref) \
	uint32_t UNUSED(pref##ExistingTokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SidsToDisable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##PrivilegesToDelete) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestrictedSids) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewTokenHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFilterToken(ctx, pref) \
	uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtFilterToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ExistingTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SidsToDisable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##PrivilegesToDelete) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestrictedSids) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewTokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtFindAtom ['PWSTR AtomName', 'ULONG Length', 'PRTL_ATOM Atom']
#define locals_WINDOWS_7__X86_NtFindAtom(ctx, pref) \
	uint32_t UNUSED(pref##AtomName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFindAtom(ctx, pref) \
	uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtFindAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##AtomName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushBuffersFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock']
#define locals_WINDOWS_7__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFlushBuffersFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtFlushBuffersFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFlushInstallUILanguage ['LANGID InstallUILanguage', 'ULONG SetComittedFlag']
#define locals_WINDOWS_7__X86_NtFlushInstallUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##InstallUILanguage) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SetComittedFlag) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFlushInstallUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##InstallUILanguage) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SetComittedFlag) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtFlushInstallUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##InstallUILanguage) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SetComittedFlag) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFlushInstructionCache ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T Length']
#define locals_WINDOWS_7__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFlushInstructionCache(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtFlushInstructionCache(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFlushKey ['HANDLE KeyHandle']
#define locals_WINDOWS_7__X86_NtFlushKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFlushKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtFlushKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// VOID NtFlushProcessWriteBuffers ['']
#undef locals_WINDOWS_7__X86_NtFlushProcessWriteBuffers
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtFlushProcessWriteBuffers
#endif

// NTSTATUS NtFlushVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'PIO_STATUS_BLOCK IoStatus']
#define locals_WINDOWS_7__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFlushVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtFlushVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFlushWriteBuffer ['']
#undef locals_WINDOWS_7__X86_NtFlushWriteBuffer
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtFlushWriteBuffer
#endif

// NTSTATUS NtFreeUserPhysicalPages ['HANDLE ProcessHandle', 'PULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_7__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFreeUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtFreeUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtFreeVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG FreeType']
#define locals_WINDOWS_7__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##FreeType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFreeVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtFreeVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##FreeType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtFreezeRegistry ['ULONG TimeOutInSeconds']
#define locals_WINDOWS_7__X86_NtFreezeRegistry(ctx, pref) \
	uint32_t UNUSED(pref##TimeOutInSeconds) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFreezeRegistry(ctx, pref) \
	uint32_t &UNUSED(pref##TimeOutInSeconds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtFreezeRegistry(ctx, pref) \
	const uint32_t &UNUSED(pref##TimeOutInSeconds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtFreezeTransactions ['PLARGE_INTEGER FreezeTimeout', 'PLARGE_INTEGER ThawTimeout']
#define locals_WINDOWS_7__X86_NtFreezeTransactions(ctx, pref) \
	uint32_t UNUSED(pref##FreezeTimeout) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThawTimeout) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFreezeTransactions(ctx, pref) \
	uint32_t &UNUSED(pref##FreezeTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThawTimeout) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtFreezeTransactions(ctx, pref) \
	const uint32_t &UNUSED(pref##FreezeTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThawTimeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtFsControlFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG IoControlCode', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_7__X86_NtFsControlFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoControlCode) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtFsControlFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtFsControlFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoControlCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtGetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_7__X86_NtGetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtGetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// ULONG NtGetCurrentProcessorNumber ['']
#undef locals_WINDOWS_7__X86_NtGetCurrentProcessorNumber
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtGetCurrentProcessorNumber
#endif

// NTSTATUS NtGetDevicePowerState ['HANDLE Device', 'DEVICE_POWER_STATE *State']
#define locals_WINDOWS_7__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t UNUSED(pref##Device) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetDevicePowerState(ctx, pref) \
	uint32_t &UNUSED(pref##Device) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtGetDevicePowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##Device) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtGetMUIRegistryInfo ['ULONG Flags', 'PULONG DataSize', 'PVOID Data']
#define locals_WINDOWS_7__X86_NtGetMUIRegistryInfo(ctx, pref) \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DataSize) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Data) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetMUIRegistryInfo(ctx, pref) \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Data) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtGetMUIRegistryInfo(ctx, pref) \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Data) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtGetNextProcess ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Flags', 'PHANDLE NewProcessHandle']
#define locals_WINDOWS_7__X86_NtGetNextProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NewProcessHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetNextProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NewProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtGetNextProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NewProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtGetNextThread ['HANDLE ProcessHandle', 'HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'ULONG Flags', 'PHANDLE NewThreadHandle']
#define locals_WINDOWS_7__X86_NtGetNextThread(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NewThreadHandle) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetNextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NewThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtGetNextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NewThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtGetNlsSectionPtr ['ULONG SectionType', 'ULONG SectionData', 'PVOID ContextData', 'PVOID *SectionPointer', 'PULONG SectionSize']
#define locals_WINDOWS_7__X86_NtGetNlsSectionPtr(ctx, pref) \
	uint32_t UNUSED(pref##SectionType) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SectionData) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ContextData) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionPointer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SectionSize) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetNlsSectionPtr(ctx, pref) \
	uint32_t &UNUSED(pref##SectionType) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SectionData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ContextData) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionPointer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SectionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtGetNlsSectionPtr(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionType) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SectionData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ContextData) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionPointer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SectionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtGetNotificationResourceManager ['HANDLE ResourceManagerHandle', 'PTRANSACTION_NOTIFICATION TransactionNotification', 'ULONG NotificationLength', 'PLARGE_INTEGER Timeout', 'PULONG ReturnLength', 'ULONG Asynchronous', 'ULONG_PTR AsynchronousContext']
#define locals_WINDOWS_7__X86_NtGetNotificationResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TransactionNotification) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NotificationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##AsynchronousContext) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetNotificationResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TransactionNotification) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NotificationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##AsynchronousContext) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtGetNotificationResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TransactionNotification) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NotificationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##AsynchronousContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtGetPlugPlayEvent ['HANDLE EventHandle', 'PVOID Context', 'PPLUGPLAY_EVENT_BLOCK EventBlock', 'ULONG EventBufferSize']
#define locals_WINDOWS_7__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventBlock) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventBufferSize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetPlugPlayEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtGetPlugPlayEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventBufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtGetWriteWatch ['HANDLE ProcessHandle', 'ULONG Flags', 'PVOID BaseAddress', 'SIZE_T RegionSize', 'PVOID *UserAddressArray', 'PULONG_PTR EntriesInUserAddressArray', 'PULONG Granularity']
#define locals_WINDOWS_7__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##UserAddressArray) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EntriesInUserAddressArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Granularity) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtGetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtGetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##UserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EntriesInUserAddressArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Granularity) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtImpersonateAnonymousToken ['HANDLE ThreadHandle']
#define locals_WINDOWS_7__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtImpersonateAnonymousToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtImpersonateAnonymousToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtImpersonateClientOfPort ['HANDLE PortHandle', 'PPORT_MESSAGE Message']
#define locals_WINDOWS_7__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtImpersonateClientOfPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtImpersonateClientOfPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtImpersonateThread ['HANDLE ServerThreadHandle', 'HANDLE ClientThreadHandle', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos']
#define locals_WINDOWS_7__X86_NtImpersonateThread(ctx, pref) \
	uint32_t UNUSED(pref##ServerThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ClientThreadHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtImpersonateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtImpersonateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ServerThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ClientThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtInitializeNlsFiles ['PVOID *BaseAddress', 'PLCID DefaultLocaleId', 'PLARGE_INTEGER DefaultCasingTableSize']
#define locals_WINDOWS_7__X86_NtInitializeNlsFiles(ctx, pref) \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DefaultCasingTableSize) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtInitializeNlsFiles(ctx, pref) \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DefaultCasingTableSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtInitializeNlsFiles(ctx, pref) \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DefaultCasingTableSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtInitializeRegistry ['USHORT BootCondition']
#define locals_WINDOWS_7__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t UNUSED(pref##BootCondition) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtInitializeRegistry(ctx, pref) \
	uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtInitializeRegistry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootCondition) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtInitiatePowerAction ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_7__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtInitiatePowerAction(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtInitiatePowerAction(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtIsProcessInJob ['HANDLE ProcessHandle', 'HANDLE JobHandle']
#define locals_WINDOWS_7__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtIsProcessInJob(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtIsProcessInJob(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// BOOLEAN NtIsSystemResumeAutomatic ['']
#undef locals_WINDOWS_7__X86_NtIsSystemResumeAutomatic
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtIsSystemResumeAutomatic
#endif

// NTSTATUS NtIsUILanguageComitted ['']
#undef locals_WINDOWS_7__X86_NtIsUILanguageComitted
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtIsUILanguageComitted
#endif

// NTSTATUS NtListenPort ['HANDLE PortHandle', 'PPORT_MESSAGE ConnectionRequest']
#define locals_WINDOWS_7__X86_NtListenPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ConnectionRequest) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtListenPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtListenPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ConnectionRequest) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_7__X86_NtLoadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLoadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtLoadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLoadKey ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile']
#define locals_WINDOWS_7__X86_NtLoadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLoadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtLoadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLoadKey2 ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtLoadKey2(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLoadKey2(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtLoadKey2(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtLoadKeyEx ['POBJECT_ATTRIBUTES TargetKey', 'POBJECT_ATTRIBUTES SourceFile', 'ULONG Flags', 'HANDLE TrustClassKey']
#define locals_WINDOWS_7__X86_NtLoadKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SourceFile) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TrustClassKey) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLoadKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TrustClassKey) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtLoadKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SourceFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TrustClassKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtLockFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key', 'BOOLEAN FailImmediately', 'BOOLEAN ExclusiveLock']
#define locals_WINDOWS_7__X86_NtLockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##FailImmediately) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ExclusiveLock) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtLockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##FailImmediately) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ExclusiveLock) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtLockProductActivationKeys ['ULONG *pPrivateVer', 'ULONG *pSafeMode']
#define locals_WINDOWS_7__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t UNUSED(pref##pPrivateVer) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pSafeMode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLockProductActivationKeys(ctx, pref) \
	uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtLockProductActivationKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##pPrivateVer) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pSafeMode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtLockRegistryKey ['HANDLE KeyHandle']
#define locals_WINDOWS_7__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLockRegistryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtLockRegistryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtLockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_7__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtLockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtLockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtMakePermanentObject ['HANDLE Handle']
#define locals_WINDOWS_7__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMakePermanentObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtMakePermanentObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMakeTemporaryObject ['HANDLE Handle']
#define locals_WINDOWS_7__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMakeTemporaryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtMakeTemporaryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtMapCMFModule ['ULONG What', 'ULONG Index', 'PULONG CacheIndexOut', 'PULONG CacheFlagsOut', 'PULONG ViewSizeOut', 'PVOID *BaseAddress']
#define locals_WINDOWS_7__X86_NtMapCMFModule(ctx, pref) \
	uint32_t UNUSED(pref##What) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Index) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##CacheIndexOut) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##CacheFlagsOut) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ViewSizeOut) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMapCMFModule(ctx, pref) \
	uint32_t &UNUSED(pref##What) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Index) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##CacheIndexOut) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##CacheFlagsOut) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ViewSizeOut) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtMapCMFModule(ctx, pref) \
	const uint32_t &UNUSED(pref##What) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Index) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##CacheIndexOut) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##CacheFlagsOut) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ViewSizeOut) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtMapUserPhysicalPages ['PVOID VirtualAddress', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_7__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddress) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMapUserPhysicalPages(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtMapUserPhysicalPages(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapUserPhysicalPagesScatter ['PVOID *VirtualAddresses', 'ULONG_PTR NumberOfPages', 'PULONG_PTR UserPfnArray']
#define locals_WINDOWS_7__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t UNUSED(pref##VirtualAddresses) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfPages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UserPfnArray) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtMapUserPhysicalPagesScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##VirtualAddresses) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfPages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UserPfnArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtMapViewOfSection ['HANDLE SectionHandle', 'HANDLE ProcessHandle', 'PVOID *BaseAddress', 'ULONG_PTR ZeroBits', 'SIZE_T CommitSize', 'PLARGE_INTEGER SectionOffset', 'PSIZE_T ViewSize', 'SECTION_INHERIT InheritDisposition', 'ULONG AllocationType', 'WIN32_PROTECTION_MASK Win32Protect']
#define locals_WINDOWS_7__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ZeroBits) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CommitSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SectionOffset) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ViewSize) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##InheritDisposition) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##AllocationType) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Win32Protect) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtMapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtMapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ZeroBits) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CommitSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SectionOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ViewSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##InheritDisposition) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##AllocationType) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Win32Protect) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtModifyBootEntry ['PBOOT_ENTRY BootEntry']
#define locals_WINDOWS_7__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t UNUSED(pref##BootEntry) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtModifyBootEntry(ctx, pref) \
	uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtModifyBootEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##BootEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtModifyDriverEntry ['PEFI_DRIVER_ENTRY DriverEntry']
#define locals_WINDOWS_7__X86_NtModifyDriverEntry(ctx, pref) \
	uint32_t UNUSED(pref##DriverEntry) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtModifyDriverEntry(ctx, pref) \
	uint32_t &UNUSED(pref##DriverEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtModifyDriverEntry(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtNotifyChangeDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'ULONG CompletionFilter', 'BOOLEAN WatchTree']
#define locals_WINDOWS_7__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtNotifyChangeDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtNotifyChangeKey ['HANDLE KeyHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_7__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[9]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtNotifyChangeKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[9]);
#define creferences_WINDOWS_7__X86_NtNotifyChangeKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]);
#endif

// NTSTATUS NtNotifyChangeMultipleKeys ['HANDLE MasterKeyHandle', 'ULONG Count', 'OBJECT_ATTRIBUTES SlaveObjects[]', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG CompletionFilter', 'BOOLEAN WatchTree', 'PVOID Buffer', 'ULONG BufferSize', 'BOOLEAN Asynchronous']
#define locals_WINDOWS_7__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t UNUSED(pref##MasterKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SlaveObjects) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##CompletionFilter) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##WatchTree) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##Asynchronous) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_7__X86_NtNotifyChangeMultipleKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##MasterKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SlaveObjects) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##CompletionFilter) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##WatchTree) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##Asynchronous) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtNotifyChangeSession ['HANDLE Session', 'ULONG IoStateSequence', 'PVOID Reserved', 'ULONG Action', 'IO_SESSION_STATE IoState', 'IO_SESSION_STATE IoState2', 'PVOID Buffer', 'ULONG BufferSize']
#define locals_WINDOWS_7__X86_NtNotifyChangeSession(ctx, pref) \
	uint32_t UNUSED(pref##Session) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStateSequence) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Reserved) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Action) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoState) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoState2) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[7]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtNotifyChangeSession(ctx, pref) \
	uint32_t &UNUSED(pref##Session) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStateSequence) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Reserved) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Action) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoState) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoState2) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[7]);
#define creferences_WINDOWS_7__X86_NtNotifyChangeSession(ctx, pref) \
	const uint32_t &UNUSED(pref##Session) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStateSequence) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Reserved) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Action) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoState) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoState2) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]);
#endif

// NTSTATUS NtOpenDirectoryObject ['PHANDLE DirectoryHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEnlistment ['PHANDLE EnlistmentHandle', 'ACCESS_MASK DesiredAccess', 'HANDLE ResourceManagerHandle', 'LPGUID EnlistmentGuid', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EnlistmentGuid) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EnlistmentGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtOpenEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EnlistmentGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenEvent ['PHANDLE EventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenEventPair ['PHANDLE EventPairHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenFile ['PHANDLE FileHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PIO_STATUS_BLOCK IoStatusBlock', 'ULONG ShareAccess', 'ULONG OpenOptions']
#define locals_WINDOWS_7__X86_NtOpenFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ShareAccess) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtOpenFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ShareAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtOpenIoCompletion ['PHANDLE IoCompletionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenJobObject ['PHANDLE JobHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKey ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKeyEx ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG OpenOptions']
#define locals_WINDOWS_7__X86_NtOpenKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenKeyedEvent ['PHANDLE KeyedEventHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenKeyTransacted ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'HANDLE TransactionHandle']
#define locals_WINDOWS_7__X86_NtOpenKeyTransacted(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenKeyTransacted(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenKeyTransacted(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenKeyTransactedEx ['PHANDLE KeyHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'ULONG OpenOptions', 'HANDLE TransactionHandle']
#define locals_WINDOWS_7__X86_NtOpenKeyTransactedEx(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenKeyTransactedEx(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtOpenKeyTransactedEx(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenMutant ['PHANDLE MutantHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'PUNICODE_STRING ObjectTypeName', 'PUNICODE_STRING ObjectName', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'ACCESS_MASK GrantedAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN ObjectCreation', 'BOOLEAN AccessGranted', 'PBOOLEAN GenerateOnClose']
#define locals_WINDOWS_7__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectTypeName) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##GrantedAccess) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##ObjectCreation) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[10]); \
	uint32_t UNUSED(pref##GenerateOnClose) = *(uint32_t *)((ctx)->args[11]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[10]); \
	uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<uint32_t *>((ctx)->args[11]);
#define creferences_WINDOWS_7__X86_NtOpenObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectTypeName) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##GrantedAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##ObjectCreation) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]); \
	const uint32_t &UNUSED(pref##GenerateOnClose) = *reinterpret_cast<const uint32_t *>((ctx)->args[11]);
#endif

// NTSTATUS NtOpenPrivateNamespace ['PHANDLE NamespaceHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PVOID BoundaryDescriptor']
#define locals_WINDOWS_7__X86_NtOpenPrivateNamespace(ctx, pref) \
	uint32_t UNUSED(pref##NamespaceHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BoundaryDescriptor) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenPrivateNamespace(ctx, pref) \
	uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BoundaryDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenPrivateNamespace(ctx, pref) \
	const uint32_t &UNUSED(pref##NamespaceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BoundaryDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenProcess ['PHANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_7__X86_NtOpenProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenProcessToken ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'PHANDLE TokenHandle']
#define locals_WINDOWS_7__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenProcessToken(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenProcessToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenProcessTokenEx ['HANDLE ProcessHandle', 'ACCESS_MASK DesiredAccess', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_7__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenProcessTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenProcessTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenResourceManager ['PHANDLE ResourceManagerHandle', 'ACCESS_MASK DesiredAccess', 'HANDLE TmHandle', 'LPGUID ResourceManagerGuid', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ResourceManagerGuid) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ResourceManagerGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtOpenResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ResourceManagerGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenSection ['PHANDLE SectionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenSection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenSection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenSection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSemaphore ['PHANDLE SemaphoreHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSession ['PHANDLE SessionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenSession(ctx, pref) \
	uint32_t UNUSED(pref##SessionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenSession(ctx, pref) \
	uint32_t &UNUSED(pref##SessionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenSession(ctx, pref) \
	const uint32_t &UNUSED(pref##SessionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenSymbolicLinkObject ['PHANDLE LinkHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenSymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenThread ['PHANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PCLIENT_ID ClientId']
#define locals_WINDOWS_7__X86_NtOpenThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientId) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientId) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadToken ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'PHANDLE TokenHandle']
#define locals_WINDOWS_7__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenThreadToken(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtOpenThreadToken(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtOpenThreadTokenEx ['HANDLE ThreadHandle', 'ACCESS_MASK DesiredAccess', 'BOOLEAN OpenAsSelf', 'ULONG HandleAttributes', 'PHANDLE TokenHandle']
#define locals_WINDOWS_7__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OpenAsSelf) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##HandleAttributes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenThreadTokenEx(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtOpenThreadTokenEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OpenAsSelf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##HandleAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenTimer ['PHANDLE TimerHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes']
#define locals_WINDOWS_7__X86_NtOpenTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtOpenTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtOpenTransaction ['PHANDLE TransactionHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'LPGUID Uow', 'HANDLE TmHandle']
#define locals_WINDOWS_7__X86_NtOpenTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Uow) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Uow) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtOpenTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Uow) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtOpenTransactionManager ['PHANDLE TmHandle', 'ACCESS_MASK DesiredAccess', 'POBJECT_ATTRIBUTES ObjectAttributes', 'PUNICODE_STRING LogFileName', 'LPGUID TmIdentity', 'ULONG OpenOptions']
#define locals_WINDOWS_7__X86_NtOpenTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##LogFileName) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##TmIdentity) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##OpenOptions) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtOpenTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##TmIdentity) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtOpenTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##TmIdentity) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##OpenOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtPlugPlayControl ['PLUGPLAY_CONTROL_CLASS PnPControlClass', 'PVOID PnPControlData', 'ULONG PnPControlDataLength']
#define locals_WINDOWS_7__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t UNUSED(pref##PnPControlClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PnPControlData) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PnPControlDataLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPlugPlayControl(ctx, pref) \
	uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtPlugPlayControl(ctx, pref) \
	const uint32_t &UNUSED(pref##PnPControlClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PnPControlData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PnPControlDataLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPowerInformation ['POWER_INFORMATION_LEVEL InformationLevel', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength']
#define locals_WINDOWS_7__X86_NtPowerInformation(ctx, pref) \
	uint32_t UNUSED(pref##InformationLevel) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPowerInformation(ctx, pref) \
	uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtPowerInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##InformationLevel) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrepareComplete ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtPrepareComplete(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrepareComplete(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtPrepareComplete(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtPrepareEnlistment ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtPrepareEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrepareEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtPrepareEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtPrePrepareComplete ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtPrePrepareComplete(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrePrepareComplete(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtPrePrepareComplete(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtPrePrepareEnlistment ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtPrePrepareEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrePrepareEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtPrePrepareEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtPrivilegeCheck ['HANDLE ClientToken', 'PPRIVILEGE_SET RequiredPrivileges', 'PBOOLEAN Result']
#define locals_WINDOWS_7__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequiredPrivileges) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrivilegeCheck(ctx, pref) \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtPrivilegeCheck(ctx, pref) \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequiredPrivileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtPrivilegedServiceAuditAlarm ['PUNICODE_STRING SubsystemName', 'PUNICODE_STRING ServiceName', 'HANDLE ClientToken', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_7__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtPrivilegedServiceAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPrivilegeObjectAuditAlarm ['PUNICODE_STRING SubsystemName', 'PVOID HandleId', 'HANDLE ClientToken', 'ACCESS_MASK DesiredAccess', 'PPRIVILEGE_SET Privileges', 'BOOLEAN AccessGranted']
#define locals_WINDOWS_7__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t UNUSED(pref##SubsystemName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ClientToken) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DesiredAccess) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Privileges) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##AccessGranted) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtPrivilegeObjectAuditAlarm(ctx, pref) \
	const uint32_t &UNUSED(pref##SubsystemName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ClientToken) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DesiredAccess) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Privileges) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##AccessGranted) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtPropagationComplete ['HANDLE ResourceManagerHandle', 'ULONG RequestCookie', 'ULONG BufferLength', 'PVOID Buffer']
#define locals_WINDOWS_7__X86_NtPropagationComplete(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestCookie) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPropagationComplete(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestCookie) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtPropagationComplete(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestCookie) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtPropagationFailed ['HANDLE ResourceManagerHandle', 'ULONG RequestCookie', 'NTSTATUS PropStatus']
#define locals_WINDOWS_7__X86_NtPropagationFailed(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestCookie) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PropStatus) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPropagationFailed(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestCookie) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PropStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtPropagationFailed(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestCookie) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PropStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtProtectVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'WIN32_PROTECTION_MASK NewProtectWin32', 'PULONG OldProtect']
#define locals_WINDOWS_7__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##NewProtectWin32) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OldProtect) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtProtectVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtProtectVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##NewProtectWin32) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OldProtect) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtPulseEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_7__X86_NtPulseEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtPulseEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtPulseEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_BASIC_INFORMATION FileInformation']
#define locals_WINDOWS_7__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootEntryOrder ['PULONG Ids', 'PULONG Count']
#define locals_WINDOWS_7__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryBootOptions ['PBOOT_OPTIONS BootOptions', 'PULONG BootOptionsLength']
#define locals_WINDOWS_7__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BootOptionsLength) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BootOptionsLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDebugFilterState ['ULONG ComponentId', 'ULONG Level']
#define locals_WINDOWS_7__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultLocale ['BOOLEAN UserProfile', 'PLCID DefaultLocaleId']
#define locals_WINDOWS_7__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryDefaultUILanguage ['LANGID *DefaultUILanguageId']
#define locals_WINDOWS_7__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtQueryDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryDirectoryFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass', 'BOOLEAN ReturnSingleEntry', 'PUNICODE_STRING FileName', 'BOOLEAN RestartScan']
#define locals_WINDOWS_7__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[8]); \
	uint32_t UNUSED(pref##FileName) = *(uint32_t *)((ctx)->args[9]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[10]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDirectoryFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[8]); \
	uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<uint32_t *>((ctx)->args[9]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[10]);
#define creferences_WINDOWS_7__X86_NtQueryDirectoryFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]); \
	const uint32_t &UNUSED(pref##FileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[9]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[10]);
#endif

// NTSTATUS NtQueryDirectoryObject ['HANDLE DirectoryHandle', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'BOOLEAN RestartScan', 'PULONG Context', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t UNUSED(pref##DirectoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Context) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDirectoryObject(ctx, pref) \
	uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Context) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtQueryDirectoryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DirectoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Context) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtQueryDriverEntryOrder ['PULONG Ids', 'PULONG Count']
#define locals_WINDOWS_7__X86_NtQueryDriverEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryDriverEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryDriverEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID EaList', 'ULONG EaListLength', 'PULONG EaIndex', 'BOOLEAN RestartScan']
#define locals_WINDOWS_7__X86_NtQueryEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##EaList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##EaListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##EaIndex) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtQueryEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##EaList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##EaListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##EaIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQueryEvent ['HANDLE EventHandle', 'EVENT_INFORMATION_CLASS EventInformationClass', 'PVOID EventInformation', 'ULONG EventInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EventInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EventInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EventInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EventInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EventInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EventInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryFullAttributesFile ['POBJECT_ATTRIBUTES ObjectAttributes', 'PFILE_NETWORK_OPEN_INFORMATION FileInformation']
#define locals_WINDOWS_7__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t UNUSED(pref##ObjectAttributes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryFullAttributesFile(ctx, pref) \
	uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryFullAttributesFile(ctx, pref) \
	const uint32_t &UNUSED(pref##ObjectAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryInformationAtom ['RTL_ATOM Atom', 'ATOM_INFORMATION_CLASS InformationClass', 'PVOID AtomInformation', 'ULONG AtomInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t UNUSED(pref##Atom) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##AtomInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##AtomInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationAtom(ctx, pref) \
	uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationAtom(ctx, pref) \
	const uint32_t &UNUSED(pref##Atom) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##AtomInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##AtomInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationEnlistment ['HANDLE EnlistmentHandle', 'ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass', 'PVOID EnlistmentInformation', 'ULONG EnlistmentInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EnlistmentInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EnlistmentInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EnlistmentInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EnlistmentInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EnlistmentInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EnlistmentInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EnlistmentInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EnlistmentInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EnlistmentInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_7__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationPort ['HANDLE PortHandle', 'PORT_INFORMATION_CLASS PortInformationClass', 'PVOID PortInformation', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PortInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PortInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationResourceManager ['HANDLE ResourceManagerHandle', 'RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass', 'PVOID ResourceManagerInformation', 'ULONG ResourceManagerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResourceManagerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ResourceManagerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ResourceManagerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResourceManagerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ResourceManagerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ResourceManagerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationTransaction ['HANDLE TransactionHandle', 'TRANSACTION_INFORMATION_CLASS TransactionInformationClass', 'PVOID TransactionInformation', 'ULONG TransactionInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TransactionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TransactionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TransactionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TransactionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TransactionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TransactionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationTransactionManager ['HANDLE TransactionManagerHandle', 'TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass', 'PVOID TransactionManagerInformation', 'ULONG TransactionManagerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TransactionManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TransactionManagerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TransactionManagerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionManagerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TransactionManagerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TransactionManagerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionManagerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInformationWorkerFactory ['HANDLE WorkerFactoryHandle', 'WORKERFACTORYINFOCLASS WorkerFactoryInformationClass', 'PVOID WorkerFactoryInformation', 'ULONG WorkerFactoryInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryInformationWorkerFactory(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WorkerFactoryInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WorkerFactoryInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##WorkerFactoryInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInformationWorkerFactory(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryInformationWorkerFactory(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryInstallUILanguage ['LANGID *InstallUILanguageId']
#define locals_WINDOWS_7__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##InstallUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryInstallUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtQueryInstallUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##InstallUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryIntervalProfile ['KPROFILE_SOURCE ProfileSource', 'PULONG Interval']
#define locals_WINDOWS_7__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileSource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileSource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryIoCompletion ['HANDLE IoCompletionHandle', 'IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass', 'PVOID IoCompletionInformation', 'ULONG IoCompletionInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##IoCompletionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoCompletionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoCompletionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryKey ['HANDLE KeyHandle', 'KEY_INFORMATION_CLASS KeyInformationClass', 'PVOID KeyInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_7__X86_NtQueryKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryLicenseValue ['PUNICODE_STRING Name', 'PULONG Type', 'PVOID Buffer', 'ULONG Length', 'PULONG ReturnedLength']
#define locals_WINDOWS_7__X86_NtQueryLicenseValue(ctx, pref) \
	uint32_t UNUSED(pref##Name) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnedLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryLicenseValue(ctx, pref) \
	uint32_t &UNUSED(pref##Name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryLicenseValue(ctx, pref) \
	const uint32_t &UNUSED(pref##Name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryMultipleValueKey ['HANDLE KeyHandle', 'PKEY_VALUE_ENTRY ValueEntries', 'ULONG EntryCount', 'PVOID ValueBuffer', 'PULONG BufferLength', 'PULONG RequiredBufferLength']
#define locals_WINDOWS_7__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueEntries) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EntryCount) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##RequiredBufferLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryMultipleValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQueryMultipleValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueEntries) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EntryCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##RequiredBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryMutant ['HANDLE MutantHandle', 'MUTANT_INFORMATION_CLASS MutantInformationClass', 'PVOID MutantInformation', 'ULONG MutantInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MutantInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MutantInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MutantInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MutantInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MutantInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MutantInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryOpenSubKeys ['POBJECT_ATTRIBUTES TargetKey', 'PULONG HandleCount']
#define locals_WINDOWS_7__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##HandleCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryOpenSubKeys(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryOpenSubKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##HandleCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryOpenSubKeysEx ['POBJECT_ATTRIBUTES TargetKey', 'ULONG BufferLength', 'PVOID Buffer', 'PULONG RequiredSize']
#define locals_WINDOWS_7__X86_NtQueryOpenSubKeysEx(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BufferLength) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##RequiredSize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryOpenSubKeysEx(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##RequiredSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtQueryOpenSubKeysEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##RequiredSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQueryPerformanceCounter ['PLARGE_INTEGER PerformanceCounter', 'PLARGE_INTEGER PerformanceFrequency']
#define locals_WINDOWS_7__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t UNUSED(pref##PerformanceCounter) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PerformanceFrequency) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryPerformanceCounter(ctx, pref) \
	uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtQueryPerformanceCounter(ctx, pref) \
	const uint32_t &UNUSED(pref##PerformanceCounter) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PerformanceFrequency) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtQueryPortInformationProcess ['']
#undef locals_WINDOWS_7__X86_NtQueryPortInformationProcess
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtQueryPortInformationProcess
#endif

// NTSTATUS NtQueryQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'BOOLEAN ReturnSingleEntry', 'PVOID SidList', 'ULONG SidListLength', 'PULONG StartSid', 'BOOLEAN RestartScan']
#define locals_WINDOWS_7__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnSingleEntry) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SidList) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##SidListLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##StartSid) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##RestartScan) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtQueryQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnSingleEntry) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SidList) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##SidListLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##StartSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##RestartScan) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtQuerySection ['HANDLE SectionHandle', 'SECTION_INFORMATION_CLASS SectionInformationClass', 'PVOID SectionInformation', 'SIZE_T SectionInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySection(ctx, pref) \
	uint32_t UNUSED(pref##SectionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SectionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SectionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SectionInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySection(ctx, pref) \
	uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQuerySection(ctx, pref) \
	const uint32_t &UNUSED(pref##SectionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SectionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySecurityAttributesToken ['HANDLE TokenHandle', 'PUNICODE_STRING Attributes', 'ULONG NumberOfAttributes', 'PVOID Buffer', 'ULONG Length', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySecurityAttributesToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##NumberOfAttributes) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySecurityAttributesToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##NumberOfAttributes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQuerySecurityAttributesToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##NumberOfAttributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQuerySecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor', 'ULONG Length', 'PULONG LengthNeeded']
#define locals_WINDOWS_7__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##LengthNeeded) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQuerySecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##LengthNeeded) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySemaphore ['HANDLE SemaphoreHandle', 'SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass', 'PVOID SemaphoreInformation', 'ULONG SemaphoreInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SemaphoreInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SemaphoreInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SemaphoreInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQuerySemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SemaphoreInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SemaphoreInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySymbolicLinkObject ['HANDLE LinkHandle', 'PUNICODE_STRING LinkTarget', 'PULONG ReturnedLength']
#define locals_WINDOWS_7__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t UNUSED(pref##LinkHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LinkTarget) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReturnedLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtQuerySymbolicLinkObject(ctx, pref) \
	const uint32_t &UNUSED(pref##LinkHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LinkTarget) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReturnedLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PWSTR VariableValue', 'USHORT ValueLength', 'PUSHORT ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtQuerySystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'PULONG ValueLength', 'PULONG Attributes']
#define locals_WINDOWS_7__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQuerySystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQuerySystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtQuerySystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtQuerySystemInformationEx ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID QueryInformation', 'ULONG QueryInformationLength', 'PVOID SystemInformation', 'ULONG SystemInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQuerySystemInformationEx(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##QueryInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##QueryInformationLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySystemInformationEx(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##QueryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##QueryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQuerySystemInformationEx(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##QueryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##QueryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQuerySystemTime ['PLARGE_INTEGER SystemTime']
#define locals_WINDOWS_7__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQuerySystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtQuerySystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtQueryTimer ['HANDLE TimerHandle', 'TIMER_INFORMATION_CLASS TimerInformationClass', 'PVOID TimerInformation', 'ULONG TimerInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TimerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TimerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueryTimerResolution ['PULONG MaximumTime', 'PULONG MinimumTime', 'PULONG CurrentTime']
#define locals_WINDOWS_7__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##MaximumTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinimumTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##CurrentTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtQueryTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##MaximumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinimumTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##CurrentTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtQueryValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass', 'PVOID KeyValueInformation', 'ULONG Length', 'PULONG ResultLength']
#define locals_WINDOWS_7__X86_NtQueryValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyValueInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeyValueInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ResultLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQueryValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyValueInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeyValueInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ResultLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'MEMORY_INFORMATION_CLASS MemoryInformationClass', 'PVOID MemoryInformation', 'SIZE_T MemoryInformationLength', 'PSIZE_T ReturnLength']
#define locals_WINDOWS_7__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##MemoryInformationClass) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MemoryInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##MemoryInformationLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQueryVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##MemoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MemoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##MemoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtQueryVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_7__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueryVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueryVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueueApcThread ['HANDLE ThreadHandle', 'PPS_APC_ROUTINE ApcRoutine', 'PVOID ApcArgument1', 'PVOID ApcArgument2', 'PVOID ApcArgument3']
#define locals_WINDOWS_7__X86_NtQueueApcThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcArgument1) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcArgument2) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcArgument3) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueueApcThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtQueueApcThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtQueueApcThreadEx ['HANDLE ThreadHandle', 'HANDLE UserApcReserveHandle', 'PPS_APC_ROUTINE ApcRoutine', 'PVOID ApcArgument1', 'PVOID ApcArgument2', 'PVOID ApcArgument3']
#define locals_WINDOWS_7__X86_NtQueueApcThreadEx(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##UserApcReserveHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcArgument1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ApcArgument2) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ApcArgument3) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtQueueApcThreadEx(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##UserApcReserveHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtQueueApcThreadEx(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##UserApcReserveHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcArgument1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ApcArgument2) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ApcArgument3) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtRaiseException ['PEXCEPTION_RECORD ExceptionRecord', 'PCONTEXT ContextRecord', 'BOOLEAN FirstChance']
#define locals_WINDOWS_7__X86_NtRaiseException(ctx, pref) \
	uint32_t UNUSED(pref##ExceptionRecord) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ContextRecord) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FirstChance) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRaiseException(ctx, pref) \
	uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtRaiseException(ctx, pref) \
	const uint32_t &UNUSED(pref##ExceptionRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ContextRecord) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FirstChance) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRaiseHardError ['NTSTATUS ErrorStatus', 'ULONG NumberOfParameters', 'ULONG UnicodeStringParameterMask', 'PULONG_PTR Parameters', 'ULONG ValidResponseOptions', 'PULONG Response']
#define locals_WINDOWS_7__X86_NtRaiseHardError(ctx, pref) \
	uint32_t UNUSED(pref##ErrorStatus) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NumberOfParameters) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##UnicodeStringParameterMask) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Parameters) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ValidResponseOptions) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Response) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRaiseHardError(ctx, pref) \
	uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Response) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtRaiseHardError(ctx, pref) \
	const uint32_t &UNUSED(pref##ErrorStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NumberOfParameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##UnicodeStringParameterMask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Parameters) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ValidResponseOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Response) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_7__X86_NtReadFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReadFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtReadFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadFileScatter ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_7__X86_NtReadFileScatter(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReadFileScatter(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtReadFileScatter(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtReadOnlyEnlistment ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtReadOnlyEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReadOnlyEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtReadOnlyEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReadRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_7__X86_NtReadRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReadRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtReadRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtReadVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesRead']
#define locals_WINDOWS_7__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesRead) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReadVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtReadVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesRead) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRecoverEnlistment ['HANDLE EnlistmentHandle', 'PVOID EnlistmentKey']
#define locals_WINDOWS_7__X86_NtRecoverEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EnlistmentKey) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRecoverEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EnlistmentKey) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRecoverEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EnlistmentKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRecoverResourceManager ['HANDLE ResourceManagerHandle']
#define locals_WINDOWS_7__X86_NtRecoverResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRecoverResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtRecoverResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtRecoverTransactionManager ['HANDLE TransactionManagerHandle']
#define locals_WINDOWS_7__X86_NtRecoverTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TransactionManagerHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRecoverTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtRecoverTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtRegisterProtocolAddressInformation ['HANDLE ResourceManager', 'PCRM_PROTOCOL_ID ProtocolId', 'ULONG ProtocolInformationSize', 'PVOID ProtocolInformation', 'ULONG CreateOptions']
#define locals_WINDOWS_7__X86_NtRegisterProtocolAddressInformation(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManager) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProtocolId) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProtocolInformationSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProtocolInformation) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##CreateOptions) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRegisterProtocolAddressInformation(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManager) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProtocolId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProtocolInformationSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProtocolInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtRegisterProtocolAddressInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManager) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProtocolId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProtocolInformationSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProtocolInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##CreateOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRegisterThreadTerminatePort ['HANDLE PortHandle']
#define locals_WINDOWS_7__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtRegisterThreadTerminatePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtReleaseKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReleaseKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtReleaseKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtReleaseMutant ['HANDLE MutantHandle', 'PLONG PreviousCount']
#define locals_WINDOWS_7__X86_NtReleaseMutant(ctx, pref) \
	uint32_t UNUSED(pref##MutantHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReleaseMutant(ctx, pref) \
	uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtReleaseMutant(ctx, pref) \
	const uint32_t &UNUSED(pref##MutantHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReleaseSemaphore ['HANDLE SemaphoreHandle', 'LONG ReleaseCount', 'PLONG PreviousCount']
#define locals_WINDOWS_7__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t UNUSED(pref##SemaphoreHandle) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##ReleaseCount) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##PreviousCount) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReleaseSemaphore(ctx, pref) \
	uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtReleaseSemaphore(ctx, pref) \
	const uint32_t &UNUSED(pref##SemaphoreHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##ReleaseCount) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##PreviousCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReleaseWorkerFactoryWorker ['HANDLE WorkerFactoryHandle']
#define locals_WINDOWS_7__X86_NtReleaseWorkerFactoryWorker(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReleaseWorkerFactoryWorker(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtReleaseWorkerFactoryWorker(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtRemoveIoCompletion ['HANDLE IoCompletionHandle', 'PVOID *KeyContext', 'PVOID *ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRemoveIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtRemoveIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtRemoveIoCompletionEx ['HANDLE IoCompletionHandle', 'PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation', 'ULONG Count', 'PULONG NumEntriesRemoved', 'PLARGE_INTEGER Timeout', 'BOOLEAN Alertable']
#define locals_WINDOWS_7__X86_NtRemoveIoCompletionEx(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##NumEntriesRemoved) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRemoveIoCompletionEx(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##NumEntriesRemoved) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtRemoveIoCompletionEx(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##NumEntriesRemoved) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtRemoveProcessDebug ['HANDLE ProcessHandle', 'HANDLE DebugObjectHandle']
#define locals_WINDOWS_7__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRemoveProcessDebug(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRemoveProcessDebug(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRenameKey ['HANDLE KeyHandle', 'PUNICODE_STRING NewName']
#define locals_WINDOWS_7__X86_NtRenameKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##NewName) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRenameKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRenameKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##NewName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRenameTransactionManager ['PUNICODE_STRING LogFileName', 'LPGUID ExistingTransactionManagerGuid']
#define locals_WINDOWS_7__X86_NtRenameTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##LogFileName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExistingTransactionManagerGuid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRenameTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExistingTransactionManagerGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRenameTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##LogFileName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExistingTransactionManagerGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplaceKey ['POBJECT_ATTRIBUTES NewFile', 'HANDLE TargetHandle', 'POBJECT_ATTRIBUTES OldFile']
#define locals_WINDOWS_7__X86_NtReplaceKey(ctx, pref) \
	uint32_t UNUSED(pref##NewFile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TargetHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OldFile) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplaceKey(ctx, pref) \
	uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtReplaceKey(ctx, pref) \
	const uint32_t &UNUSED(pref##NewFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TargetHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OldFile) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReplacePartitionUnit ['PUNICODE_STRING TargetInstancePath', 'PUNICODE_STRING SpareInstancePath', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtReplacePartitionUnit(ctx, pref) \
	uint32_t UNUSED(pref##TargetInstancePath) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SpareInstancePath) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplacePartitionUnit(ctx, pref) \
	uint32_t &UNUSED(pref##TargetInstancePath) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SpareInstancePath) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtReplacePartitionUnit(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetInstancePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SpareInstancePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_7__X86_NtReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtReplyWaitReceivePort ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage']
#define locals_WINDOWS_7__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplyWaitReceivePort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtReplyWaitReceivePort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtReplyWaitReceivePortEx ['HANDLE PortHandle', 'PVOID *PortContext', 'PPORT_MESSAGE ReplyMessage', 'PPORT_MESSAGE ReceiveMessage', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ReceiveMessage) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtReplyWaitReceivePortEx(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ReceiveMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtReplyWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_7__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtReplyWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtReplyWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage']
#define locals_WINDOWS_7__X86_NtRequestPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRequestPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRequestPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRequestWaitReplyPort ['HANDLE PortHandle', 'PPORT_MESSAGE RequestMessage', 'PPORT_MESSAGE ReplyMessage']
#define locals_WINDOWS_7__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##RequestMessage) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ReplyMessage) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRequestWaitReplyPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtRequestWaitReplyPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##RequestMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ReplyMessage) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_7__X86_NtResetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtResetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtResetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtResetWriteWatch ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'SIZE_T RegionSize']
#define locals_WINDOWS_7__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtResetWriteWatch(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtResetWriteWatch(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtRestoreKey ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtRestoreKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRestoreKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtRestoreKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtResumeProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_7__X86_NtResumeProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtResumeProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtResumeProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtResumeThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_7__X86_NtResumeThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtResumeThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtResumeThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRollbackComplete ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtRollbackComplete(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRollbackComplete(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRollbackComplete(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRollbackEnlistment ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtRollbackEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRollbackEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRollbackEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRollbackTransaction ['HANDLE TransactionHandle', 'BOOLEAN Wait']
#define locals_WINDOWS_7__X86_NtRollbackTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Wait) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRollbackTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Wait) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRollbackTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Wait) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtRollforwardTransactionManager ['HANDLE TransactionManagerHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtRollforwardTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TransactionManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtRollforwardTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtRollforwardTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKey ['HANDLE KeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_7__X86_NtSaveKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSaveKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSaveKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSaveKeyEx ['HANDLE KeyHandle', 'HANDLE FileHandle', 'ULONG Format']
#define locals_WINDOWS_7__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Format) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSaveKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Format) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSaveKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Format) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSaveMergedKeys ['HANDLE HighPrecedenceKeyHandle', 'HANDLE LowPrecedenceKeyHandle', 'HANDLE FileHandle']
#define locals_WINDOWS_7__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t UNUSED(pref##HighPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##LowPrecedenceKeyHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSaveMergedKeys(ctx, pref) \
	uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSaveMergedKeys(ctx, pref) \
	const uint32_t &UNUSED(pref##HighPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##LowPrecedenceKeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSecureConnectPort ['PHANDLE PortHandle', 'PUNICODE_STRING PortName', 'PSECURITY_QUALITY_OF_SERVICE SecurityQos', 'PPORT_VIEW ClientView', 'PSID RequiredServerSid', 'PREMOTE_PORT_VIEW ServerView', 'PULONG MaxMessageLength', 'PVOID ConnectionInformation', 'PULONG ConnectionInformationLength']
#define locals_WINDOWS_7__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PortName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityQos) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ClientView) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##RequiredServerSid) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ServerView) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##MaxMessageLength) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ConnectionInformation) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##ConnectionInformationLength) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSecureConnectPort(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtSecureConnectPort(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PortName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityQos) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ClientView) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##RequiredServerSid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ServerView) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##MaxMessageLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ConnectionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##ConnectionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtSerializeBoot ['']
#undef locals_WINDOWS_7__X86_NtSerializeBoot
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtSerializeBoot
#endif

// NTSTATUS NtSetBootEntryOrder ['PULONG Ids', 'ULONG Count']
#define locals_WINDOWS_7__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetBootEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetBootEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetBootOptions ['PBOOT_OPTIONS BootOptions', 'ULONG FieldsToChange']
#define locals_WINDOWS_7__X86_NtSetBootOptions(ctx, pref) \
	uint32_t UNUSED(pref##BootOptions) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##FieldsToChange) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetBootOptions(ctx, pref) \
	uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetBootOptions(ctx, pref) \
	const uint32_t &UNUSED(pref##BootOptions) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##FieldsToChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetContextThread ['HANDLE ThreadHandle', 'PCONTEXT ThreadContext']
#define locals_WINDOWS_7__X86_NtSetContextThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadContext) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetContextThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetContextThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDebugFilterState ['ULONG ComponentId', 'ULONG Level', 'BOOLEAN State']
#define locals_WINDOWS_7__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t UNUSED(pref##ComponentId) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Level) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##State) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetDebugFilterState(ctx, pref) \
	uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Level) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##State) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSetDebugFilterState(ctx, pref) \
	const uint32_t &UNUSED(pref##ComponentId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Level) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##State) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetDefaultHardErrorPort ['HANDLE DefaultHardErrorPort']
#define locals_WINDOWS_7__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t UNUSED(pref##DefaultHardErrorPort) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetDefaultHardErrorPort(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultHardErrorPort) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetDefaultLocale ['BOOLEAN UserProfile', 'LCID DefaultLocaleId']
#define locals_WINDOWS_7__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t UNUSED(pref##UserProfile) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DefaultLocaleId) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetDefaultLocale(ctx, pref) \
	uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetDefaultLocale(ctx, pref) \
	const uint32_t &UNUSED(pref##UserProfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DefaultLocaleId) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetDefaultUILanguage ['LANGID DefaultUILanguageId']
#define locals_WINDOWS_7__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t UNUSED(pref##DefaultUILanguageId) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetDefaultUILanguage(ctx, pref) \
	uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetDefaultUILanguage(ctx, pref) \
	const uint32_t &UNUSED(pref##DefaultUILanguageId) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetDriverEntryOrder ['PULONG Ids', 'ULONG Count']
#define locals_WINDOWS_7__X86_NtSetDriverEntryOrder(ctx, pref) \
	uint32_t UNUSED(pref##Ids) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetDriverEntryOrder(ctx, pref) \
	uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetDriverEntryOrder(ctx, pref) \
	const uint32_t &UNUSED(pref##Ids) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetEaFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_7__X86_NtSetEaFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetEaFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetEaFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetEvent ['HANDLE EventHandle', 'PLONG PreviousState']
#define locals_WINDOWS_7__X86_NtSetEvent(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetEvent(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetEventBoostPriority ['HANDLE EventHandle']
#define locals_WINDOWS_7__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t UNUSED(pref##EventHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetEventBoostPriority(ctx, pref) \
	uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetEventBoostPriority(ctx, pref) \
	const uint32_t &UNUSED(pref##EventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetHighWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetHighWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetInformationDebugObject ['HANDLE DebugObjectHandle', 'DEBUGOBJECTINFOCLASS DebugObjectInformationClass', 'PVOID DebugInformation', 'ULONG DebugInformationLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DebugObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DebugInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##DebugInformationLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationDebugObject(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtSetInformationDebugObject(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DebugObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DebugInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##DebugInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationEnlistment ['HANDLE EnlistmentHandle', 'ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass', 'PVOID EnlistmentInformation', 'ULONG EnlistmentInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationEnlistment(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##EnlistmentInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##EnlistmentInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##EnlistmentInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationEnlistment(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##EnlistmentInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##EnlistmentInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##EnlistmentInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationEnlistment(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##EnlistmentInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##EnlistmentInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##EnlistmentInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FileInformation', 'ULONG Length', 'FILE_INFORMATION_CLASS FileInformationClass']
#define locals_WINDOWS_7__X86_NtSetInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FileInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FileInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtSetInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FileInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FileInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetInformationJobObject ['HANDLE JobHandle', 'JOBOBJECTINFOCLASS JobObjectInformationClass', 'PVOID JobObjectInformation', 'ULONG JobObjectInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##JobObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##JobObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##JobObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##JobObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##JobObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##JobObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationKey ['HANDLE KeyHandle', 'KEY_SET_INFORMATION_CLASS KeySetInformationClass', 'PVOID KeySetInformation', 'ULONG KeySetInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeySetInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeySetInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##KeySetInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeySetInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeySetInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##KeySetInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationObject ['HANDLE Handle', 'OBJECT_INFORMATION_CLASS ObjectInformationClass', 'PVOID ObjectInformation', 'ULONG ObjectInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ObjectInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ObjectInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ObjectInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ObjectInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ObjectInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ObjectInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationProcess ['HANDLE ProcessHandle', 'PROCESSINFOCLASS ProcessInformationClass', 'PVOID ProcessInformation', 'ULONG ProcessInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ProcessInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ProcessInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ProcessInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ProcessInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ProcessInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ProcessInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationResourceManager ['HANDLE ResourceManagerHandle', 'RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass', 'PVOID ResourceManagerInformation', 'ULONG ResourceManagerInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationResourceManager(ctx, pref) \
	uint32_t UNUSED(pref##ResourceManagerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ResourceManagerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ResourceManagerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ResourceManagerInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationResourceManager(ctx, pref) \
	uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ResourceManagerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ResourceManagerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ResourceManagerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationResourceManager(ctx, pref) \
	const uint32_t &UNUSED(pref##ResourceManagerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ResourceManagerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationThread ['HANDLE ThreadHandle', 'THREADINFOCLASS ThreadInformationClass', 'PVOID ThreadInformation', 'ULONG ThreadInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ThreadInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ThreadInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ThreadInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ThreadInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ThreadInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ThreadInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationToken ['HANDLE TokenHandle', 'TOKEN_INFORMATION_CLASS TokenInformationClass', 'PVOID TokenInformation', 'ULONG TokenInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationToken(ctx, pref) \
	uint32_t UNUSED(pref##TokenHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TokenInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TokenInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TokenInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationToken(ctx, pref) \
	uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationToken(ctx, pref) \
	const uint32_t &UNUSED(pref##TokenHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TokenInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TokenInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TokenInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationTransaction ['HANDLE TransactionHandle', 'TRANSACTION_INFORMATION_CLASS TransactionInformationClass', 'PVOID TransactionInformation', 'ULONG TransactionInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationTransaction(ctx, pref) \
	uint32_t UNUSED(pref##TransactionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TransactionInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TransactionInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationTransaction(ctx, pref) \
	uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TransactionInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TransactionInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationTransaction(ctx, pref) \
	const uint32_t &UNUSED(pref##TransactionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TransactionInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TransactionInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationTransactionManager ['HANDLE TmHandle', 'TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass', 'PVOID TransactionManagerInformation', 'ULONG TransactionManagerInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationTransactionManager(ctx, pref) \
	uint32_t UNUSED(pref##TmHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TransactionManagerInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TransactionManagerInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TransactionManagerInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationTransactionManager(ctx, pref) \
	uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TransactionManagerInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TransactionManagerInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TransactionManagerInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationTransactionManager(ctx, pref) \
	const uint32_t &UNUSED(pref##TmHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TransactionManagerInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetInformationWorkerFactory ['HANDLE WorkerFactoryHandle', 'WORKERFACTORYINFOCLASS WorkerFactoryInformationClass', 'PVOID WorkerFactoryInformation', 'ULONG WorkerFactoryInformationLength']
#define locals_WINDOWS_7__X86_NtSetInformationWorkerFactory(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WorkerFactoryInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WorkerFactoryInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##WorkerFactoryInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetInformationWorkerFactory(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##WorkerFactoryInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetInformationWorkerFactory(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##WorkerFactoryInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetIntervalProfile ['ULONG Interval', 'KPROFILE_SOURCE Source']
#define locals_WINDOWS_7__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t UNUSED(pref##Interval) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Source) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetIntervalProfile(ctx, pref) \
	uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Source) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetIntervalProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##Interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Source) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetIoCompletion ['HANDLE IoCompletionHandle', 'PVOID KeyContext', 'PVOID ApcContext', 'NTSTATUS IoStatus', 'ULONG_PTR IoStatusInformation']
#define locals_WINDOWS_7__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusInformation) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetIoCompletion(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtSetIoCompletion(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetIoCompletionEx ['HANDLE IoCompletionHandle', 'HANDLE IoCompletionReserveHandle', 'PVOID KeyContext', 'PVOID ApcContext', 'NTSTATUS IoStatus', 'ULONG_PTR IoStatusInformation']
#define locals_WINDOWS_7__X86_NtSetIoCompletionEx(ctx, pref) \
	uint32_t UNUSED(pref##IoCompletionHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoCompletionReserveHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##KeyContext) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatus) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##IoStatusInformation) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetIoCompletionEx(ctx, pref) \
	uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoCompletionReserveHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtSetIoCompletionEx(ctx, pref) \
	const uint32_t &UNUSED(pref##IoCompletionHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoCompletionReserveHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##KeyContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##IoStatusInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetLdtEntries ['ULONG Selector0', 'ULONG Entry0Low', 'ULONG Entry0Hi', 'ULONG Selector1', 'ULONG Entry1Low', 'ULONG Entry1Hi']
#define locals_WINDOWS_7__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t UNUSED(pref##Selector0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Entry0Low) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Entry0Hi) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Selector1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Entry1Low) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Entry1Hi) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetLdtEntries(ctx, pref) \
	uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtSetLdtEntries(ctx, pref) \
	const uint32_t &UNUSED(pref##Selector0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Entry0Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Entry0Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Selector1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Entry1Low) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Entry1Hi) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetLowWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetLowWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetQuotaInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length']
#define locals_WINDOWS_7__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetQuotaInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetQuotaInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetSecurityObject ['HANDLE Handle', 'SECURITY_INFORMATION SecurityInformation', 'PSECURITY_DESCRIPTOR SecurityDescriptor']
#define locals_WINDOWS_7__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SecurityInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SecurityDescriptor) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSecurityObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSetSecurityObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SecurityInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SecurityDescriptor) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemEnvironmentValue ['PUNICODE_STRING VariableName', 'PUNICODE_STRING VariableValue']
#define locals_WINDOWS_7__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VariableValue) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetSystemEnvironmentValue(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VariableValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetSystemEnvironmentValueEx ['PUNICODE_STRING VariableName', 'LPGUID VendorGuid', 'PVOID Value', 'ULONG ValueLength', 'ULONG Attributes']
#define locals_WINDOWS_7__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t UNUSED(pref##VariableName) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##VendorGuid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ValueLength) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Attributes) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtSetSystemEnvironmentValueEx(ctx, pref) \
	const uint32_t &UNUSED(pref##VariableName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##VendorGuid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ValueLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Attributes) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtSetSystemInformation ['SYSTEM_INFORMATION_CLASS SystemInformationClass', 'PVOID SystemInformation', 'ULONG SystemInformationLength']
#define locals_WINDOWS_7__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t UNUSED(pref##SystemInformationClass) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SystemInformation) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##SystemInformationLength) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSystemInformation(ctx, pref) \
	uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSetSystemInformation(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SystemInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##SystemInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemPowerState ['POWER_ACTION SystemAction', 'SYSTEM_POWER_STATE MinSystemState', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t UNUSED(pref##SystemAction) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MinSystemState) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSystemPowerState(ctx, pref) \
	uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSetSystemPowerState(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemAction) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MinSystemState) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetSystemTime ['PLARGE_INTEGER SystemTime', 'PLARGE_INTEGER PreviousTime']
#define locals_WINDOWS_7__X86_NtSetSystemTime(ctx, pref) \
	uint32_t UNUSED(pref##SystemTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousTime) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetSystemTime(ctx, pref) \
	uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetSystemTime(ctx, pref) \
	const uint32_t &UNUSED(pref##SystemTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetThreadExecutionState ['EXECUTION_STATE esFlags', 'PEXECUTION_STATE PreviousFlags']
#define locals_WINDOWS_7__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t UNUSED(pref##esFlags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousFlags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetThreadExecutionState(ctx, pref) \
	uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSetThreadExecutionState(ctx, pref) \
	const uint32_t &UNUSED(pref##esFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousFlags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSetTimer ['HANDLE TimerHandle', 'PLARGE_INTEGER DueTime', 'PTIMER_APC_ROUTINE TimerApcRoutine', 'PVOID TimerContext', 'BOOLEAN WakeTimer', 'LONG Period', 'PBOOLEAN PreviousState']
#define locals_WINDOWS_7__X86_NtSetTimer(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##DueTime) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##WakeTimer) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##Period) = *(int32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##PreviousState) = *(uint32_t *)((ctx)->args[6]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetTimer(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##Period) = *reinterpret_cast<int32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<uint32_t *>((ctx)->args[6]);
#define creferences_WINDOWS_7__X86_NtSetTimer(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##DueTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##WakeTimer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##Period) = *reinterpret_cast<const int32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##PreviousState) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]);
#endif

// NTSTATUS NtSetTimerEx ['HANDLE TimerHandle', 'TIMER_SET_INFORMATION_CLASS TimerSetInformationClass', 'PVOID TimerSetInformation', 'ULONG TimerSetInformationLength']
#define locals_WINDOWS_7__X86_NtSetTimerEx(ctx, pref) \
	uint32_t UNUSED(pref##TimerHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TimerSetInformationClass) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TimerSetInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##TimerSetInformationLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetTimerEx(ctx, pref) \
	uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TimerSetInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TimerSetInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##TimerSetInformationLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSetTimerEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TimerHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TimerSetInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TimerSetInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##TimerSetInformationLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSetTimerResolution ['ULONG DesiredTime', 'BOOLEAN SetResolution', 'PULONG ActualTime']
#define locals_WINDOWS_7__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t UNUSED(pref##DesiredTime) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##SetResolution) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ActualTime) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetTimerResolution(ctx, pref) \
	uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtSetTimerResolution(ctx, pref) \
	const uint32_t &UNUSED(pref##DesiredTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##SetResolution) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ActualTime) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtSetUuidSeed ['PCHAR Seed']
#define locals_WINDOWS_7__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t UNUSED(pref##Seed) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetUuidSeed(ctx, pref) \
	uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSetUuidSeed(ctx, pref) \
	const uint32_t &UNUSED(pref##Seed) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSetValueKey ['HANDLE KeyHandle', 'PUNICODE_STRING ValueName', 'ULONG TitleIndex', 'ULONG Type', 'PVOID Data', 'ULONG DataSize']
#define locals_WINDOWS_7__X86_NtSetValueKey(ctx, pref) \
	uint32_t UNUSED(pref##KeyHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ValueName) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##TitleIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Type) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Data) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##DataSize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetValueKey(ctx, pref) \
	uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Type) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtSetValueKey(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ValueName) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##TitleIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Type) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##DataSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtSetVolumeInformationFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID FsInformation', 'ULONG Length', 'FS_INFORMATION_CLASS FsInformationClass']
#define locals_WINDOWS_7__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FsInformation) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##FsInformationClass) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSetVolumeInformationFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtSetVolumeInformationFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FsInformation) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##FsInformationClass) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtShutdownSystem ['SHUTDOWN_ACTION Action']
#define locals_WINDOWS_7__X86_NtShutdownSystem(ctx, pref) \
	uint32_t UNUSED(pref##Action) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtShutdownSystem(ctx, pref) \
	uint32_t &UNUSED(pref##Action) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtShutdownSystem(ctx, pref) \
	const uint32_t &UNUSED(pref##Action) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtShutdownWorkerFactory ['HANDLE WorkerFactoryHandle', 'LONG *PendingWorkerCount']
#define locals_WINDOWS_7__X86_NtShutdownWorkerFactory(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PendingWorkerCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtShutdownWorkerFactory(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PendingWorkerCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtShutdownWorkerFactory(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PendingWorkerCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSignalAndWaitForSingleObject ['HANDLE SignalHandle', 'HANDLE WaitHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##SignalHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##WaitHandle) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtSignalAndWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##SignalHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##WaitHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtSinglePhaseReject ['HANDLE EnlistmentHandle', 'PLARGE_INTEGER TmVirtualClock']
#define locals_WINDOWS_7__X86_NtSinglePhaseReject(ctx, pref) \
	uint32_t UNUSED(pref##EnlistmentHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##TmVirtualClock) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSinglePhaseReject(ctx, pref) \
	uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSinglePhaseReject(ctx, pref) \
	const uint32_t &UNUSED(pref##EnlistmentHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##TmVirtualClock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtStartProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_7__X86_NtStartProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtStartProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtStartProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtStopProfile ['HANDLE ProfileHandle']
#define locals_WINDOWS_7__X86_NtStopProfile(ctx, pref) \
	uint32_t UNUSED(pref##ProfileHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtStopProfile(ctx, pref) \
	uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtStopProfile(ctx, pref) \
	const uint32_t &UNUSED(pref##ProfileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendProcess ['HANDLE ProcessHandle']
#define locals_WINDOWS_7__X86_NtSuspendProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSuspendProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtSuspendProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtSuspendThread ['HANDLE ThreadHandle', 'PULONG PreviousSuspendCount']
#define locals_WINDOWS_7__X86_NtSuspendThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##PreviousSuspendCount) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSuspendThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtSuspendThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##PreviousSuspendCount) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtSystemDebugControl ['SYSDBG_COMMAND Command', 'PVOID InputBuffer', 'ULONG InputBufferLength', 'PVOID OutputBuffer', 'ULONG OutputBufferLength', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t UNUSED(pref##Command) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InputBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InputBufferLength) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutputBufferLength) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtSystemDebugControl(ctx, pref) \
	uint32_t &UNUSED(pref##Command) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtSystemDebugControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Command) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutputBufferLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtTerminateJobObject ['HANDLE JobHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_7__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t UNUSED(pref##JobHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTerminateJobObject(ctx, pref) \
	uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtTerminateJobObject(ctx, pref) \
	const uint32_t &UNUSED(pref##JobHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateProcess ['HANDLE ProcessHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_7__X86_NtTerminateProcess(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTerminateProcess(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtTerminateProcess(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTerminateThread ['HANDLE ThreadHandle', 'NTSTATUS ExitStatus']
#define locals_WINDOWS_7__X86_NtTerminateThread(ctx, pref) \
	uint32_t UNUSED(pref##ThreadHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ExitStatus) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTerminateThread(ctx, pref) \
	uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtTerminateThread(ctx, pref) \
	const uint32_t &UNUSED(pref##ThreadHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ExitStatus) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtTestAlert ['']
#undef locals_WINDOWS_7__X86_NtTestAlert
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtTestAlert
#endif

// NTSTATUS NtThawRegistry ['']
#undef locals_WINDOWS_7__X86_NtThawRegistry
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtThawRegistry
#endif

// NTSTATUS NtThawTransactions ['']
#undef locals_WINDOWS_7__X86_NtThawTransactions
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtThawTransactions
#endif

// NTSTATUS NtTraceControl ['ULONG FunctionCode', 'PVOID InBuffer', 'ULONG InBufferLen', 'PVOID OutBuffer', 'ULONG OutBufferLen', 'PULONG ReturnLength']
#define locals_WINDOWS_7__X86_NtTraceControl(ctx, pref) \
	uint32_t UNUSED(pref##FunctionCode) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##InBuffer) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##InBufferLen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutBuffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##OutBufferLen) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##ReturnLength) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTraceControl(ctx, pref) \
	uint32_t &UNUSED(pref##FunctionCode) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##InBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##InBufferLen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutBuffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##OutBufferLen) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtTraceControl(ctx, pref) \
	const uint32_t &UNUSED(pref##FunctionCode) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##InBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##InBufferLen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutBuffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##OutBufferLen) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##ReturnLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtTraceEvent ['HANDLE TraceHandle', 'ULONG Flags', 'ULONG FieldSize', 'PVOID Fields']
#define locals_WINDOWS_7__X86_NtTraceEvent(ctx, pref) \
	uint32_t UNUSED(pref##TraceHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##FieldSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Fields) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTraceEvent(ctx, pref) \
	uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtTraceEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##TraceHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##FieldSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Fields) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtTranslateFilePath ['PFILE_PATH InputFilePath', 'ULONG OutputType', 'PFILE_PATH OutputFilePath', 'PULONG OutputFilePathLength']
#define locals_WINDOWS_7__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t UNUSED(pref##InputFilePath) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##OutputType) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##OutputFilePath) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##OutputFilePathLength) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtTranslateFilePath(ctx, pref) \
	uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtTranslateFilePath(ctx, pref) \
	const uint32_t &UNUSED(pref##InputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##OutputType) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##OutputFilePath) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##OutputFilePathLength) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUmsThreadYield ['PVOID SchedulerParam']
#define locals_WINDOWS_7__X86_NtUmsThreadYield(ctx, pref) \
	uint32_t UNUSED(pref##SchedulerParam) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUmsThreadYield(ctx, pref) \
	uint32_t &UNUSED(pref##SchedulerParam) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtUmsThreadYield(ctx, pref) \
	const uint32_t &UNUSED(pref##SchedulerParam) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadDriver ['PUNICODE_STRING DriverServiceName']
#define locals_WINDOWS_7__X86_NtUnloadDriver(ctx, pref) \
	uint32_t UNUSED(pref##DriverServiceName) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnloadDriver(ctx, pref) \
	uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtUnloadDriver(ctx, pref) \
	const uint32_t &UNUSED(pref##DriverServiceName) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKey ['POBJECT_ATTRIBUTES TargetKey']
#define locals_WINDOWS_7__X86_NtUnloadKey(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnloadKey(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtUnloadKey(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtUnloadKey2 ['POBJECT_ATTRIBUTES TargetKey', 'ULONG Flags']
#define locals_WINDOWS_7__X86_NtUnloadKey2(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnloadKey2(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtUnloadKey2(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtUnloadKeyEx ['POBJECT_ATTRIBUTES TargetKey', 'HANDLE Event']
#define locals_WINDOWS_7__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t UNUSED(pref##TargetKey) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnloadKeyEx(ctx, pref) \
	uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtUnloadKeyEx(ctx, pref) \
	const uint32_t &UNUSED(pref##TargetKey) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtUnlockFile ['HANDLE FileHandle', 'PIO_STATUS_BLOCK IoStatusBlock', 'PLARGE_INTEGER ByteOffset', 'PLARGE_INTEGER Length', 'ULONG Key']
#define locals_WINDOWS_7__X86_NtUnlockFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnlockFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtUnlockFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtUnlockVirtualMemory ['HANDLE ProcessHandle', 'PVOID *BaseAddress', 'PSIZE_T RegionSize', 'ULONG MapType']
#define locals_WINDOWS_7__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##RegionSize) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##MapType) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnlockVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtUnlockVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##RegionSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##MapType) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtUnmapViewOfSection ['HANDLE ProcessHandle', 'PVOID BaseAddress']
#define locals_WINDOWS_7__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtUnmapViewOfSection(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtUnmapViewOfSection(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtVdmControl ['VDMSERVICECLASS Service', 'PVOID ServiceData']
#define locals_WINDOWS_7__X86_NtVdmControl(ctx, pref) \
	uint32_t UNUSED(pref##Service) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ServiceData) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtVdmControl(ctx, pref) \
	uint32_t &UNUSED(pref##Service) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtVdmControl(ctx, pref) \
	const uint32_t &UNUSED(pref##Service) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ServiceData) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtWaitForDebugEvent ['HANDLE DebugObjectHandle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout', 'PDBGUI_WAIT_STATE_CHANGE WaitStateChange']
#define locals_WINDOWS_7__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t UNUSED(pref##DebugObjectHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##WaitStateChange) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForDebugEvent(ctx, pref) \
	uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtWaitForDebugEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##DebugObjectHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##WaitStateChange) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForKeyedEvent ['HANDLE KeyedEventHandle', 'PVOID KeyValue', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t UNUSED(pref##KeyedEventHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##KeyValue) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForKeyedEvent(ctx, pref) \
	uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_WINDOWS_7__X86_NtWaitForKeyedEvent(ctx, pref) \
	const uint32_t &UNUSED(pref##KeyedEventHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##KeyValue) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// NTSTATUS NtWaitForMultipleObjects ['ULONG Count', 'HANDLE Handles[]', 'WAIT_TYPE WaitType', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Handles) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WaitType) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForMultipleObjects(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtWaitForMultipleObjects(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtWaitForMultipleObjects32 ['ULONG Count', 'LONG Handles[]', 'WAIT_TYPE WaitType', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtWaitForMultipleObjects32(ctx, pref) \
	uint32_t UNUSED(pref##Count) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Handles) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##WaitType) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForMultipleObjects32(ctx, pref) \
	uint32_t &UNUSED(pref##Count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtWaitForMultipleObjects32(ctx, pref) \
	const uint32_t &UNUSED(pref##Count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Handles) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##WaitType) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtWaitForSingleObject ['HANDLE Handle', 'BOOLEAN Alertable', 'PLARGE_INTEGER Timeout']
#define locals_WINDOWS_7__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t UNUSED(pref##Handle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Alertable) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Timeout) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForSingleObject(ctx, pref) \
	uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_WINDOWS_7__X86_NtWaitForSingleObject(ctx, pref) \
	const uint32_t &UNUSED(pref##Handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Alertable) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// NTSTATUS NtWaitForWorkViaWorkerFactory ['HANDLE WorkerFactoryHandle', 'PFILE_IO_COMPLETION_INFORMATION MiniPacket']
#define locals_WINDOWS_7__X86_NtWaitForWorkViaWorkerFactory(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##MiniPacket) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitForWorkViaWorkerFactory(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##MiniPacket) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_WINDOWS_7__X86_NtWaitForWorkViaWorkerFactory(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##MiniPacket) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// NTSTATUS NtWaitHighEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitHighEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtWaitHighEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWaitLowEventPair ['HANDLE EventPairHandle']
#define locals_WINDOWS_7__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t UNUSED(pref##EventPairHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWaitLowEventPair(ctx, pref) \
	uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtWaitLowEventPair(ctx, pref) \
	const uint32_t &UNUSED(pref##EventPairHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWorkerFactoryWorkerReady ['HANDLE WorkerFactoryHandle']
#define locals_WINDOWS_7__X86_NtWorkerFactoryWorkerReady(ctx, pref) \
	uint32_t UNUSED(pref##WorkerFactoryHandle) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWorkerFactoryWorkerReady(ctx, pref) \
	uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_WINDOWS_7__X86_NtWorkerFactoryWorkerReady(ctx, pref) \
	const uint32_t &UNUSED(pref##WorkerFactoryHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// NTSTATUS NtWriteFile ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PVOID Buffer', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_7__X86_NtWriteFile(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWriteFile(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtWriteFile(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteFileGather ['HANDLE FileHandle', 'HANDLE Event', 'PIO_APC_ROUTINE ApcRoutine', 'PVOID ApcContext', 'PIO_STATUS_BLOCK IoStatusBlock', 'PFILE_SEGMENT_ELEMENT SegmentArray', 'ULONG Length', 'PLARGE_INTEGER ByteOffset', 'PULONG Key']
#define locals_WINDOWS_7__X86_NtWriteFileGather(ctx, pref) \
	uint32_t UNUSED(pref##FileHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Event) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ApcRoutine) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ApcContext) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##IoStatusBlock) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##SegmentArray) = *(uint32_t *)((ctx)->args[5]); \
	uint32_t UNUSED(pref##Length) = *(uint32_t *)((ctx)->args[6]); \
	uint32_t UNUSED(pref##ByteOffset) = *(uint32_t *)((ctx)->args[7]); \
	uint32_t UNUSED(pref##Key) = *(uint32_t *)((ctx)->args[8]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWriteFileGather(ctx, pref) \
	uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Event) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<uint32_t *>((ctx)->args[5]); \
	uint32_t &UNUSED(pref##Length) = *reinterpret_cast<uint32_t *>((ctx)->args[6]); \
	uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<uint32_t *>((ctx)->args[7]); \
	uint32_t &UNUSED(pref##Key) = *reinterpret_cast<uint32_t *>((ctx)->args[8]);
#define creferences_WINDOWS_7__X86_NtWriteFileGather(ctx, pref) \
	const uint32_t &UNUSED(pref##FileHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Event) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ApcRoutine) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ApcContext) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##IoStatusBlock) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##SegmentArray) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]); \
	const uint32_t &UNUSED(pref##Length) = *reinterpret_cast<const uint32_t *>((ctx)->args[6]); \
	const uint32_t &UNUSED(pref##ByteOffset) = *reinterpret_cast<const uint32_t *>((ctx)->args[7]); \
	const uint32_t &UNUSED(pref##Key) = *reinterpret_cast<const uint32_t *>((ctx)->args[8]);
#endif

// NTSTATUS NtWriteRequestData ['HANDLE PortHandle', 'PPORT_MESSAGE Message', 'ULONG DataEntryIndex', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_7__X86_NtWriteRequestData(ctx, pref) \
	uint32_t UNUSED(pref##PortHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##Message) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##DataEntryIndex) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWriteRequestData(ctx, pref) \
	uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##Message) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_WINDOWS_7__X86_NtWriteRequestData(ctx, pref) \
	const uint32_t &UNUSED(pref##PortHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##Message) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##DataEntryIndex) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// NTSTATUS NtWriteVirtualMemory ['HANDLE ProcessHandle', 'PVOID BaseAddress', 'PVOID Buffer', 'SIZE_T BufferSize', 'PSIZE_T NumberOfBytesWritten']
#define locals_WINDOWS_7__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t UNUSED(pref##ProcessHandle) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##BaseAddress) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##Buffer) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##BufferSize) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##NumberOfBytesWritten) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_WINDOWS_7__X86_NtWriteVirtualMemory(ctx, pref) \
	uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_WINDOWS_7__X86_NtWriteVirtualMemory(ctx, pref) \
	const uint32_t &UNUSED(pref##ProcessHandle) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##BaseAddress) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##Buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##BufferSize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##NumberOfBytesWritten) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// NTSTATUS NtYieldExecution ['']
#undef locals_WINDOWS_7__X86_NtYieldExecution
#if defined(__cplusplus)
#undef references_WINDOWS_7__X86_NtYieldExecution
#endif


/* ### linux:x86 ######################################################## */
// long sys_restart_syscall ['void']
#undef locals_LINUX__X86_sys_restart_syscall
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_restart_syscall
#endif

// long sys_exit ['int error_code']
#define locals_LINUX__X86_sys_exit(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_exit(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_exit(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fork ['void']
#undef locals_LINUX__X86_sys_fork
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_fork
#endif

// long sys_read ['unsigned int fd', 'char __user *buf', 'size_t count']
#define locals_LINUX__X86_sys_read(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_read(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_read(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_write ['unsigned int fd', 'const char __user *buf', 'size_t count']
#define locals_LINUX__X86_sys_write(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_write(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_write(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_open ['const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__X86_sys_open(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_open(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_open(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_close ['unsigned int fd']
#define locals_LINUX__X86_sys_close(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_close(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_close(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_waitpid ['pid_t pid', 'int __user *stat_addr', 'int options']
#define locals_LINUX__X86_sys_waitpid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##stat_addr) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_waitpid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_waitpid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_creat ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X86_sys_creat(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_creat(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_creat(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_link ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__X86_sys_link(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_link(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_link(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_unlink ['const char __user *pathname']
#define locals_LINUX__X86_sys_unlink(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_unlink(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_unlink(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_execve ['const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp']
#define locals_LINUX__X86_sys_execve(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##argv) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##envp) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_execve(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##argv) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##envp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_execve(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##argv) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##envp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chdir ['const char __user *filename']
#define locals_LINUX__X86_sys_chdir(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_chdir(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_chdir(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_time ['time_t __user *tloc']
#define locals_LINUX__X86_sys_time(ctx, pref) \
	uint32_t UNUSED(pref##tloc) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_time(ctx, pref) \
	uint32_t &UNUSED(pref##tloc) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_time(ctx, pref) \
	const uint32_t &UNUSED(pref##tloc) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mknod ['const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__X86_sys_mknod(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mknod(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mknod(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chmod ['const char __user *filename', 'umode_t mode']
#define locals_LINUX__X86_sys_chmod(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_chmod(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_chmod(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lchown16 ['const char __user *filename', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__X86_sys_lchown16(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lchown16(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_lchown16(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_stat ['const char __user *filename', 'struct __old_kernel_stat __user *statbuf']
#define locals_LINUX__X86_sys_stat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_stat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_stat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lseek ['unsigned int fd', 'off_t offset', 'unsigned int whence']
#define locals_LINUX__X86_sys_lseek(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##whence) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lseek(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##whence) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_lseek(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##whence) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpid ['void']
#undef locals_LINUX__X86_sys_getpid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getpid
#endif

// long sys_mount ['char __user *dev_name', 'char __user *dir_name', 'char __user *type', 'unsigned long flags', 'void __user *data']
#define locals_LINUX__X86_sys_mount(ctx, pref) \
	uint32_t UNUSED(pref##dev_name) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dir_name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##type) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mount(ctx, pref) \
	uint32_t &UNUSED(pref##dev_name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dir_name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##type) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_mount(ctx, pref) \
	const uint32_t &UNUSED(pref##dev_name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dir_name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##type) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_oldumount ['char __user *name']
#define locals_LINUX__X86_sys_oldumount(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_oldumount(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_oldumount(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setuid16 ['old_uid_t uid']
#define locals_LINUX__X86_sys_setuid16(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setuid16(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getuid16 ['void']
#undef locals_LINUX__X86_sys_getuid16
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getuid16
#endif

// long sys_stime ['time_t __user *tptr']
#define locals_LINUX__X86_sys_stime(ctx, pref) \
	uint32_t UNUSED(pref##tptr) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_stime(ctx, pref) \
	uint32_t &UNUSED(pref##tptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_stime(ctx, pref) \
	const uint32_t &UNUSED(pref##tptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ptrace ['long request', 'long pid', 'unsigned long addr', 'unsigned long data']
#define locals_LINUX__X86_sys_ptrace(ctx, pref) \
	int32_t UNUSED(pref##request) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ptrace(ctx, pref) \
	int32_t &UNUSED(pref##request) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_ptrace(ctx, pref) \
	const int32_t &UNUSED(pref##request) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_alarm ['unsigned int seconds']
#define locals_LINUX__X86_sys_alarm(ctx, pref) \
	uint32_t UNUSED(pref##seconds) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_alarm(ctx, pref) \
	uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_alarm(ctx, pref) \
	const uint32_t &UNUSED(pref##seconds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_fstat ['unsigned int fd', 'struct __old_kernel_stat __user *statbuf']
#define locals_LINUX__X86_sys_fstat(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fstat(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fstat(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_pause ['void']
#undef locals_LINUX__X86_sys_pause
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_pause
#endif

// long sys_utime ['char __user *filename', 'struct utimbuf __user *times']
#define locals_LINUX__X86_sys_utime(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##times) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_utime(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##times) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_utime(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##times) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_access ['const char __user *filename', 'int mode']
#define locals_LINUX__X86_sys_access(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_access(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_access(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_nice ['int increment']
#define locals_LINUX__X86_sys_nice(ctx, pref) \
	int32_t UNUSED(pref##increment) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_nice(ctx, pref) \
	int32_t &UNUSED(pref##increment) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_nice(ctx, pref) \
	const int32_t &UNUSED(pref##increment) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sync ['void']
#undef locals_LINUX__X86_sys_sync
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_sync
#endif

// long sys_kill ['pid_t pid', 'int sig']
#define locals_LINUX__X86_sys_kill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_kill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_kill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_rename ['const char __user *oldname', 'const char __user *newname']
#define locals_LINUX__X86_sys_rename(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rename(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_rename(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mkdir ['const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X86_sys_mkdir(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mkdir(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_mkdir(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rmdir ['const char __user *pathname']
#define locals_LINUX__X86_sys_rmdir(ctx, pref) \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rmdir(ctx, pref) \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_rmdir(ctx, pref) \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_dup ['unsigned int fildes']
#define locals_LINUX__X86_sys_dup(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_dup(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_dup(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_pipe ['int __user *fildes']
#define locals_LINUX__X86_sys_pipe(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pipe(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_pipe(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_times ['struct tms __user *tbuf']
#define locals_LINUX__X86_sys_times(ctx, pref) \
	uint32_t UNUSED(pref##tbuf) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_times(ctx, pref) \
	uint32_t &UNUSED(pref##tbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_times(ctx, pref) \
	const uint32_t &UNUSED(pref##tbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_brk ['unsigned long brk']
#define locals_LINUX__X86_sys_brk(ctx, pref) \
	uint32_t UNUSED(pref##brk) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_brk(ctx, pref) \
	uint32_t &UNUSED(pref##brk) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_brk(ctx, pref) \
	const uint32_t &UNUSED(pref##brk) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setgid16 ['old_gid_t gid']
#define locals_LINUX__X86_sys_setgid16(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setgid16(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_getgid16 ['void']
#undef locals_LINUX__X86_sys_getgid16
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getgid16
#endif

// long sys_signal ['int sig', '__sighandler_t handler']
#define locals_LINUX__X86_sys_signal(ctx, pref) \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##handler) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_signal(ctx, pref) \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##handler) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_signal(ctx, pref) \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##handler) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_geteuid16 ['void']
#undef locals_LINUX__X86_sys_geteuid16
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_geteuid16
#endif

// long sys_getegid16 ['void']
#undef locals_LINUX__X86_sys_getegid16
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getegid16
#endif

// long sys_acct ['const char __user *name']
#define locals_LINUX__X86_sys_acct(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_acct(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_acct(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_umount ['char __user *name', 'int flags']
#define locals_LINUX__X86_sys_umount(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_umount(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_umount(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_ioctl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__X86_sys_ioctl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ioctl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_ioctl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fcntl ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__X86_sys_fcntl(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fcntl(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fcntl(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setpgid ['pid_t pid', 'pid_t pgid']
#define locals_LINUX__X86_sys_setpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pgid) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pgid) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pgid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_olduname ['struct oldold_utsname __user *']
#define locals_LINUX__X86_sys_olduname(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_olduname(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_olduname(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_umask ['int mask']
#define locals_LINUX__X86_sys_umask(ctx, pref) \
	int32_t UNUSED(pref##mask) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_umask(ctx, pref) \
	int32_t &UNUSED(pref##mask) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_umask(ctx, pref) \
	const int32_t &UNUSED(pref##mask) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_chroot ['const char __user *filename']
#define locals_LINUX__X86_sys_chroot(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_chroot(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_chroot(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ustat ['unsigned dev', 'struct ustat __user *ubuf']
#define locals_LINUX__X86_sys_ustat(ctx, pref) \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ubuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ustat(ctx, pref) \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ubuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_ustat(ctx, pref) \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ubuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_dup2 ['unsigned int oldfd', 'unsigned int newfd']
#define locals_LINUX__X86_sys_dup2(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_dup2(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_dup2(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getppid ['void']
#undef locals_LINUX__X86_sys_getppid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getppid
#endif

// long sys_getpgrp ['void']
#undef locals_LINUX__X86_sys_getpgrp
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getpgrp
#endif

// long sys_setsid ['void']
#undef locals_LINUX__X86_sys_setsid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_setsid
#endif

// long sys_sigaction ['int', 'const struct old_sigaction __user *', 'struct old_sigaction __user *']
#define locals_LINUX__X86_sys_sigaction(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sigaction(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sigaction(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sgetmask ['void']
#undef locals_LINUX__X86_sys_sgetmask
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_sgetmask
#endif

// long sys_ssetmask ['int newmask']
#define locals_LINUX__X86_sys_ssetmask(ctx, pref) \
	int32_t UNUSED(pref##newmask) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ssetmask(ctx, pref) \
	int32_t &UNUSED(pref##newmask) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_ssetmask(ctx, pref) \
	const int32_t &UNUSED(pref##newmask) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_setreuid16 ['old_uid_t ruid', 'old_uid_t euid']
#define locals_LINUX__X86_sys_setreuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setreuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setreuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setregid16 ['old_gid_t rgid', 'old_gid_t egid']
#define locals_LINUX__X86_sys_setregid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setregid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setregid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sigsuspend ['int unused1', 'int unused2', 'old_sigset_t mask']
#define locals_LINUX__X86_sys_sigsuspend(ctx, pref) \
	int32_t UNUSED(pref##unused1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##unused2) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sigsuspend(ctx, pref) \
	int32_t &UNUSED(pref##unused1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##unused2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sigsuspend(ctx, pref) \
	const int32_t &UNUSED(pref##unused1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##unused2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sigpending ['old_sigset_t __user *set']
#define locals_LINUX__X86_sys_sigpending(ctx, pref) \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sigpending(ctx, pref) \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sigpending(ctx, pref) \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sethostname ['char __user *name', 'int len']
#define locals_LINUX__X86_sys_sethostname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sethostname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_sethostname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__X86_sys_setrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rlim) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_old_getrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__X86_sys_old_getrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rlim) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_old_getrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_old_getrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getrusage ['int who', 'struct rusage __user *ru']
#define locals_LINUX__X86_sys_getrusage(ctx, pref) \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getrusage(ctx, pref) \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getrusage(ctx, pref) \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_gettimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__X86_sys_gettimeofday(ctx, pref) \
	uint32_t UNUSED(pref##tv) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tz) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_gettimeofday(ctx, pref) \
	uint32_t &UNUSED(pref##tv) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_gettimeofday(ctx, pref) \
	const uint32_t &UNUSED(pref##tv) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_settimeofday ['struct timeval __user *tv', 'struct timezone __user *tz']
#define locals_LINUX__X86_sys_settimeofday(ctx, pref) \
	uint32_t UNUSED(pref##tv) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tz) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_settimeofday(ctx, pref) \
	uint32_t &UNUSED(pref##tv) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_settimeofday(ctx, pref) \
	const uint32_t &UNUSED(pref##tv) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getgroups16 ['int gidsetsize', 'old_gid_t __user *grouplist']
#define locals_LINUX__X86_sys_getgroups16(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getgroups16(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getgroups16(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setgroups16 ['int gidsetsize', 'old_gid_t __user *grouplist']
#define locals_LINUX__X86_sys_setgroups16(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setgroups16(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setgroups16(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_old_select ['struct sel_arg_struct __user *arg']
#define locals_LINUX__X86_sys_old_select(ctx, pref) \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_old_select(ctx, pref) \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_old_select(ctx, pref) \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_symlink ['const char __user *old', 'const char __user *new']
#define locals_LINUX__X86_sys_symlink(ctx, pref) \
	uint32_t UNUSED(pref##old) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_new) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_symlink(ctx, pref) \
	uint32_t &UNUSED(pref##old) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_new) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_symlink(ctx, pref) \
	const uint32_t &UNUSED(pref##old) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_new) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lstat ['const char __user *filename', 'struct __old_kernel_stat __user *statbuf']
#define locals_LINUX__X86_sys_lstat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lstat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_lstat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_readlink ['const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__X86_sys_readlink(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_readlink(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_readlink(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_uselib ['const char __user *library']
#define locals_LINUX__X86_sys_uselib(ctx, pref) \
	uint32_t UNUSED(pref##library) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_uselib(ctx, pref) \
	uint32_t &UNUSED(pref##library) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_uselib(ctx, pref) \
	const uint32_t &UNUSED(pref##library) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_swapon ['const char __user *specialfile', 'int swap_flags']
#define locals_LINUX__X86_sys_swapon(ctx, pref) \
	uint32_t UNUSED(pref##specialfile) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##swap_flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_swapon(ctx, pref) \
	uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_swapon(ctx, pref) \
	const uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##swap_flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_reboot ['int magic1', 'int magic2', 'unsigned int cmd', 'void __user *arg']
#define locals_LINUX__X86_sys_reboot(ctx, pref) \
	int32_t UNUSED(pref##magic1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##magic2) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_reboot(ctx, pref) \
	int32_t &UNUSED(pref##magic1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##magic2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_reboot(ctx, pref) \
	const int32_t &UNUSED(pref##magic1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##magic2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_old_readdir ['unsigned int', 'struct old_linux_dirent __user *', 'unsigned int']
#define locals_LINUX__X86_sys_old_readdir(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_old_readdir(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_old_readdir(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_old_mmap ['struct mmap_arg_struct __user *arg']
#define locals_LINUX__X86_sys_old_mmap(ctx, pref) \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_old_mmap(ctx, pref) \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_old_mmap(ctx, pref) \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_munmap ['unsigned long addr', 'size_t len']
#define locals_LINUX__X86_sys_munmap(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_munmap(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_munmap(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_truncate ['const char __user *path', 'long length']
#define locals_LINUX__X86_sys_truncate(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##length) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_truncate(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##length) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_truncate(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##length) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_ftruncate ['unsigned int fd', 'unsigned long length']
#define locals_LINUX__X86_sys_ftruncate(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##length) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ftruncate(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##length) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_ftruncate(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##length) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchmod ['unsigned int fd', 'umode_t mode']
#define locals_LINUX__X86_sys_fchmod(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchmod(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fchmod(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchown16 ['unsigned int fd', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__X86_sys_fchown16(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchown16(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fchown16(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpriority ['int which', 'int who']
#define locals_LINUX__X86_sys_getpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_setpriority ['int which', 'int who', 'int niceval']
#define locals_LINUX__X86_sys_setpriority(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##niceval) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setpriority(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##niceval) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setpriority(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##niceval) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_statfs ['const char __user *path', 'struct statfs __user *buf']
#define locals_LINUX__X86_sys_statfs(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_statfs(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_statfs(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fstatfs ['unsigned int fd', 'struct statfs __user *buf']
#define locals_LINUX__X86_sys_fstatfs(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fstatfs(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fstatfs(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_ioperm ['unsigned long', 'unsigned long', 'int']
#define locals_LINUX__X86_sys_ioperm(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ioperm(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_ioperm(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_socketcall ['int call', 'unsigned long __user *args']
#define locals_LINUX__X86_sys_socketcall(ctx, pref) \
	int32_t UNUSED(pref##call) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##args) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_socketcall(ctx, pref) \
	int32_t &UNUSED(pref##call) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##args) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_socketcall(ctx, pref) \
	const int32_t &UNUSED(pref##call) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##args) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_syslog ['int type', 'char __user *buf', 'int len']
#define locals_LINUX__X86_sys_syslog(ctx, pref) \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_syslog(ctx, pref) \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_syslog(ctx, pref) \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_setitimer ['int which', 'struct itimerval __user *value', 'struct itimerval __user *ovalue']
#define locals_LINUX__X86_sys_setitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##ovalue) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##ovalue) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##ovalue) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getitimer ['int which', 'struct itimerval __user *value']
#define locals_LINUX__X86_sys_getitimer(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getitimer(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getitimer(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__X86_sys_newstat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_newstat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_newstat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newlstat ['const char __user *filename', 'struct stat __user *statbuf']
#define locals_LINUX__X86_sys_newlstat(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_newlstat(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_newlstat(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_newfstat ['unsigned int fd', 'struct stat __user *statbuf']
#define locals_LINUX__X86_sys_newfstat(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_newfstat(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_newfstat(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_uname ['struct old_utsname __user *']
#define locals_LINUX__X86_sys_uname(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_uname(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_uname(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_iopl ['unsigned int']
#define locals_LINUX__X86_sys_iopl(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_iopl(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_iopl(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_vhangup ['void']
#undef locals_LINUX__X86_sys_vhangup
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_vhangup
#endif

// long sys_vm86old ['struct vm86_struct __user *']
#define locals_LINUX__X86_sys_vm86old(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_vm86old(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_vm86old(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_wait4 ['pid_t pid', 'int __user *stat_addr', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__X86_sys_wait4(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##stat_addr) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_wait4(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_wait4(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##stat_addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_swapoff ['const char __user *specialfile']
#define locals_LINUX__X86_sys_swapoff(ctx, pref) \
	uint32_t UNUSED(pref##specialfile) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_swapoff(ctx, pref) \
	uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_swapoff(ctx, pref) \
	const uint32_t &UNUSED(pref##specialfile) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sysinfo ['struct sysinfo __user *info']
#define locals_LINUX__X86_sys_sysinfo(ctx, pref) \
	uint32_t UNUSED(pref##info) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sysinfo(ctx, pref) \
	uint32_t &UNUSED(pref##info) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sysinfo(ctx, pref) \
	const uint32_t &UNUSED(pref##info) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_ipc ['unsigned int call', 'int first', 'unsigned long second', 'unsigned long third', 'void __user *ptr', 'long fifth']
#define locals_LINUX__X86_sys_ipc(ctx, pref) \
	uint32_t UNUSED(pref##call) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##first) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##second) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##third) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ptr) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##fifth) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ipc(ctx, pref) \
	uint32_t &UNUSED(pref##call) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##first) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##second) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##third) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##fifth) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_ipc(ctx, pref) \
	const uint32_t &UNUSED(pref##call) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##first) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##second) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##third) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##fifth) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_fsync ['unsigned int fd']
#define locals_LINUX__X86_sys_fsync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fsync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_fsync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sigreturn ['void']
#undef locals_LINUX__X86_sys_sigreturn
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_sigreturn
#endif

// long sys_clone ['unsigned long', 'unsigned long', 'int __user *', 'int __user *', 'unsigned long']
#define locals_LINUX__X86_sys_clone(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clone(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_clone(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setdomainname ['char __user *name', 'int len']
#define locals_LINUX__X86_sys_setdomainname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##len) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setdomainname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##len) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setdomainname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##len) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_newuname ['struct new_utsname __user *name']
#define locals_LINUX__X86_sys_newuname(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_newuname(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_newuname(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_modify_ldt ['int', 'void __user *', 'unsigned long']
#define locals_LINUX__X86_sys_modify_ldt(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_modify_ldt(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_modify_ldt(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_adjtimex ['struct timex __user *txc_p']
#define locals_LINUX__X86_sys_adjtimex(ctx, pref) \
	uint32_t UNUSED(pref##txc_p) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_adjtimex(ctx, pref) \
	uint32_t &UNUSED(pref##txc_p) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_adjtimex(ctx, pref) \
	const uint32_t &UNUSED(pref##txc_p) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mprotect ['unsigned long start', 'size_t len', 'unsigned long prot']
#define locals_LINUX__X86_sys_mprotect(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mprotect(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mprotect(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sigprocmask ['int how', 'old_sigset_t __user *set', 'old_sigset_t __user *oset']
#define locals_LINUX__X86_sys_sigprocmask(ctx, pref) \
	int32_t UNUSED(pref##how) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##oset) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sigprocmask(ctx, pref) \
	int32_t &UNUSED(pref##how) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##oset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sigprocmask(ctx, pref) \
	const int32_t &UNUSED(pref##how) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##oset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_init_module ['void __user *umod', 'unsigned long len', 'const char __user *uargs']
#define locals_LINUX__X86_sys_init_module(ctx, pref) \
	uint32_t UNUSED(pref##umod) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_init_module(ctx, pref) \
	uint32_t &UNUSED(pref##umod) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_init_module(ctx, pref) \
	const uint32_t &UNUSED(pref##umod) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_delete_module ['const char __user *name_user', 'unsigned int flags']
#define locals_LINUX__X86_sys_delete_module(ctx, pref) \
	uint32_t UNUSED(pref##name_user) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_delete_module(ctx, pref) \
	uint32_t &UNUSED(pref##name_user) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_delete_module(ctx, pref) \
	const uint32_t &UNUSED(pref##name_user) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_quotactl ['unsigned int cmd', 'const char __user *special', 'qid_t id', 'void __user *addr']
#define locals_LINUX__X86_sys_quotactl(ctx, pref) \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##special) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##id) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_quotactl(ctx, pref) \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##special) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##id) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_quotactl(ctx, pref) \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##special) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##id) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_getpgid ['pid_t pid']
#define locals_LINUX__X86_sys_getpgid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getpgid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_getpgid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fchdir ['unsigned int fd']
#define locals_LINUX__X86_sys_fchdir(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchdir(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_fchdir(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_bdflush ['int func', 'long data']
#define locals_LINUX__X86_sys_bdflush(ctx, pref) \
	int32_t UNUSED(pref##func) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##_data) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_bdflush(ctx, pref) \
	int32_t &UNUSED(pref##func) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##_data) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_bdflush(ctx, pref) \
	const int32_t &UNUSED(pref##func) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##_data) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_sysfs ['int option', 'unsigned long arg1', 'unsigned long arg2']
#define locals_LINUX__X86_sys_sysfs(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sysfs(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sysfs(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_personality ['unsigned int personality']
#define locals_LINUX__X86_sys_personality(ctx, pref) \
	uint32_t UNUSED(pref##personality) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_personality(ctx, pref) \
	uint32_t &UNUSED(pref##personality) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_personality(ctx, pref) \
	const uint32_t &UNUSED(pref##personality) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsuid16 ['old_uid_t uid']
#define locals_LINUX__X86_sys_setfsuid16(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setfsuid16(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setfsuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsgid16 ['old_gid_t gid']
#define locals_LINUX__X86_sys_setfsgid16(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setfsgid16(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setfsgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_llseek ['unsigned int fd', 'unsigned long offset_high', 'unsigned long offset_low', 'loff_t __user *result', 'unsigned int whence']
#define locals_LINUX__X86_sys_llseek(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##offset_high) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset_low) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##result) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##whence) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_llseek(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##offset_high) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset_low) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##result) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##whence) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_llseek(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##offset_high) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset_low) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##result) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##whence) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_getdents ['unsigned int fd', 'struct linux_dirent __user *dirent', 'unsigned int count']
#define locals_LINUX__X86_sys_getdents(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dirent) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getdents(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getdents(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_select ['int n', 'fd_set __user *inp', 'fd_set __user *outp', 'fd_set __user *exp', 'struct timeval __user *tvp']
#define locals_LINUX__X86_sys_select(ctx, pref) \
	int32_t UNUSED(pref##n) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##inp) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##outp) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##exp) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##tvp) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_select(ctx, pref) \
	int32_t &UNUSED(pref##n) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##inp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##outp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##exp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##tvp) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_select(ctx, pref) \
	const int32_t &UNUSED(pref##n) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##inp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##outp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##exp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##tvp) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_flock ['unsigned int fd', 'unsigned int cmd']
#define locals_LINUX__X86_sys_flock(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_flock(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_flock(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_msync ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__X86_sys_msync(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_msync(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_msync(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_readv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__X86_sys_readv(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_readv(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_readv(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_writev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']
#define locals_LINUX__X86_sys_writev(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_writev(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_writev(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getsid ['pid_t pid']
#define locals_LINUX__X86_sys_getsid(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getsid(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_getsid(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_fdatasync ['unsigned int fd']
#define locals_LINUX__X86_sys_fdatasync(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fdatasync(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_fdatasync(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_sysctl ['struct __sysctl_args __user *args']
#define locals_LINUX__X86_sys_sysctl(ctx, pref) \
	uint32_t UNUSED(pref##args) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sysctl(ctx, pref) \
	uint32_t &UNUSED(pref##args) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sysctl(ctx, pref) \
	const uint32_t &UNUSED(pref##args) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mlock ['unsigned long start', 'size_t len']
#define locals_LINUX__X86_sys_mlock(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mlock(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_mlock(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_munlock ['unsigned long start', 'size_t len']
#define locals_LINUX__X86_sys_munlock(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_munlock(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_munlock(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mlockall ['int flags']
#define locals_LINUX__X86_sys_mlockall(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mlockall(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_mlockall(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_munlockall ['void']
#undef locals_LINUX__X86_sys_munlockall
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_munlockall
#endif

// long sys_sched_setparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__X86_sys_sched_setparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_setparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_sched_setparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sched_getparam ['pid_t pid', 'struct sched_param __user *param']
#define locals_LINUX__X86_sys_sched_getparam(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_getparam(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_sched_getparam(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sched_setscheduler ['pid_t pid', 'int policy', 'struct sched_param __user *param']
#define locals_LINUX__X86_sys_sched_setscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##param) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_setscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##param) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sched_setscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##param) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getscheduler ['pid_t pid']
#define locals_LINUX__X86_sys_sched_getscheduler(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_getscheduler(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sched_getscheduler(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_yield ['void']
#undef locals_LINUX__X86_sys_sched_yield
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_sched_yield
#endif

// long sys_sched_get_priority_max ['int policy']
#define locals_LINUX__X86_sys_sched_get_priority_max(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_get_priority_max(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sched_get_priority_max(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_get_priority_min ['int policy']
#define locals_LINUX__X86_sys_sched_get_priority_min(ctx, pref) \
	int32_t UNUSED(pref##policy) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_get_priority_min(ctx, pref) \
	int32_t &UNUSED(pref##policy) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_sched_get_priority_min(ctx, pref) \
	const int32_t &UNUSED(pref##policy) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sched_rr_get_interval ['pid_t pid', 'struct timespec __user *interval']
#define locals_LINUX__X86_sys_sched_rr_get_interval(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##interval) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_rr_get_interval(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##interval) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_sched_rr_get_interval(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##interval) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_nanosleep ['struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__X86_sys_nanosleep(ctx, pref) \
	uint32_t UNUSED(pref##rqtp) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rmtp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_nanosleep(ctx, pref) \
	uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_nanosleep(ctx, pref) \
	const uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mremap ['unsigned long addr', 'unsigned long old_len', 'unsigned long new_len', 'unsigned long flags', 'unsigned long new_addr']
#define locals_LINUX__X86_sys_mremap(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##old_len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##new_addr) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mremap(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##old_len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##new_addr) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_mremap(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##old_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##new_addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setresuid16 ['old_uid_t ruid', 'old_uid_t euid', 'old_uid_t suid']
#define locals_LINUX__X86_sys_setresuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setresuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setresuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresuid16 ['old_uid_t __user *ruid', 'old_uid_t __user *euid', 'old_uid_t __user *suid']
#define locals_LINUX__X86_sys_getresuid16(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getresuid16(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getresuid16(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_vm86 ['unsigned long', 'unsigned long']
#define locals_LINUX__X86_sys_vm86(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_vm86(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_vm86(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_poll ['struct pollfd __user *ufds', 'unsigned int nfds', 'int timeout']
#define locals_LINUX__X86_sys_poll(ctx, pref) \
	uint32_t UNUSED(pref##ufds) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nfds) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_poll(ctx, pref) \
	uint32_t &UNUSED(pref##ufds) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_poll(ctx, pref) \
	const uint32_t &UNUSED(pref##ufds) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nfds) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_setresgid16 ['old_gid_t rgid', 'old_gid_t egid', 'old_gid_t sgid']
#define locals_LINUX__X86_sys_setresgid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setresgid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setresgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresgid16 ['old_gid_t __user *rgid', 'old_gid_t __user *egid', 'old_gid_t __user *sgid']
#define locals_LINUX__X86_sys_getresgid16(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getresgid16(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getresgid16(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_prctl ['int option', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__X86_sys_prctl(ctx, pref) \
	int32_t UNUSED(pref##option) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_prctl(ctx, pref) \
	int32_t &UNUSED(pref##option) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_prctl(ctx, pref) \
	const int32_t &UNUSED(pref##option) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_rt_sigreturn ['void']
#undef locals_LINUX__X86_sys_rt_sigreturn
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_rt_sigreturn
#endif

// long sys_rt_sigaction ['int', 'const struct sigaction __user *', 'struct sigaction __user *', 'size_t']
#define locals_LINUX__X86_sys_rt_sigaction(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigaction(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_rt_sigaction(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigprocmask ['int how', 'sigset_t __user *set', 'sigset_t __user *oset', 'size_t sigsetsize']
#define locals_LINUX__X86_sys_rt_sigprocmask(ctx, pref) \
	int32_t UNUSED(pref##how) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##oset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigprocmask(ctx, pref) \
	int32_t &UNUSED(pref##how) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##oset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_rt_sigprocmask(ctx, pref) \
	const int32_t &UNUSED(pref##how) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##oset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigpending ['sigset_t __user *set', 'size_t sigsetsize']
#define locals_LINUX__X86_sys_rt_sigpending(ctx, pref) \
	uint32_t UNUSED(pref##set) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigpending(ctx, pref) \
	uint32_t &UNUSED(pref##set) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_rt_sigpending(ctx, pref) \
	const uint32_t &UNUSED(pref##set) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_rt_sigtimedwait ['const sigset_t __user *uthese', 'siginfo_t __user *uinfo', 'const struct timespec __user *uts', 'size_t sigsetsize']
#define locals_LINUX__X86_sys_rt_sigtimedwait(ctx, pref) \
	uint32_t UNUSED(pref##uthese) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uts) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigtimedwait(ctx, pref) \
	uint32_t &UNUSED(pref##uthese) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uts) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_rt_sigtimedwait(ctx, pref) \
	const uint32_t &UNUSED(pref##uthese) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uts) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_rt_sigqueueinfo ['pid_t pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__X86_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_rt_sigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_rt_sigsuspend ['sigset_t __user *unewset', 'size_t sigsetsize']
#define locals_LINUX__X86_sys_rt_sigsuspend(ctx, pref) \
	uint32_t UNUSED(pref##unewset) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_sigsuspend(ctx, pref) \
	uint32_t &UNUSED(pref##unewset) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_rt_sigsuspend(ctx, pref) \
	const uint32_t &UNUSED(pref##unewset) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_pread64 ['unsigned int fd', 'char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__X86_sys_pread64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pread64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_pread64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_pwrite64 ['unsigned int fd', 'const char __user *buf', 'size_t count', 'loff_t pos']
#define locals_LINUX__X86_sys_pwrite64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##pos) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pwrite64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##pos) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_pwrite64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##pos) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_chown16 ['const char __user *filename', 'old_uid_t user', 'old_gid_t group']
#define locals_LINUX__X86_sys_chown16(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_chown16(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_chown16(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getcwd ['char __user *buf', 'unsigned long size']
#define locals_LINUX__X86_sys_getcwd(ctx, pref) \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getcwd(ctx, pref) \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getcwd(ctx, pref) \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_capget ['cap_user_header_t header', 'cap_user_data_t dataptr']
#define locals_LINUX__X86_sys_capget(ctx, pref) \
	uint32_t UNUSED(pref##header) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dataptr) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_capget(ctx, pref) \
	uint32_t &UNUSED(pref##header) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dataptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_capget(ctx, pref) \
	const uint32_t &UNUSED(pref##header) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dataptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_capset ['cap_user_header_t header', 'const cap_user_data_t data']
#define locals_LINUX__X86_sys_capset(ctx, pref) \
	uint32_t UNUSED(pref##header) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_data) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_capset(ctx, pref) \
	uint32_t &UNUSED(pref##header) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_data) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_capset(ctx, pref) \
	const uint32_t &UNUSED(pref##header) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_data) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sigaltstack ['const struct sigaltstack __user *uss', 'struct sigaltstack __user *uoss']
#define locals_LINUX__X86_sys_sigaltstack(ctx, pref) \
	uint32_t UNUSED(pref##uss) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uoss) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sigaltstack(ctx, pref) \
	uint32_t &UNUSED(pref##uss) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uoss) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_sigaltstack(ctx, pref) \
	const uint32_t &UNUSED(pref##uss) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uoss) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_sendfile ['int out_fd', 'int in_fd', 'off_t __user *offset', 'size_t count']
#define locals_LINUX__X86_sys_sendfile(ctx, pref) \
	int32_t UNUSED(pref##out_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##in_fd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sendfile(ctx, pref) \
	int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_sendfile(ctx, pref) \
	const int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_vfork ['void']
#undef locals_LINUX__X86_sys_vfork
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_vfork
#endif

// long sys_getrlimit ['unsigned int resource', 'struct rlimit __user *rlim']
#define locals_LINUX__X86_sys_getrlimit(ctx, pref) \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##rlim) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getrlimit(ctx, pref) \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getrlimit(ctx, pref) \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mmap_pgoff ['unsigned long addr', 'unsigned long len', 'unsigned long prot', 'unsigned long flags', 'unsigned long fd', 'unsigned long pgoff']
#define locals_LINUX__X86_sys_mmap_pgoff(ctx, pref) \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##pgoff) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mmap_pgoff(ctx, pref) \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_mmap_pgoff(ctx, pref) \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_truncate64 ['const char __user *path', 'loff_t length']
#define locals_LINUX__X86_sys_truncate64(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##length) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_truncate64(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##length) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_truncate64(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##length) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_ftruncate64 ['unsigned int fd', 'loff_t length']
#define locals_LINUX__X86_sys_ftruncate64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##length) = *(uint64_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ftruncate64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##length) = *reinterpret_cast<uint64_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_ftruncate64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##length) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]);
#endif

// long sys_stat64 ['const char __user *filename', 'struct stat64 __user *statbuf']
#define locals_LINUX__X86_sys_stat64(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_stat64(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_stat64(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lstat64 ['const char __user *filename', 'struct stat64 __user *statbuf']
#define locals_LINUX__X86_sys_lstat64(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lstat64(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_lstat64(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fstat64 ['unsigned long fd', 'struct stat64 __user *statbuf']
#define locals_LINUX__X86_sys_fstat64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fstat64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fstat64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lchown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__X86_sys_lchown(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lchown(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_lchown(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getuid ['void']
#undef locals_LINUX__X86_sys_getuid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getuid
#endif

// long sys_getgid ['void']
#undef locals_LINUX__X86_sys_getgid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getgid
#endif

// long sys_geteuid ['void']
#undef locals_LINUX__X86_sys_geteuid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_geteuid
#endif

// long sys_getegid ['void']
#undef locals_LINUX__X86_sys_getegid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_getegid
#endif

// long sys_setreuid ['uid_t ruid', 'uid_t euid']
#define locals_LINUX__X86_sys_setreuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setreuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setreuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setregid ['gid_t rgid', 'gid_t egid']
#define locals_LINUX__X86_sys_setregid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setregid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setregid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_getgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__X86_sys_getgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_getgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_setgroups ['int gidsetsize', 'gid_t __user *grouplist']
#define locals_LINUX__X86_sys_setgroups(ctx, pref) \
	int32_t UNUSED(pref##gidsetsize) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##grouplist) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setgroups(ctx, pref) \
	int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setgroups(ctx, pref) \
	const int32_t &UNUSED(pref##gidsetsize) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##grouplist) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fchown ['unsigned int fd', 'uid_t user', 'gid_t group']
#define locals_LINUX__X86_sys_fchown(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchown(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fchown(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setresuid ['uid_t ruid', 'uid_t euid', 'uid_t suid']
#define locals_LINUX__X86_sys_setresuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setresuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setresuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresuid ['uid_t __user *ruid', 'uid_t __user *euid', 'uid_t __user *suid']
#define locals_LINUX__X86_sys_getresuid(ctx, pref) \
	uint32_t UNUSED(pref##ruid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##euid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##suid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getresuid(ctx, pref) \
	uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##euid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##suid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getresuid(ctx, pref) \
	const uint32_t &UNUSED(pref##ruid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##euid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##suid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setresgid ['gid_t rgid', 'gid_t egid', 'gid_t sgid']
#define locals_LINUX__X86_sys_setresgid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setresgid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_setresgid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getresgid ['gid_t __user *rgid', 'gid_t __user *egid', 'gid_t __user *sgid']
#define locals_LINUX__X86_sys_getresgid(ctx, pref) \
	uint32_t UNUSED(pref##rgid) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##egid) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sgid) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getresgid(ctx, pref) \
	uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##egid) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getresgid(ctx, pref) \
	const uint32_t &UNUSED(pref##rgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##egid) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sgid) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_chown ['const char __user *filename', 'uid_t user', 'gid_t group']
#define locals_LINUX__X86_sys_chown(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_chown(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_chown(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setuid ['uid_t uid']
#define locals_LINUX__X86_sys_setuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setgid ['gid_t gid']
#define locals_LINUX__X86_sys_setgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsuid ['uid_t uid']
#define locals_LINUX__X86_sys_setfsuid(ctx, pref) \
	uint32_t UNUSED(pref##uid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setfsuid(ctx, pref) \
	uint32_t &UNUSED(pref##uid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setfsuid(ctx, pref) \
	const uint32_t &UNUSED(pref##uid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_setfsgid ['gid_t gid']
#define locals_LINUX__X86_sys_setfsgid(ctx, pref) \
	uint32_t UNUSED(pref##gid) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setfsgid(ctx, pref) \
	uint32_t &UNUSED(pref##gid) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_setfsgid(ctx, pref) \
	const uint32_t &UNUSED(pref##gid) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_pivot_root ['const char __user *new_root', 'const char __user *put_old']
#define locals_LINUX__X86_sys_pivot_root(ctx, pref) \
	uint32_t UNUSED(pref##new_root) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##put_old) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pivot_root(ctx, pref) \
	uint32_t &UNUSED(pref##new_root) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##put_old) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_pivot_root(ctx, pref) \
	const uint32_t &UNUSED(pref##new_root) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##put_old) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mincore ['unsigned long start', 'size_t len', 'unsigned char __user *vec']
#define locals_LINUX__X86_sys_mincore(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mincore(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mincore(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_madvise ['unsigned long start', 'size_t len', 'int behavior']
#define locals_LINUX__X86_sys_madvise(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##behavior) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_madvise(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##behavior) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_madvise(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##behavior) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_getdents64 ['unsigned int fd', 'struct linux_dirent64 __user *dirent', 'unsigned int count']
#define locals_LINUX__X86_sys_getdents64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##dirent) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getdents64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getdents64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##dirent) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fcntl64 ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']
#define locals_LINUX__X86_sys_fcntl64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##cmd) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fcntl64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fcntl64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##cmd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_gettid ['void']
#undef locals_LINUX__X86_sys_gettid
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_gettid
#endif

// long sys_readahead ['int fd', 'loff_t offset', 'size_t count']
#define locals_LINUX__X86_sys_readahead(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_readahead(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_readahead(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_setxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X86_sys_setxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_setxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_lsetxattr ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X86_sys_lsetxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lsetxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_lsetxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_fsetxattr ['int fd', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']
#define locals_LINUX__X86_sys_fsetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fsetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_fsetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X86_sys_getxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_getxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_lgetxattr ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X86_sys_lgetxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lgetxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_lgetxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fgetxattr ['int fd', 'const char __user *name', 'void __user *value', 'size_t size']
#define locals_LINUX__X86_sys_fgetxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##value) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fgetxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##value) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_fgetxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##value) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_listxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__X86_sys_listxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_listxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_listxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_llistxattr ['const char __user *path', 'char __user *list', 'size_t size']
#define locals_LINUX__X86_sys_llistxattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_llistxattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_llistxattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_flistxattr ['int fd', 'char __user *list', 'size_t size']
#define locals_LINUX__X86_sys_flistxattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##list) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_flistxattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##list) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_flistxattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##list) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_removexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__X86_sys_removexattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_removexattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_removexattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_lremovexattr ['const char __user *path', 'const char __user *name']
#define locals_LINUX__X86_sys_lremovexattr(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lremovexattr(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_lremovexattr(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fremovexattr ['int fd', 'const char __user *name']
#define locals_LINUX__X86_sys_fremovexattr(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fremovexattr(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fremovexattr(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_tkill ['pid_t pid', 'int sig']
#define locals_LINUX__X86_sys_tkill(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_tkill(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_tkill(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_sendfile64 ['int out_fd', 'int in_fd', 'loff_t __user *offset', 'size_t count']
#define locals_LINUX__X86_sys_sendfile64(ctx, pref) \
	int32_t UNUSED(pref##out_fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##in_fd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##offset) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sendfile64(ctx, pref) \
	int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##offset) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_sendfile64(ctx, pref) \
	const int32_t &UNUSED(pref##out_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##in_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##offset) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_futex ['u32 __user *uaddr', 'int op', 'u32 val', 'struct timespec __user *utime', 'u32 __user *uaddr2', 'u32 val3']
#define locals_LINUX__X86_sys_futex(ctx, pref) \
	uint32_t UNUSED(pref##uaddr) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##val) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##utime) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##uaddr2) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##val3) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_futex(ctx, pref) \
	uint32_t &UNUSED(pref##uaddr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##val) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##utime) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##uaddr2) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##val3) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_futex(ctx, pref) \
	const uint32_t &UNUSED(pref##uaddr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##val) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##utime) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##uaddr2) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##val3) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_sched_setaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__X86_sys_sched_setaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user_mask_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_setaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sched_setaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getaffinity ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']
#define locals_LINUX__X86_sys_sched_getaffinity(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user_mask_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_getaffinity(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sched_getaffinity(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user_mask_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_set_thread_area ['struct user_desc __user *']
#define locals_LINUX__X86_sys_set_thread_area(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_set_thread_area(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_set_thread_area(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_get_thread_area ['struct user_desc __user *']
#define locals_LINUX__X86_sys_get_thread_area(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_get_thread_area(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_get_thread_area(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_io_setup ['unsigned nr_reqs', 'aio_context_t __user *ctx']
#define locals_LINUX__X86_sys_io_setup(ctx, pref) \
	uint32_t UNUSED(pref##nr_reqs) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##ctx) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_io_setup(ctx, pref) \
	uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_io_setup(ctx, pref) \
	const uint32_t &UNUSED(pref##nr_reqs) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_io_destroy ['aio_context_t ctx']
#define locals_LINUX__X86_sys_io_destroy(ctx, pref) \
	uint32_t UNUSED(pref##ctx) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_io_destroy(ctx, pref) \
	uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_io_destroy(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_io_getevents ['aio_context_t ctx_id', 'long min_nr', 'long nr', 'struct io_event __user *events', 'struct timespec __user *timeout']
#define locals_LINUX__X86_sys_io_getevents(ctx, pref) \
	uint32_t UNUSED(pref##ctx_id) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##min_nr) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##nr) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_io_getevents(ctx, pref) \
	uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##min_nr) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##nr) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_io_getevents(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##min_nr) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##nr) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_io_submit ['aio_context_t', 'long', 'struct iocb __user * __user *']
#define locals_LINUX__X86_sys_io_submit(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_io_submit(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_io_submit(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_io_cancel ['aio_context_t ctx_id', 'struct iocb __user *iocb', 'struct io_event __user *result']
#define locals_LINUX__X86_sys_io_cancel(ctx, pref) \
	uint32_t UNUSED(pref##ctx_id) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##iocb) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##result) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_io_cancel(ctx, pref) \
	uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##iocb) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##result) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_io_cancel(ctx, pref) \
	const uint32_t &UNUSED(pref##ctx_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##iocb) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##result) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fadvise64 ['int fd', 'loff_t offset', 'size_t len', 'int advice']
#define locals_LINUX__X86_sys_fadvise64(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##advice) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fadvise64(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##advice) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_fadvise64(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##advice) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_exit_group ['int error_code']
#define locals_LINUX__X86_sys_exit_group(ctx, pref) \
	int32_t UNUSED(pref##error_code) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_exit_group(ctx, pref) \
	int32_t &UNUSED(pref##error_code) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_exit_group(ctx, pref) \
	const int32_t &UNUSED(pref##error_code) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_lookup_dcookie ['u64 cookie64', 'char __user *buf', 'size_t len']
#define locals_LINUX__X86_sys_lookup_dcookie(ctx, pref) \
	uint64_t UNUSED(pref##cookie64) = *(uint64_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_lookup_dcookie(ctx, pref) \
	uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<uint64_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_lookup_dcookie(ctx, pref) \
	const uint64_t &UNUSED(pref##cookie64) = *reinterpret_cast<const uint64_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_epoll_create ['int size']
#define locals_LINUX__X86_sys_epoll_create(ctx, pref) \
	int32_t UNUSED(pref##size) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_epoll_create(ctx, pref) \
	int32_t &UNUSED(pref##size) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_epoll_create(ctx, pref) \
	const int32_t &UNUSED(pref##size) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_epoll_ctl ['int epfd', 'int op', 'int fd', 'struct epoll_event __user *event']
#define locals_LINUX__X86_sys_epoll_ctl(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##op) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##event) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_epoll_ctl(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##op) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##event) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_epoll_ctl(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##op) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##event) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_epoll_wait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout']
#define locals_LINUX__X86_sys_epoll_wait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_epoll_wait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_epoll_wait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_remap_file_pages ['unsigned long start', 'unsigned long size', 'unsigned long prot', 'unsigned long pgoff', 'unsigned long flags']
#define locals_LINUX__X86_sys_remap_file_pages(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pgoff) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_remap_file_pages(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_remap_file_pages(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pgoff) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_set_tid_address ['int __user *tidptr']
#define locals_LINUX__X86_sys_set_tid_address(ctx, pref) \
	uint32_t UNUSED(pref##tidptr) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_set_tid_address(ctx, pref) \
	uint32_t &UNUSED(pref##tidptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_set_tid_address(ctx, pref) \
	const uint32_t &UNUSED(pref##tidptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_timer_create ['clockid_t which_clock', 'struct sigevent __user *timer_event_spec', 'timer_t __user *created_timer_id']
#define locals_LINUX__X86_sys_timer_create(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##timer_event_spec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##created_timer_id) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timer_create(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_timer_create(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##timer_event_spec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##created_timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_timer_settime ['timer_t timer_id', 'int flags', 'const struct itimerspec __user *new_setting', 'struct itimerspec __user *old_setting']
#define locals_LINUX__X86_sys_timer_settime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_setting) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##old_setting) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timer_settime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_setting) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##old_setting) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_timer_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##old_setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_timer_gettime ['timer_t timer_id', 'struct itimerspec __user *setting']
#define locals_LINUX__X86_sys_timer_gettime(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##setting) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timer_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##setting) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_timer_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##setting) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_timer_getoverrun ['timer_t timer_id']
#define locals_LINUX__X86_sys_timer_getoverrun(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timer_getoverrun(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_timer_getoverrun(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_timer_delete ['timer_t timer_id']
#define locals_LINUX__X86_sys_timer_delete(ctx, pref) \
	uint32_t UNUSED(pref##timer_id) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timer_delete(ctx, pref) \
	uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_timer_delete(ctx, pref) \
	const uint32_t &UNUSED(pref##timer_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_clock_settime ['clockid_t which_clock', 'const struct timespec __user *tp']
#define locals_LINUX__X86_sys_clock_settime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clock_settime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_clock_settime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_gettime ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__X86_sys_clock_gettime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clock_gettime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_clock_gettime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_getres ['clockid_t which_clock', 'struct timespec __user *tp']
#define locals_LINUX__X86_sys_clock_getres(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tp) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clock_getres(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tp) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_clock_getres(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tp) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_clock_nanosleep ['clockid_t which_clock', 'int flags', 'const struct timespec __user *rqtp', 'struct timespec __user *rmtp']
#define locals_LINUX__X86_sys_clock_nanosleep(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##rqtp) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rmtp) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clock_nanosleep(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_clock_nanosleep(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##rqtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rmtp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_statfs64 ['const char __user *path', 'size_t sz', 'struct statfs64 __user *buf']
#define locals_LINUX__X86_sys_statfs64(ctx, pref) \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sz) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_statfs64(ctx, pref) \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_statfs64(ctx, pref) \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fstatfs64 ['unsigned int fd', 'size_t sz', 'struct statfs64 __user *buf']
#define locals_LINUX__X86_sys_fstatfs64(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##sz) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fstatfs64(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##sz) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fstatfs64(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##sz) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_tgkill ['pid_t tgid', 'pid_t pid', 'int sig']
#define locals_LINUX__X86_sys_tgkill(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_tgkill(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_tgkill(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_utimes ['char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__X86_sys_utimes(ctx, pref) \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_utimes(ctx, pref) \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_utimes(ctx, pref) \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fadvise64_64 ['int fd', 'loff_t offset', 'loff_t len', 'int advice']
#define locals_LINUX__X86_sys_fadvise64_64(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##advice) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fadvise64_64(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##advice) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_fadvise64_64(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##advice) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_mbind ['unsigned long start', 'unsigned long len', 'unsigned long mode', 'const unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned flags']
#define locals_LINUX__X86_sys_mbind(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mbind(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_mbind(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_get_mempolicy ['int __user *policy', 'unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned long addr', 'unsigned long flags']
#define locals_LINUX__X86_sys_get_mempolicy(ctx, pref) \
	uint32_t UNUSED(pref##policy) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##addr) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_get_mempolicy(ctx, pref) \
	uint32_t &UNUSED(pref##policy) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##addr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_get_mempolicy(ctx, pref) \
	const uint32_t &UNUSED(pref##policy) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##addr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_set_mempolicy ['int mode', 'const unsigned long __user *nmask', 'unsigned long maxnode']
#define locals_LINUX__X86_sys_set_mempolicy(ctx, pref) \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nmask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_set_mempolicy(ctx, pref) \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_set_mempolicy(ctx, pref) \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_mq_open ['const char __user *name', 'int oflag', 'umode_t mode', 'struct mq_attr __user *attr']
#define locals_LINUX__X86_sys_mq_open(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##oflag) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_open(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##oflag) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_mq_open(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##oflag) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_mq_unlink ['const char __user *name']
#define locals_LINUX__X86_sys_mq_unlink(ctx, pref) \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_unlink(ctx, pref) \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_mq_unlink(ctx, pref) \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_mq_timedsend ['mqd_t mqdes', 'const char __user *msg_ptr', 'size_t msg_len', 'unsigned int msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__X86_sys_mq_timedsend(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##msg_prio) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##abs_timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_timedsend(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_mq_timedsend(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_mq_timedreceive ['mqd_t mqdes', 'char __user *msg_ptr', 'size_t msg_len', 'unsigned int __user *msg_prio', 'const struct timespec __user *abs_timeout']
#define locals_LINUX__X86_sys_mq_timedreceive(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##msg_len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##msg_prio) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##abs_timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_timedreceive(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_mq_timedreceive(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##msg_len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##msg_prio) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##abs_timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_mq_notify ['mqd_t mqdes', 'const struct sigevent __user *notification']
#define locals_LINUX__X86_sys_mq_notify(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##notification) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_notify(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##notification) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_mq_notify(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##notification) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_mq_getsetattr ['mqd_t mqdes', 'const struct mq_attr __user *mqstat', 'struct mq_attr __user *omqstat']
#define locals_LINUX__X86_sys_mq_getsetattr(ctx, pref) \
	uint32_t UNUSED(pref##mqdes) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##mqstat) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##omqstat) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mq_getsetattr(ctx, pref) \
	uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##mqstat) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##omqstat) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mq_getsetattr(ctx, pref) \
	const uint32_t &UNUSED(pref##mqdes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##mqstat) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##omqstat) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_kexec_load ['unsigned long entry', 'unsigned long nr_segments', 'struct kexec_segment __user *segments', 'unsigned long flags']
#define locals_LINUX__X86_sys_kexec_load(ctx, pref) \
	uint32_t UNUSED(pref##entry) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nr_segments) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##segments) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_kexec_load(ctx, pref) \
	uint32_t &UNUSED(pref##entry) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nr_segments) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##segments) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_kexec_load(ctx, pref) \
	const uint32_t &UNUSED(pref##entry) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nr_segments) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##segments) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_waitid ['int which', 'pid_t pid', 'struct siginfo __user *infop', 'int options', 'struct rusage __user *ru']
#define locals_LINUX__X86_sys_waitid(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##infop) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##options) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##ru) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_waitid(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##infop) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##options) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##ru) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_waitid(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##infop) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##options) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##ru) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_add_key ['const char __user *_type', 'const char __user *_description', 'const void __user *_payload', 'size_t plen', 'key_serial_t destringid']
#define locals_LINUX__X86_sys_add_key(ctx, pref) \
	uint32_t UNUSED(pref##_type) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_description) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##_payload) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##plen) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_add_key(ctx, pref) \
	uint32_t &UNUSED(pref##_type) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_description) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##_payload) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##plen) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_add_key(ctx, pref) \
	const uint32_t &UNUSED(pref##_type) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_description) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##_payload) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##plen) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_request_key ['const char __user *_type', 'const char __user *_description', 'const char __user *_callout_info', 'key_serial_t destringid']
#define locals_LINUX__X86_sys_request_key(ctx, pref) \
	uint32_t UNUSED(pref##_type) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##_description) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##_callout_info) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##destringid) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_request_key(ctx, pref) \
	uint32_t &UNUSED(pref##_type) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##_description) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##_callout_info) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_request_key(ctx, pref) \
	const uint32_t &UNUSED(pref##_type) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##_description) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##_callout_info) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##destringid) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_keyctl ['int cmd', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']
#define locals_LINUX__X86_sys_keyctl(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_keyctl(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_keyctl(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_ioprio_set ['int which', 'int who', 'int ioprio']
#define locals_LINUX__X86_sys_ioprio_set(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##ioprio) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ioprio_set(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_ioprio_set(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##ioprio) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_ioprio_get ['int which', 'int who']
#define locals_LINUX__X86_sys_ioprio_get(ctx, pref) \
	int32_t UNUSED(pref##which) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##who) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ioprio_get(ctx, pref) \
	int32_t &UNUSED(pref##which) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##who) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_ioprio_get(ctx, pref) \
	const int32_t &UNUSED(pref##which) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##who) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init ['void']
#undef locals_LINUX__X86_sys_inotify_init
#if defined(__cplusplus)
#undef references_LINUX__X86_sys_inotify_init
#endif

// long sys_inotify_add_watch ['int fd', 'const char __user *path', 'u32 mask']
#define locals_LINUX__X86_sys_inotify_add_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_inotify_add_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_inotify_add_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_inotify_rm_watch ['int fd', '__s32 wd']
#define locals_LINUX__X86_sys_inotify_rm_watch(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##wd) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_inotify_rm_watch(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##wd) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_inotify_rm_watch(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##wd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_migrate_pages ['pid_t pid', 'unsigned long maxnode', 'const unsigned long __user *from', 'const unsigned long __user *to']
#define locals_LINUX__X86_sys_migrate_pages(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##maxnode) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##from) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##to) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_migrate_pages(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##from) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##to) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_migrate_pages(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##maxnode) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##from) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##to) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_openat ['int dfd', 'const char __user *filename', 'int flags', 'umode_t mode']
#define locals_LINUX__X86_sys_openat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_openat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_openat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_mkdirat ['int dfd', 'const char __user *pathname', 'umode_t mode']
#define locals_LINUX__X86_sys_mkdirat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mkdirat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mkdirat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_mknodat ['int dfd', 'const char __user *filename', 'umode_t mode', 'unsigned dev']
#define locals_LINUX__X86_sys_mknodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##dev) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mknodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##dev) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_mknodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##dev) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_fchownat ['int dfd', 'const char __user *filename', 'uid_t user', 'gid_t group', 'int flag']
#define locals_LINUX__X86_sys_fchownat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##user) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##group) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchownat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##user) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##group) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_fchownat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##user) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##group) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_futimesat ['int dfd', 'const char __user *filename', 'struct timeval __user *utimes']
#define locals_LINUX__X86_sys_futimesat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_futimesat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_futimesat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_fstatat64 ['int dfd', 'const char __user *filename', 'struct stat64 __user *statbuf', 'int flag']
#define locals_LINUX__X86_sys_fstatat64(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##statbuf) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fstatat64(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_fstatat64(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##statbuf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_unlinkat ['int dfd', 'const char __user *pathname', 'int flag']
#define locals_LINUX__X86_sys_unlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_unlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_unlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_renameat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__X86_sys_renameat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_renameat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_renameat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_linkat ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'int flags']
#define locals_LINUX__X86_sys_linkat(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_linkat(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_linkat(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_symlinkat ['const char __user *oldname', 'int newdfd', 'const char __user *newname']
#define locals_LINUX__X86_sys_symlinkat(ctx, pref) \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_symlinkat(ctx, pref) \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_symlinkat(ctx, pref) \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_readlinkat ['int dfd', 'const char __user *path', 'char __user *buf', 'int bufsiz']
#define locals_LINUX__X86_sys_readlinkat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##bufsiz) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_readlinkat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_readlinkat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##bufsiz) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_fchmodat ['int dfd', 'const char __user *filename', 'umode_t mode']
#define locals_LINUX__X86_sys_fchmodat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##mode) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fchmodat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##mode) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_fchmodat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##mode) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_faccessat ['int dfd', 'const char __user *filename', 'int mode']
#define locals_LINUX__X86_sys_faccessat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_faccessat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_faccessat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pselect6 ['int', 'fd_set __user *', 'fd_set __user *', 'fd_set __user *', 'struct timespec __user *', 'void __user *']
#define locals_LINUX__X86_sys_pselect6(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pselect6(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_pselect6(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_ppoll ['struct pollfd __user *', 'unsigned int', 'struct timespec __user *', 'const sigset_t __user *', 'size_t']
#define locals_LINUX__X86_sys_ppoll(ctx, pref) \
	uint32_t UNUSED(pref##arg0) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_ppoll(ctx, pref) \
	uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_ppoll(ctx, pref) \
	const uint32_t &UNUSED(pref##arg0) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_unshare ['unsigned long unshare_flags']
#define locals_LINUX__X86_sys_unshare(ctx, pref) \
	uint32_t UNUSED(pref##unshare_flags) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_unshare(ctx, pref) \
	uint32_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_unshare(ctx, pref) \
	const uint32_t &UNUSED(pref##unshare_flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_set_robust_list ['struct robust_list_head __user *head', 'size_t len']
#define locals_LINUX__X86_sys_set_robust_list(ctx, pref) \
	uint32_t UNUSED(pref##head) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_set_robust_list(ctx, pref) \
	uint32_t &UNUSED(pref##head) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_set_robust_list(ctx, pref) \
	const uint32_t &UNUSED(pref##head) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_get_robust_list ['int pid', 'struct robust_list_head __user * __user *head_ptr', 'size_t __user *len_ptr']
#define locals_LINUX__X86_sys_get_robust_list(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##head_ptr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len_ptr) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_get_robust_list(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##head_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_get_robust_list(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##head_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_splice ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X86_sys_splice(ctx, pref) \
	int32_t UNUSED(pref##fd_in) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##off_in) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd_out) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##off_out) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_splice(ctx, pref) \
	int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_splice(ctx, pref) \
	const int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_sync_file_range ['int fd', 'loff_t offset', 'loff_t nbytes', 'unsigned int flags']
#define locals_LINUX__X86_sys_sync_file_range(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##nbytes) = *(uint64_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sync_file_range(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_sync_file_range(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##nbytes) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_tee ['int fdin', 'int fdout', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X86_sys_tee(ctx, pref) \
	int32_t UNUSED(pref##fdin) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##fdout) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_tee(ctx, pref) \
	int32_t &UNUSED(pref##fdin) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##fdout) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_tee(ctx, pref) \
	const int32_t &UNUSED(pref##fdin) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##fdout) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_vmsplice ['int fd', 'const struct iovec __user *iov', 'unsigned long nr_segs', 'unsigned int flags']
#define locals_LINUX__X86_sys_vmsplice(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##iov) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##nr_segs) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_vmsplice(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##iov) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##nr_segs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_vmsplice(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##iov) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##nr_segs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_move_pages ['pid_t pid', 'unsigned long nr_pages', 'const void __user * __user *pages', 'const int __user *nodes', 'int __user *status', 'int flags']
#define locals_LINUX__X86_sys_move_pages(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##nr_pages) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##pages) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##nodes) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##status) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_move_pages(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##nr_pages) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##pages) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##nodes) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##status) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_move_pages(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##nr_pages) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##pages) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##nodes) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##status) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_getcpu ['unsigned __user *cpu', 'unsigned __user *node', 'struct getcpu_cache __user *cache']
#define locals_LINUX__X86_sys_getcpu(ctx, pref) \
	uint32_t UNUSED(pref##_cpu) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##node) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##cache) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getcpu(ctx, pref) \
	uint32_t &UNUSED(pref##_cpu) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##node) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##cache) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getcpu(ctx, pref) \
	const uint32_t &UNUSED(pref##_cpu) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##node) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##cache) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_epoll_pwait ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout', 'const sigset_t __user *sigmask', 'size_t sigsetsize']
#define locals_LINUX__X86_sys_epoll_pwait(ctx, pref) \
	int32_t UNUSED(pref##epfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##events) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##maxevents) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##timeout) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##sigmask) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##sigsetsize) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_epoll_pwait(ctx, pref) \
	int32_t &UNUSED(pref##epfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##events) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##timeout) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##sigmask) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_epoll_pwait(ctx, pref) \
	const int32_t &UNUSED(pref##epfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##events) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##maxevents) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##timeout) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##sigmask) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##sigsetsize) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_utimensat ['int dfd', 'const char __user *filename', 'struct timespec __user *utimes', 'int flags']
#define locals_LINUX__X86_sys_utimensat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utimes) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_utimensat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_utimensat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utimes) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_signalfd ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask']
#define locals_LINUX__X86_sys_signalfd(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user_mask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_signalfd(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_signalfd(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_timerfd_create ['int clockid', 'int flags']
#define locals_LINUX__X86_sys_timerfd_create(ctx, pref) \
	int32_t UNUSED(pref##clockid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timerfd_create(ctx, pref) \
	int32_t &UNUSED(pref##clockid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_timerfd_create(ctx, pref) \
	const int32_t &UNUSED(pref##clockid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_eventfd ['unsigned int count']
#define locals_LINUX__X86_sys_eventfd(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_eventfd(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_eventfd(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]);
#endif

// long sys_fallocate ['int fd', 'int mode', 'loff_t offset', 'loff_t len']
#define locals_LINUX__X86_sys_fallocate(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##mode) = *(int32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##offset) = *(uint64_t *)((ctx)->args[2]); \
	uint64_t UNUSED(pref##len) = *(uint64_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fallocate(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##mode) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##offset) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	uint64_t &UNUSED(pref##len) = *reinterpret_cast<uint64_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_fallocate(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##mode) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##offset) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const uint64_t &UNUSED(pref##len) = *reinterpret_cast<const uint64_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_settime ['int ufd', 'int flags', 'const struct itimerspec __user *utmr', 'struct itimerspec __user *otmr']
#define locals_LINUX__X86_sys_timerfd_settime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##utmr) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##otmr) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timerfd_settime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##utmr) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_timerfd_settime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##utmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_timerfd_gettime ['int ufd', 'struct itimerspec __user *otmr']
#define locals_LINUX__X86_sys_timerfd_gettime(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##otmr) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_timerfd_gettime(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_timerfd_gettime(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##otmr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_signalfd4 ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask', 'int flags']
#define locals_LINUX__X86_sys_signalfd4(ctx, pref) \
	int32_t UNUSED(pref##ufd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##user_mask) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##sizemask) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_signalfd4(ctx, pref) \
	int32_t &UNUSED(pref##ufd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_signalfd4(ctx, pref) \
	const int32_t &UNUSED(pref##ufd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##user_mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##sizemask) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_eventfd2 ['unsigned int count', 'int flags']
#define locals_LINUX__X86_sys_eventfd2(ctx, pref) \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_eventfd2(ctx, pref) \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_eventfd2(ctx, pref) \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_epoll_create1 ['int flags']
#define locals_LINUX__X86_sys_epoll_create1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_epoll_create1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_epoll_create1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_dup3 ['unsigned int oldfd', 'unsigned int newfd', 'int flags']
#define locals_LINUX__X86_sys_dup3(ctx, pref) \
	uint32_t UNUSED(pref##oldfd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##newfd) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_dup3(ctx, pref) \
	uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_dup3(ctx, pref) \
	const uint32_t &UNUSED(pref##oldfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##newfd) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_pipe2 ['int __user *fildes', 'int flags']
#define locals_LINUX__X86_sys_pipe2(ctx, pref) \
	uint32_t UNUSED(pref##fildes) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pipe2(ctx, pref) \
	uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_pipe2(ctx, pref) \
	const uint32_t &UNUSED(pref##fildes) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_inotify_init1 ['int flags']
#define locals_LINUX__X86_sys_inotify_init1(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_inotify_init1(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_inotify_init1(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_preadv ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__X86_sys_preadv(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_preadv(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_preadv(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_pwritev ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']
#define locals_LINUX__X86_sys_pwritev(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pwritev(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_pwritev(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_rt_tgsigqueueinfo ['pid_t tgid', 'pid_t pid', 'int sig', 'siginfo_t __user *uinfo']
#define locals_LINUX__X86_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t UNUSED(pref##tgid) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##sig) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##uinfo) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_rt_tgsigqueueinfo(ctx, pref) \
	int32_t &UNUSED(pref##tgid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##sig) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_rt_tgsigqueueinfo(ctx, pref) \
	const int32_t &UNUSED(pref##tgid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##sig) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##uinfo) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_perf_event_open ['struct perf_event_attr __user *attr_uptr', 'pid_t pid', 'int cpu', 'int group_fd', 'unsigned long flags']
#define locals_LINUX__X86_sys_perf_event_open(ctx, pref) \
	uint32_t UNUSED(pref##attr_uptr) = *(uint32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##_cpu) = *(int32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##group_fd) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_perf_event_open(ctx, pref) \
	uint32_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_perf_event_open(ctx, pref) \
	const uint32_t &UNUSED(pref##attr_uptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##_cpu) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##group_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_recvmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags', 'struct timespec __user *timeout']
#define locals_LINUX__X86_sys_recvmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##timeout) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_recvmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_recvmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##timeout) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_fanotify_init ['unsigned int flags', 'unsigned int event_f_flags']
#define locals_LINUX__X86_sys_fanotify_init(ctx, pref) \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##event_f_flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fanotify_init(ctx, pref) \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_fanotify_init(ctx, pref) \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##event_f_flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_fanotify_mark ['int fanotify_fd', 'unsigned int flags', 'u64 mask', 'int fd', 'const char __user *pathname']
#define locals_LINUX__X86_sys_fanotify_mark(ctx, pref) \
	int32_t UNUSED(pref##fanotify_fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint64_t UNUSED(pref##mask) = *(uint64_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pathname) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_fanotify_mark(ctx, pref) \
	int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint64_t &UNUSED(pref##mask) = *reinterpret_cast<uint64_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_fanotify_mark(ctx, pref) \
	const int32_t &UNUSED(pref##fanotify_fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint64_t &UNUSED(pref##mask) = *reinterpret_cast<const uint64_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pathname) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_prlimit64 ['pid_t pid', 'unsigned int resource', 'const struct rlimit64 __user *new_rlim', 'struct rlimit64 __user *old_rlim']
#define locals_LINUX__X86_sys_prlimit64(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##resource) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##new_rlim) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##old_rlim) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_prlimit64(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##resource) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##new_rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##old_rlim) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_prlimit64(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##resource) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##new_rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##old_rlim) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_name_to_handle_at ['int dfd', 'const char __user *name', 'struct file_handle __user *handle', 'int __user *mnt_id', 'int flag']
#define locals_LINUX__X86_sys_name_to_handle_at(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##name) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##handle) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mnt_id) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flag) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_name_to_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##name) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##handle) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mnt_id) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flag) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_name_to_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##name) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mnt_id) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flag) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_open_by_handle_at ['int mountdirfd', 'struct file_handle __user *handle', 'int flags']
#define locals_LINUX__X86_sys_open_by_handle_at(ctx, pref) \
	int32_t UNUSED(pref##mountdirfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##handle) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_open_by_handle_at(ctx, pref) \
	int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##handle) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_open_by_handle_at(ctx, pref) \
	const int32_t &UNUSED(pref##mountdirfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##handle) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_clock_adjtime ['clockid_t which_clock', 'struct timex __user *tx']
#define locals_LINUX__X86_sys_clock_adjtime(ctx, pref) \
	uint32_t UNUSED(pref##which_clock) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##tx) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_clock_adjtime(ctx, pref) \
	uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##tx) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_clock_adjtime(ctx, pref) \
	const uint32_t &UNUSED(pref##which_clock) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##tx) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_syncfs ['int fd']
#define locals_LINUX__X86_sys_syncfs(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_syncfs(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_syncfs(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_sendmmsg ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags']
#define locals_LINUX__X86_sys_sendmmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sendmmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_sendmmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_setns ['int fd', 'int nstype']
#define locals_LINUX__X86_sys_setns(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##nstype) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setns(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##nstype) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_setns(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##nstype) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_process_vm_readv ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__X86_sys_process_vm_readv(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##lvec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##liovcnt) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rvec) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##riovcnt) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_process_vm_readv(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_process_vm_readv(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_process_vm_writev ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']
#define locals_LINUX__X86_sys_process_vm_writev(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##lvec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##liovcnt) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##rvec) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##riovcnt) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_process_vm_writev(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_process_vm_writev(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##lvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##liovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##rvec) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##riovcnt) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_kcmp ['pid_t pid1', 'pid_t pid2', 'int type', 'unsigned long idx1', 'unsigned long idx2']
#define locals_LINUX__X86_sys_kcmp(ctx, pref) \
	int32_t UNUSED(pref##pid1) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##pid2) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##type) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##idx1) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##idx2) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_kcmp(ctx, pref) \
	int32_t &UNUSED(pref##pid1) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##pid2) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##type) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##idx1) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##idx2) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_kcmp(ctx, pref) \
	const int32_t &UNUSED(pref##pid1) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##pid2) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##type) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##idx1) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##idx2) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_finit_module ['int fd', 'const char __user *uargs', 'int flags']
#define locals_LINUX__X86_sys_finit_module(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_finit_module(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_finit_module(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_sched_setattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int flags']
#define locals_LINUX__X86_sys_sched_setattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_setattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sched_setattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sched_getattr ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int size', 'unsigned int flags']
#define locals_LINUX__X86_sys_sched_getattr(ctx, pref) \
	int32_t UNUSED(pref##pid) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sched_getattr(ctx, pref) \
	int32_t &UNUSED(pref##pid) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_sched_getattr(ctx, pref) \
	const int32_t &UNUSED(pref##pid) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_renameat2 ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'unsigned int flags']
#define locals_LINUX__X86_sys_renameat2(ctx, pref) \
	int32_t UNUSED(pref##olddfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##oldname) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##newdfd) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##newname) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_renameat2(ctx, pref) \
	int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##newname) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_renameat2(ctx, pref) \
	const int32_t &UNUSED(pref##olddfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##oldname) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##newdfd) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##newname) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_seccomp ['unsigned int op', 'unsigned int flags', 'const char __user *uargs']
#define locals_LINUX__X86_sys_seccomp(ctx, pref) \
	uint32_t UNUSED(pref##op) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##uargs) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_seccomp(ctx, pref) \
	uint32_t &UNUSED(pref##op) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_seccomp(ctx, pref) \
	const uint32_t &UNUSED(pref##op) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##uargs) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getrandom ['char __user *buf', 'size_t count', 'unsigned int flags']
#define locals_LINUX__X86_sys_getrandom(ctx, pref) \
	uint32_t UNUSED(pref##buf) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##count) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getrandom(ctx, pref) \
	uint32_t &UNUSED(pref##buf) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##count) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getrandom(ctx, pref) \
	const uint32_t &UNUSED(pref##buf) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##count) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_memfd_create ['const char __user *uname_ptr', 'unsigned int flags']
#define locals_LINUX__X86_sys_memfd_create(ctx, pref) \
	uint32_t UNUSED(pref##uname_ptr) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_memfd_create(ctx, pref) \
	uint32_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_memfd_create(ctx, pref) \
	const uint32_t &UNUSED(pref##uname_ptr) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_bpf ['int cmd', 'union bpf_attr *attr', 'unsigned int size']
#define locals_LINUX__X86_sys_bpf(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##attr) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##size) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_bpf(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##attr) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##size) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_bpf(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##attr) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##size) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_execveat ['int dfd', 'const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp', 'int flags']
#define locals_LINUX__X86_sys_execveat(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##filename) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##argv) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##envp) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_execveat(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##filename) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##argv) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##envp) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_execveat(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##filename) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##argv) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##envp) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_socket ['int', 'int', 'int']
#define locals_LINUX__X86_sys_socket(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_socket(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_socket(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_socketpair ['int', 'int', 'int', 'int __user *']
#define locals_LINUX__X86_sys_socketpair(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_socketpair(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_socketpair(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]);
#endif

// long sys_bind ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X86_sys_bind(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_bind(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_bind(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_connect ['int', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X86_sys_connect(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##arg2) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_connect(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##arg2) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_connect(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##arg2) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_listen ['int', 'int']
#define locals_LINUX__X86_sys_listen(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_listen(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_listen(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_accept4 ['int', 'struct sockaddr __user *', 'int __user *', 'int']
#define locals_LINUX__X86_sys_accept4(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##arg3) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_accept4(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##arg3) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_accept4(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##arg3) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_getsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int __user *optlen']
#define locals_LINUX__X86_sys_getsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##optval) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##optlen) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##optval) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##optlen) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_getsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##optval) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##optlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_setsockopt ['int fd', 'int level', 'int optname', 'char __user *optval', 'int optlen']
#define locals_LINUX__X86_sys_setsockopt(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##level) = *(int32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##optname) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##optval) = *(uint32_t *)((ctx)->args[3]); \
	int32_t UNUSED(pref##optlen) = *(int32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_setsockopt(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##level) = *reinterpret_cast<int32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##optname) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##optval) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	int32_t &UNUSED(pref##optlen) = *reinterpret_cast<int32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_setsockopt(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##level) = *reinterpret_cast<const int32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##optname) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##optval) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const int32_t &UNUSED(pref##optlen) = *reinterpret_cast<const int32_t *>((ctx)->args[4]);
#endif

// long sys_getsockname ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X86_sys_getsockname(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getsockname(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getsockname(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_getpeername ['int', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X86_sys_getpeername(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_getpeername(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_getpeername(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_sendto ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int']
#define locals_LINUX__X86_sys_sendto(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	int32_t UNUSED(pref##arg5) = *(int32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sendto(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	int32_t &UNUSED(pref##arg5) = *reinterpret_cast<int32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_sendto(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const int32_t &UNUSED(pref##arg5) = *reinterpret_cast<const int32_t *>((ctx)->args[5]);
#endif

// long sys_sendmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__X86_sys_sendmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_sendmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_sendmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_recvfrom ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int __user *']
#define locals_LINUX__X86_sys_recvfrom(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##arg2) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##arg3) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##arg4) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##arg5) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_recvfrom(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_recvfrom(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##arg2) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##arg3) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##arg4) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##arg5) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_recvmsg ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']
#define locals_LINUX__X86_sys_recvmsg(ctx, pref) \
	int32_t UNUSED(pref##fd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##msg) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_recvmsg(ctx, pref) \
	int32_t &UNUSED(pref##fd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##msg) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_recvmsg(ctx, pref) \
	const int32_t &UNUSED(pref##fd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##msg) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]);
#endif

// long sys_shutdown ['int', 'int']
#define locals_LINUX__X86_sys_shutdown(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##arg1) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_shutdown(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##arg1) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_shutdown(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##arg1) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_userfaultfd ['int flags']
#define locals_LINUX__X86_sys_userfaultfd(ctx, pref) \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_userfaultfd(ctx, pref) \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_userfaultfd(ctx, pref) \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_membarrier ['int cmd', 'int flags']
#define locals_LINUX__X86_sys_membarrier(ctx, pref) \
	int32_t UNUSED(pref##cmd) = *(int32_t *)((ctx)->args[0]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_membarrier(ctx, pref) \
	int32_t &UNUSED(pref##cmd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_membarrier(ctx, pref) \
	const int32_t &UNUSED(pref##cmd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[1]);
#endif

// long sys_mlock2 ['unsigned long start', 'size_t len', 'int flags']
#define locals_LINUX__X86_sys_mlock2(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##flags) = *(int32_t *)((ctx)->args[2]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_mlock2(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##flags) = *reinterpret_cast<int32_t *>((ctx)->args[2]);
#define creferences_LINUX__X86_sys_mlock2(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
#endif

// long sys_copy_file_range ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']
#define locals_LINUX__X86_sys_copy_file_range(ctx, pref) \
	int32_t UNUSED(pref##fd_in) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##off_in) = *(uint32_t *)((ctx)->args[1]); \
	int32_t UNUSED(pref##fd_out) = *(int32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##off_out) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_copy_file_range(ctx, pref) \
	int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<int32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_copy_file_range(ctx, pref) \
	const int32_t &UNUSED(pref##fd_in) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##off_in) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const int32_t &UNUSED(pref##fd_out) = *reinterpret_cast<const int32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##off_out) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_preadv2 ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']
#define locals_LINUX__X86_sys_preadv2(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_preadv2(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_preadv2(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_pwritev2 ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']
#define locals_LINUX__X86_sys_pwritev2(ctx, pref) \
	uint32_t UNUSED(pref##fd) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##vec) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##vlen) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##pos_l) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##pos_h) = *(uint32_t *)((ctx)->args[4]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[5]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pwritev2(ctx, pref) \
	uint32_t &UNUSED(pref##fd) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##vec) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<uint32_t *>((ctx)->args[4]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[5]);
#define creferences_LINUX__X86_sys_pwritev2(ctx, pref) \
	const uint32_t &UNUSED(pref##fd) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##vec) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##vlen) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##pos_l) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##pos_h) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[5]);
#endif

// long sys_pkey_mprotect ['unsigned long start', 'size_t len', 'unsigned long prot', 'int pkey']
#define locals_LINUX__X86_sys_pkey_mprotect(ctx, pref) \
	uint32_t UNUSED(pref##start) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##len) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##prot) = *(uint32_t *)((ctx)->args[2]); \
	int32_t UNUSED(pref##pkey) = *(int32_t *)((ctx)->args[3]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pkey_mprotect(ctx, pref) \
	uint32_t &UNUSED(pref##start) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##len) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##prot) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	int32_t &UNUSED(pref##pkey) = *reinterpret_cast<int32_t *>((ctx)->args[3]);
#define creferences_LINUX__X86_sys_pkey_mprotect(ctx, pref) \
	const uint32_t &UNUSED(pref##start) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##len) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##prot) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const int32_t &UNUSED(pref##pkey) = *reinterpret_cast<const int32_t *>((ctx)->args[3]);
#endif

// long sys_pkey_alloc ['unsigned long flags', 'unsigned long init_val']
#define locals_LINUX__X86_sys_pkey_alloc(ctx, pref) \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##init_val) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pkey_alloc(ctx, pref) \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##init_val) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_pkey_alloc(ctx, pref) \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##init_val) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif

// long sys_pkey_free ['int pkey']
#define locals_LINUX__X86_sys_pkey_free(ctx, pref) \
	int32_t UNUSED(pref##pkey) = *(int32_t *)((ctx)->args[0]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_pkey_free(ctx, pref) \
	int32_t &UNUSED(pref##pkey) = *reinterpret_cast<int32_t *>((ctx)->args[0]);
#define creferences_LINUX__X86_sys_pkey_free(ctx, pref) \
	const int32_t &UNUSED(pref##pkey) = *reinterpret_cast<const int32_t *>((ctx)->args[0]);
#endif

// long sys_statx ['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']
#define locals_LINUX__X86_sys_statx(ctx, pref) \
	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]); \
	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[3]); \
	uint32_t UNUSED(pref##buffer) = *(uint32_t *)((ctx)->args[4]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_statx(ctx, pref) \
	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
	uint32_t &UNUSED(pref##buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
#define creferences_LINUX__X86_sys_statx(ctx, pref) \
	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
	const uint32_t &UNUSED(pref##buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
#endif

// long sys_arch_prctl ['int', 'unsigned long']
#define locals_LINUX__X86_sys_arch_prctl(ctx, pref) \
	int32_t UNUSED(pref##arg0) = *(int32_t *)((ctx)->args[0]); \
	uint32_t UNUSED(pref##arg1) = *(uint32_t *)((ctx)->args[1]);
#if defined(__cplusplus)
#define references_LINUX__X86_sys_arch_prctl(ctx, pref) \
	int32_t &UNUSED(pref##arg0) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
	uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<uint32_t *>((ctx)->args[1]);
#define creferences_LINUX__X86_sys_arch_prctl(ctx, pref) \
	const int32_t &UNUSED(pref##arg0) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
	const uint32_t &UNUSED(pref##arg1) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]);
#endif


/* vim: set tabstop=4 softtabstop=4 noexpandtab ft=cpp: */