dist: bionic
language: c
compiler:
  - gcc
cache:
  # There is one cache per branch and compiler version.
  timeout: 1200
  ccache: true
  pip: true
  directories:
  - $HOME/avocado/data/cache


addons:
  apt:
    sources:
      # up to ubuntu xenial, we can use the ppa name
      - sourceline: 'ppa:phulin/panda'
      # the ppa doesn't support later ubuntu releases -- specify url instead
      #- sourceline: 'deb http://ppa.launchpad.net/phulin/panda/ubuntu xenial main'
    packages:
      # Build dependencies
      - chrpath
      - libaio-dev
      - libattr1-dev
      - libbrlapi-dev
      - libcap-dev
      - libcap-ng-dev
      - libgcc-4.8-dev
      - libgnutls-dev
      - libgtk-3-dev
      - libiscsi-dev
      - liblttng-ust-dev
      - libncurses5-dev
      - libnfs-dev
      - libnss3-dev
      - libpixman-1-dev
      - libpng12-dev
      - librados-dev
      - libsdl1.2-dev
      - libseccomp-dev
      - libspice-protocol-dev
      - libspice-server-dev
      - libssh-dev
      - liburcu-dev
      - libusb-1.0-0-dev
      - sparse
      - uuid-dev
      # PANDA stuff
      - bison
      - flex
      - linux-libc-dev
      - libcapstone-dev
      - libdwarf-dev
      - libelf-dev
      - libprotobuf-c0-dev
      - libprotoc-dev
      - libwireshark-dev
      - libwiretap-dev
      - llvm-3.3-dev
      - clang-3.3
      - protobuf-c-compiler
      - protobuf-compiler
      - python-pip
      - python-protobuf
      - python-pycparser
      # PYPANDA stuff
      - python3
      - python3-pip
      - python3-venv
      - python3-setuptools
      - genisoimage # To make isos for run_guest
      - wget
      # To build 32-bit targets for testing
      - libc6-dev-i386
      - gcc-multilib
      - nasm

# PANDA
sudo: required
dist: xenial
env:
  global:
    - PANDA_TEST="no" # These tests aren't too useful and timeout travis. They passed locally as of 2ce657c
git:
  # we want to do this ourselves for some reason
  submodules: false

before_install:
  - sudo pip install pycparser cffi colorama protobuf # pycparser is a core dependency, rest are for pypanda
  - git submodule update --init dtc
  - cd $(pyenv root) && git checkout master && git pull; cd - # Update pyenv
  - echo 'core_%e.%p' | sudo tee /proc/sys/kernel/core_pattern # Store coredumps locally
before_script:
  - ulimit -c unlimited -S       # enable core dumps
  # Setup python environment with pyenv (python2 and python3)
  - pyenv install 2.7.9 || travis_terminate 1; # For core qemu
  - pyenv install 3.6.6 || travis_terminate 1; # For pypanda
  - pyenv shell 2.7.9 3.6.6 || travis_terminate 1; # Create a shell with both python2 and python3
  - pip3 install cffi colorama protobuf # PYPANDA dependencies - not auto installed by setup because we don't use pip to install pypanda

script:
  # Run install script
  - sudo panda/scripts/install_ubuntu.sh || travis_terminate 1; # Build panda
  # Install pypanda
  - cd panda/python/core
  - python3 setup.py install || travis_terminate 1
  # Run pypanda tests
    # - cd ../tests
    #- make || travis_terminate 1
    #- pip3 install -r requirements.txt || travis_terminate 1 # Install test python dependencies (capstone, pyelftools)
    #  - python3 multi_proc_cbs.py
    #  - python3 taint_reg.py
    #  - python3 taint_ram.py
    #  # Run record_then_replay on multiple architectures
    #  - python3 record_then_replay.py i386
    #  - python3 record_then_replay.py x86_64
    #  - python3 record_then_replay.py arm
    #  - python3 record_then_replay.py ppc
    #  # Test hooking framework
    #  - python3 hooking.py
    #  # Regression tests
    #  - python3 sleep_in_cb.py
